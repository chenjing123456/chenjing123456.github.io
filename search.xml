<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Post请求Content-type的几种常见类型</title>
      <link href="/2020/09/14/content-type/"/>
      <url>/2020/09/14/content-type/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>介绍Content-type的作用和使用方法</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>是Http的实体首部字段，用于说明请求或返回的消息主体是用何种方式编码，在request header和response header里都可以有。本文介绍一般跟后台开发时经常会使用到的几种常用content-type类型。</p><h2 id="几个常用类型"><a href="#几个常用类型" class="headerlink" title="几个常用类型"></a>几个常用类型</h2><h3 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h3><ul><li>表现：<br>表单格式，浏览器的原生form表单提交或者返回数据。<br>前台数据的格式：<br><img src="/images/web/website/form1.png" alt="目录"><br>提交数据时传给后台的格式，按照 key1=val1&amp;key2=val2 的方式进行编码，key和val都进行了URL转码。<br><img src="/images/web/website/form.png" alt="目录"></li><li><p>使用：关键是把数据格式转换成key1=val1&amp;key2=val2的形式：<br>方法一：URLSearchParams对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let data = new URLSearchParams();</span><br><span class="line">data.append(&apos;username&apos;, &apos;admin&apos;);</span><br><span class="line">data.append(&apos;password&apos;, &apos;123456&apos;);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    url: &apos;/OAuth/oauth/token&apos;,</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法二：利用qs将参数转换为query参数,<br>引入 qs ，这个库是 axios 里面包含的，不需要再下载了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import qs from &apos;qs&apos;</span><br><span class="line"> axios(&#123;</span><br><span class="line">     method: &apos;post&apos;,</span><br><span class="line">     url: &apos;/api/dtalkLogin&apos;, // 路径</span><br><span class="line">     data: &#123;</span><br><span class="line">         code</span><br><span class="line">     &#125;,</span><br><span class="line">     transformRequest: [function (data) &#123;</span><br><span class="line">         let ret = &apos;&apos;;</span><br><span class="line">         ret = qs.stringify(data);</span><br><span class="line">         return ret;</span><br><span class="line">     &#125;],</span><br><span class="line">     headers: &#123;</span><br><span class="line">         &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 或者：</span><br><span class="line"> var data = &#123;</span><br><span class="line">     username: &quot;admin&quot;,</span><br><span class="line">     password: &quot;123456&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> axios(&#123;</span><br><span class="line">     url: &apos;/OAuth/oauth/token&apos;,</span><br><span class="line">     method: &apos;post&apos;,</span><br><span class="line">     headers: &#123;</span><br><span class="line">         &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">     &#125;,</span><br><span class="line">     data: qs.stringify(data)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><ul><li><p>表现：<br>常见的 POST 数据提交的方式。通常文件上传时，必须让 form 的 enctype 等于这个值。<br>请求头如下：<br>生成了一个 boundary 用于分割不同的字段，<br>然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，<br>消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着是内容描述信息，<br>最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。<br>前台数据的格式：<br><img src="/images/web/website/form-data1.png" alt="目录"><br>提交数据时传给后台的格式如下：<br><img src="/images/web/website/form-data.png" alt="目录"></p></li><li><p>使用：一般用来上传文件，指定传输数据为二进制数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let data = new FormData();</span><br><span class="line">data.append(&apos;file&apos;, fileObj);</span><br><span class="line">data.append(&apos;username&apos;, &apos;admin&apos;);</span><br><span class="line">data.append(&apos;password&apos;, &apos;123456&apos;);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    url: &apos;/XXXX/XXXX&apos;,</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &apos;Content-Type&apos;: &apos;multipart/form-data&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h3><ul><li><p>表现：<br>消息主体是序列化后的 JSON 字符串，可以方便的提交复杂的结构化数据<br>前台数据的格式：<br><img src="/images/web/website/json1.png" alt="目录"><br>提交数据时传给后台的格式如下：<br><img src="/images/web/website/json.png" alt="目录"></p></li><li><p>使用：application/json是Axios默认的Content-Type。它声明了请求体中的数据将会以json字符串的形式发送到后端。<br>在请求的时候，需要将需要传给后台的数据JSON序列化即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url: &apos;/XXXX/XXXX&apos;,</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    //axios默认Content-Type是json,这段可不写</span><br><span class="line">    //headers: &#123;</span><br><span class="line">       // &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">    //&#125;,</span><br><span class="line">    data: JSON.stringify(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="封装使用"><a href="#封装使用" class="headerlink" title="封装使用"></a>封装使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 修改响应数据</span><br><span class="line">axios.defaults.transformRequest = [function (data, headers) &#123;</span><br><span class="line">  // 添加 Authorization 头信息</span><br><span class="line">  // console.log(data)</span><br><span class="line"></span><br><span class="line">  //Object.assign(headers, &#123; &apos;token&apos;: window.localStorage.getItem(&apos;token&apos;) &#125;)</span><br><span class="line"></span><br><span class="line">  if (data === undefined) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  //FormData 格式（文件上传）</span><br><span class="line">  if (data instanceof FormData) &#123;</span><br><span class="line">    headers[&apos;Content-Type&apos;] = &apos;multipart/form-data;charset=UTF-8&apos;</span><br><span class="line">    return data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //emulateJSON自定义参数，没有配置时为json(默认)</span><br><span class="line">  if (!data.emulateJSON) &#123; </span><br><span class="line">    headers[&apos;Content-Type&apos;] = &apos;application/json;charset=UTF-8&apos;</span><br><span class="line">    for (let v in data) &#123;</span><br><span class="line">      data[v] == null ? data[v] = &apos;&apos; : data[v]</span><br><span class="line">    &#125;</span><br><span class="line">    return JSON.stringify(data)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    delete data.emulateJSON</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //emulateJSON为true时，则为表单格式（使用URLSearchParams把参数转化成key1=val1&amp;key2=val2的形式）</span><br><span class="line">  // 处理请求体编码</span><br><span class="line">  headers[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;</span><br><span class="line"></span><br><span class="line">  let params = new URLSearchParams()</span><br><span class="line">  Object.keys(data).forEach(function (key) &#123;</span><br><span class="line">    if (Object.prototype.toString.call(data[key]) === &apos;[object Object]&apos;) &#123;</span><br><span class="line">      for (let [k, v] of Object.entries(data[key])) &#123;</span><br><span class="line">        params.append(`$&#123;key&#125;[$&#123;k&#125;]`, v)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (Array.isArray(data[key])) &#123;</span><br><span class="line">      // 传arr时</span><br><span class="line">      for (let v of data[key]) &#123;</span><br><span class="line">        params.append(key, v)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      params.append(key, data[key] == null ? &apos; &apos; : data[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return params.toString()</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>参考：<a href="http://www.axios-js.com/zh-cn/docs/#axios-patch-url-data-config-1" target="_blank" rel="noopener">axios中文文档|axios中文网</a> , <a href="https://www.jianshu.com/p/ba40da728806" target="_blank" rel="noopener">Content-type的几种常见类型</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> content-type </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>慎独</title>
      <link href="/2020/09/13/index/"/>
      <url>/2020/09/13/index/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>行到水穷处，坐看云起时</p></blockquote><p><img src="/images/life/daily/life.jpg" alt="出门"><a id="more"></a></p><p>所谓诚其意者，毋自欺也。如恶恶臭，如好好色，此之谓自谦。故君子必慎其独也。</p><p>小人闲居为不善，无所不至，见君子而后厌然。掩其不善，而著其善。人之视己，如见其肺肝然，则何益矣。此谓诚于中，形于外。故君子必慎独也。</p><p>曾子曰，“十目所视，十手所指，其严乎。” 富润屋，德润身，心广体胖，故君子必诚其意。</p><p>诗云：“瞻彼淇奥，菉竹漪漪，有斐君子，如切如磋，如琢如磨，瑟兮僴兮，赫兮咺兮，有斐君子，终不可喧兮，如切如磋，道学也，如琢如磨者，自修也，瑟兮僴兮者，恂栗也，赫兮咺兮者，威仪也，有斐君子，终不可喧兮者，道圣德至善，民之不能忘也。            </p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue项目配置框架</title>
      <link href="/2020/08/26/vue-config/"/>
      <url>/2020/08/26/vue-config/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>有时候vue单页面项目配置不满足开发需求，需要进行多页面项目配置，多端单页面和多端多页面的项目配置，本文详细介绍了单页，多页面，多端多页等项目配置的方法。</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h2 id="配置项目的前期准备"><a href="#配置项目的前期准备" class="headerlink" title="配置项目的前期准备"></a>配置项目的前期准备</h2><h3 id="知识要点储备"><a href="#知识要点储备" class="headerlink" title="知识要点储备"></a>知识要点储备</h3><p>vue项目的配置主要涉及到node,vue-cli和webpack，建议先阅读一下下面官方的配置文档</p><ul><li><a href="http://nodejs.cn/api/process.html#process_process_env" target="_blank" rel="noopener">node的process模块和fs模块</a></li><li><a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">vue-cli的webpack配置参考</a></li><li><a href="https://webpack.docschina.org/configuration/dev-server/#devserverindex" target="_blank" rel="noopener">webpack配置</a></li></ul><h3 id="配置参数publicPath"><a href="#配置参数publicPath" class="headerlink" title="配置参数publicPath"></a>配置参数publicPath</h3><p>1.publicPath参数：表示布置应用包时的基本url，详情请查阅<a href="https://cli.vuejs.org/zh/config/#publicpath" target="_blank" rel="noopener">publicpath的官方介绍</a><br>这个参数主要出现在两个地方：</p><ul><li>output：资源输出配置项，影响打包资源生成的路径，用于生产环境。设置了该项配置将会为资源添加一个前缀</li><li>devServer：静态资源服务配置项，即生成的静态文件所在的位置，影响资源在本地开发环境的访问，用于开发环境。</li></ul><p>在output里面设置了publicPath以后，若是devServer里面没有设置publicPath，则使用webpack-dev-server 在进行打包时生成的静态文件所在的位置以及引用资源的前缀都是output.publicPath里面设置的值。</p><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">* publicPath设置为空字符串 (‘’) 或是相对路径 (‘./‘)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径</div><p>2.举例：在vue.config.js配置文件设置</p><p>eg1:推荐写法，生产环境配置为相对路径’’,开发环境时devServer和output的publicPath设置为/。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === &apos;production&apos; ? &apos;&apos; : &apos;/&apos;, </span><br><span class="line">    devServer:&#123;</span><br><span class="line">        //不设置时取外面output的publicPath</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包之后的路径可放置任意路径。打包后的文件前缀如下<br><img src="/images/vue/config3.png" alt="目录"><br>在本地环境生成的静态文件所在的位置/，即静态文件都存放在当前域名下<br><img src="/images/vue/config4.png" alt="目录"></p><p>eg2:在本地环境里和html里引入的静态资源都是同一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath:  &apos;/gov/&apos;,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        //不设置时取外面output的publicPath</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/vue/config.png" alt="目录"></p><p>eg3:在本地环境里和html里引入的静态资源不同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: &apos;/outputdist/&apos;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        publicPath: &apos;/dist/&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/vue/config1.png" alt="目录"><br>如此在本地环境/dist/里（访问localhost:9001/dist），会导致html里带有/outputdist/前缀的文件都找不到<br><img src="/images/vue/config2.png" alt="目录"></p><p>参考详解：<br>webpack中的publicPath的用法:<a href="https://juejin.im/post/6844903686632636423" target="_blank" rel="noopener">webpack中的publicPath的用法</a><br>webpack配置文件中publicPath和contentBase:<a href="https://blog.csdn.net/wang839305939/article/details/85855967" target="_blank" rel="noopener">webpack配置文件中publicPath和contentBase</a></p><h3 id="static和assets"><a href="#static和assets" class="headerlink" title="static和assets"></a>static和assets</h3><p>1.static中的文件是不会经过webpack编译的，一般建议存放一些外部第三方（公用）的静态资源文件。<br>2.assets因为会经过webpack编译，建议是存放一些只有组件自己使用到的静态资源。</p><p>详解参考:<a href="http://vuejs-templates.github.io/webpack/static.html" target="_blank" rel="noopener">Static Assets</a></p><h3 id="pages和chunks参数"><a href="#pages和chunks参数" class="headerlink" title="pages和chunks参数"></a>pages和chunks参数</h3><p>1.pages参数，多页面应用配置。详情请参考<a href="https://cli.vuejs.org/zh/config/#pages" target="_blank" rel="noopener">pages的官方介绍</a><br>其值应该是一个对象，对象的 key 是入口的名字，对应的value值有两种情况：</p><ul><li>一个指定了 entry, template, filename, title 和 chunks 的对象</li><li>一个指定其 entry 的字符串</li></ul><p>2.pages的chunks参数</p><ul><li>在vue-cli3中vue.config.js中的pages参数是会编译到webpack的插件html-webpack-plugin的配置中。即pages.chunks就是插件html-webpack-plugin对应的pages.chunks参数。</li><li>插件html-webpack-plugin,会自动帮你生成一个html文件并引用相关的assets文件<br>插件html-webpack-plugin的几个参数：<ul><li>title:生成文件的标题</li><li>filename:生成html文件的文件名</li><li>template:模板文件，生成的html文件是根据这个特定的模板文件生成的</li><li>minify:对html文件压缩</li><li>hash:给生成的js文件独特的hash值</li><li>favicon:给文件生成favicon（路径）</li><li>entry:入口文件</li><li>chunks:针对多入口文件，当你有多个入口时，对应会生成多个编译后的js文件,chunks选项可以决定是否都使用这些生成的js文件。<br><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">* chunks默认会在生成的html文件中引用所有的js文件，当然你可以指定引入哪些特定的文件。例如：有两个入口文件，生成了两个js文件，如果不指定对应的chunks，则每个生成的html文件中会都引入这两个js文件</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">eg:在下文中的多页面配置中设置了如下这种pages配置：</span><br><span class="line">对应的文件引入对应的js和chunk-vendors，chunk-common。</span><br><span class="line">function getPages () &#123;</span><br><span class="line">  let obj = &#123;&#125;</span><br><span class="line">  let &#123; html: &#123; filename: template &#125;, js: &#123; filename: entry &#125; &#125; = getCreateConfig(process.env.selfDirName)</span><br><span class="line">  Object.entries(fileName).forEach(([k, v]) =&gt; &#123;</span><br><span class="line">      obj[k] = &#123;</span><br><span class="line">      entry: entry.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      template: template.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      filename: isProd ? `$&#123;k&#125;.html` : `$&#123;process.env.selfDirName&#125;/$&#123;k&#125;.html`, // process.env.NODE_ENV === &apos;production&apos; ?`$&#123;v&#125;.html`:`$&#123;process.env.selfDirName&#125;/$&#123;v&#125;.html`,</span><br><span class="line">      title: &apos;&apos;,</span><br><span class="line">      favicon: path.join(__dirname, &apos;./public/favicon.ico&apos;),</span><br><span class="line">      chunks: [&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, `$&#123;k&#125;`]</span><br><span class="line">      // multihtmlCache: true</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return obj</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>3.参考:<br>pages.chunks的参数的意义:<a href="https://segmentfault.com/q/1010000016925412/a-1020000016946034" target="_blank" rel="noopener">pages.chunks的参数的意义-Hello_World20的回答</a><br>html-webpack-plugin用法全解:<a href="https://segmentfault.com/a/1190000007294861#articleHeader9" target="_blank" rel="noopener">html-webpack-plugin用法全解</a></p><h2 id="单页面配置"><a href="#单页面配置" class="headerlink" title="单页面配置"></a>单页面配置</h2><p>顾名思义，单页面配置就是我们新建项目时默认建的项目配置，整个项目只有一个页面组成，通过vue-router进行路由配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist&apos;,// 打包时生成的生产环境构建文件的目录</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: &apos;9001&apos;,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//把当前项目的根目录的static备份到打包目录的static目录下面</span><br><span class="line">      config</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: path.resolve(__dirname, &apos;./dist/static&apos;)</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包后生成的dist目录如下：<br>/static的文件和处理后的js和css等被打包到/dist/static<br><img src="/images/vue/config5.png" alt="目录"><br>查看完整代码的地址:<a href="https://github.com/chenjing123456/single-page" target="_blank" rel="noopener">https://github.com/chenjing123456/single-page</a></p><h2 id="多页面配置"><a href="#多页面配置" class="headerlink" title="多页面配置"></a>多页面配置</h2><p>多页面配置中最重要的和单页面不一样的配置就是pages参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist&apos;,// 打包时生成的生产环境构建文件的目录</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  pages:&#123;</span><br><span class="line">    index:&#123;</span><br><span class="line">      entry: path.join(__dirname, `./src/views/index/index.js`),</span><br><span class="line">      template: path.join(__dirname, &apos;./src/views/index/index.html&apos;),</span><br><span class="line">      chunks:[&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, &apos;index&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    login:&#123;</span><br><span class="line">      entry: path.join(__dirname, `./src/views/login/login.js`),</span><br><span class="line">      template: path.join(__dirname, &apos;./src/views/login/index.html&apos;),</span><br><span class="line">      chunks:[&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, &apos;login&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: &apos;9001&apos;,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//把当前项目的根目录的static备份到打包目录的static目录下面</span><br><span class="line">      config</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: path.resolve(__dirname, &apos;./dist/static&apos;)</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果页面很多可以把pages参数单独提出来<br>查看完整代码的地址:<a href="https://github.com/chenjing123456/single-pages" target="_blank" rel="noopener">https://github.com/chenjing123456/single-pages</a></p><h2 id="多端单页面配置"><a href="#多端单页面配置" class="headerlink" title="多端单页面配置"></a>多端单页面配置</h2><p>1.前提：不管是多端单页还是多端多页，获取文件的方式都是一致的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fileName文件对应是文件入口的列表，getPages方法获取的是全部页面的配置，</span><br><span class="line">function getPages () &#123;</span><br><span class="line">  let obj = &#123;&#125;</span><br><span class="line">  let &#123; html: &#123; filename: template &#125;, js: &#123; filename: entry &#125; &#125; = getCreateConfig(process.env.selfDirName)</span><br><span class="line">  Object.entries(fileName).forEach(([k, v]) =&gt; &#123;</span><br><span class="line">    obj[k] = &#123;</span><br><span class="line">      entry: entry.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      template: template.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      filename: isProd ? `$&#123;k&#125;.html` : `$&#123;process.env.selfDirName&#125;/$&#123;k&#125;.html`, // process.env.NODE_ENV === &apos;production&apos; ?`$&#123;v&#125;.html`:`$&#123;process.env.selfDirName&#125;/$&#123;v&#125;.html`,</span><br><span class="line">      title: &apos;&apos;,</span><br><span class="line">      favicon: path.join(__dirname, &apos;./public/favicon.ico&apos;),</span><br><span class="line">      chunks: [&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, `$&#123;k&#125;`]</span><br><span class="line">      // multihtmlCache: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return obj</span><br><span class="line">&#125;</span><br><span class="line">let pages = getPages()</span><br></pre></td></tr></table></figure></p><p>2.多端多页配置跟多端单页配置中的区别</p><ul><li>配置pages如下：若是多端多页则pages拿到全部页面，多端单页pages拿到的是当前环境的页面</li><li>多端单页在创建文件时在create.js是用的是createProj()，而多端单页createProj(pathname)。<div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">多端单页是默认创建了fielName文件中所有的页面文件，而多端指定了一个pathname，指定你需要创建文件的端，再匹配当前端（即fileName[pathname]）里所有的页面文件</div></li></ul><p>3.多页面项目配置，遵循一个页面一个端原则创建文件夹和文件，创建文件的规则写在配置文件夹config里。</p><ul><li>在config/fileName文件 新增一个文件名(相当于新建一个页面文件)</li><li>在根目录创建进程文件，规定当前进程对象(eg:.env.gov .env.govDev)</li><li>在package.json 文件创建script脚本命令，包括启动命令和打包命令 (eg:”vue-cli-service serve –open –mode govDev)</li><li>在config/template创建模板文件</li><li>运行npm run create 或者node ./create/index.js，新建的文件夹和文件即生成</li></ul><p>文件夹config内部是通过fileName指定文件夹和文件名，然后自动生成文件夹以及文件的配置<br>vue.config.js文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === &apos;production&apos; ? &apos;&apos; : &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist/&apos; + process.env.selfDirName, // + process.env.selfDirName,</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  pages:&#123;[process.env.selfDirName]:pages[process.env.selfDirName]&#125;, // 当前运行环境的入口文件的配置，只打包运行当前环境的页面（仅有一个页面）</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, process.env.selfDirName),</span><br><span class="line">    port: process.env.port,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//生产环境把当前项目的根目录的static备份到dist/static目录下面</span><br><span class="line">      let staticPath = &apos;&apos;</span><br><span class="line">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</span><br><span class="line">      config.devtool = &apos;eval-source-map&apos;</span><br><span class="line">      staticPath = path.resolve(__dirname, `./dist/` + `static`)</span><br><span class="line">      // staticPath = path.resolve(__dirname, `./dist/` + process.env.selfDirName + `/static`)</span><br><span class="line">      // config.plugins = [...config.plugins,new BundleAnalyzerPlugin()]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      staticPath = &apos;static&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config</span><br><span class="line">    // .plugin(&apos;harddisk&apos;)</span><br><span class="line">    // .use(HtmlWebpackHarddiskPlugin).end()</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: staticPath</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看完整代码的地址:<a href="https://github.com/chenjing123456/muli-page" target="_blank" rel="noopener">https://github.com/chenjing123456/muli-page</a></p><h2 id="多端多页面配置"><a href="#多端多页面配置" class="headerlink" title="多端多页面配置"></a>多端多页面配置</h2><p>多页面项目配置，遵循一个端多个页面原则创建文件夹和文件，创建文件的规则写在配置文件夹config里。</p><ul><li>在config/fileName文件 新增端和文件名</li><li>在根目录创建进程文件，规定当前进程对象(eg:.env.gov .env.govDev)</li><li>在package.json 文件创建script脚本命令，包括启动命令和打包命令 (eg:”vue-cli-service serve –open –mode govDev)</li><li>在config/template创建模板文件</li><li>运行npm run new gov ，或者可以node createGov.js 创建某个端的多页面文件</li></ul><p>文件夹config内部是通过fileName指定文件夹和文件名，然后自动生成文件夹以及文件的配置<br>vue.config.js文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === &apos;production&apos; ? &apos;&apos; : &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist/&apos; + process.env.selfDirName, // + process.env.selfDirName,</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  pages, //所有页面的配置</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, process.env.selfDirName),</span><br><span class="line">    port: process.env.port,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//生产环境把当前项目的根目录的static备份到dist/static目录下面</span><br><span class="line">      let staticPath = &apos;&apos;</span><br><span class="line">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</span><br><span class="line">      config.devtool = &apos;eval-source-map&apos;</span><br><span class="line">      staticPath = path.resolve(__dirname, `./dist/` + `static`)</span><br><span class="line">      // staticPath = path.resolve(__dirname, `./dist/` + process.env.selfDirName + `/static`)</span><br><span class="line">      // config.plugins = [...config.plugins,new BundleAnalyzerPlugin()]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      staticPath = &apos;static&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config</span><br><span class="line">    // .plugin(&apos;harddisk&apos;)</span><br><span class="line">    // .use(HtmlWebpackHarddiskPlugin).end()</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: staticPath</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看完整代码的地址:<a href="https://github.com/chenjing123456/muli-pages" target="_blank" rel="noopener">https://github.com/chenjing123456/muli-pages</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-cli </tag>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单位适配</title>
      <link href="/2020/08/15/rem/"/>
      <url>/2020/08/15/rem/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>介绍rem，vw适配单位以及在项目中常用到的rem适配方法</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h1 id="px、em、rem的区别"><a href="#px、em、rem的区别" class="headerlink" title="px、em、rem的区别"></a>px、em、rem的区别</h1><ul><li>px是固定长度单位，不随其它元素的变化而变化</li><li>em单位的名称为相对长度单位，相对于父级元素的单位，会随父级元素的属性（font-size或其它属性）变化而变化</li><li><p>rem是css3新增的一个相对长度单位，相对于根目录（HTML元素）的，它会随HTML元素的属性（font-size）变化而变化，一般用于自适应布局</p><p>px用的比较广泛一些，可以充当更多属性的单位，而em和rem是字体大小的单位，用于充当font-size属性的单位</p><!-- <div style="color: #909399;background-color: #f4f4f5;padding:4px 10px;border-radius:4px"></div> --><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">一般来说，浏览器默认是：1em = 1rem = 16 px</div></li></ul><h1 id="视口单位-Viewport-units-：vw、vh、vmin、vmax"><a href="#视口单位-Viewport-units-：vw、vh、vmin、vmax" class="headerlink" title="视口单位(Viewport units) ：vw、vh、vmin、vmax"></a>视口单位(Viewport units) ：vw、vh、vmin、vmax</h1><ol><li><p>视口：在桌面端，视口指的是在桌面端，指的是浏览器的可视区域；而在移动端，它涉及3个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。<br>视口单位中的“视口”，桌面端指的是浏览器的可视区域；移动端指的就是Viewport中的Layout Viewport, “视区”所指为浏览器内部的可视区域大小，即window.innerWidth/window.innerHeight大小，不包含任务栏标题栏以及底部工具栏的浏览器区域大小。</p></li><li><p>视口单位主要包括以下4个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vw: 视窗宽度的百分比（1vw 代表视窗的宽度为 1%）</span><br><span class="line">vh：视窗高度的百分比</span><br><span class="line">vmin：当前 vw 和 vh 中较小的一个值</span><br><span class="line">vmax：当前 vw 和 vh 中较大的一个值</span><br></pre></td></tr></table></figure><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">vh and vw：相对于视口的高度和宽度，而不是父元素的（CSS百分比是相对于包含它的最近的父元素的高度和宽度）。1vh 等于1/100的视口高度，1vw 等于1/100的视口宽度。<br>比如：浏览器高度950px，宽度为1920px, 1 vh = 950px/100 = 9.5 px，1vw = 1920px/100 =19.2 px。<br></div><br><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">vmax相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax。<br>vmin相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin。<br>比如：如果宽度设置为800px，高度设置为1080px，1vmin将会等于8px，而1vmax将会是10.8px。<br></div></li><li><p>vw、vh 与 % 百分比的区别<br>% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。<br>vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的。</p></li><li><p>vmin、vmax 用处<br>做移动开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。<br>但是由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。</p></li><li><p>浏览器兼容<br><a href="https://caniuse.com/#feat=viewport-units" target="_blank" rel="noopener">Viewport units: vmin, vmax “兼容列表</a></p></li></ol><h1 id="使用rem适配"><a href="#使用rem适配" class="headerlink" title="使用rem适配"></a>使用rem适配</h1><ul><li><p>pc端，通常使用百分比，flex布局，但是遇到大屏或者需要适配的项目使用rem</p><p> 项目新建文件rem.js:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// 设置 rem 函数，屏幕适配</span><br><span class="line">function setRem() &#123;</span><br><span class="line">  // 320 1rem默认大小16px(1rem = 16px); 320px = 20rem;每个元素px基础上/16</span><br><span class="line">  let htmlWidth = document.documentElement.clientWidth || document.body.clientWidth</span><br><span class="line">  // console.log(htmlWidth);</span><br><span class="line">  // 得到html的Dom元素</span><br><span class="line">  let htmlDom = document.getElementsByTagName(&apos;html&apos;)[0]</span><br><span class="line">  // 设置根元素字体大小 1920表示基准值，就ui设计的尺寸</span><br><span class="line">  htmlDom.style.fontSize = ((100) / (1920 / htmlWidth)) + &apos;px&apos;</span><br><span class="line">&#125;</span><br><span class="line">function screen() &#123;//解决屏幕适配缩放问题</span><br><span class="line">    let width = $(window).width();</span><br><span class="line">    let height = document.body.offsetHeight;</span><br><span class="line">    let scaleX;</span><br><span class="line">    if (height &gt; 1080) &#123;</span><br><span class="line">        scaleX = width / 1915;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        scaleX = width / 1920;</span><br><span class="line">    &#125;</span><br><span class="line">    let scaleFunc = &quot;scale(&quot; + scaleX + &quot;)&quot;;</span><br><span class="line">    $(&apos;body&apos;).css(&#123;</span><br><span class="line">        &quot;transform&quot;: scaleFunc, //缩放比例</span><br><span class="line">        &quot;transform-origin&quot;: &quot;left top&quot;, //缩放基点</span><br><span class="line">        &quot;-ms-transform&quot;: scaleFunc, /* IE 9 */</span><br><span class="line">        &quot;-ms-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;-moz-transform&quot;: scaleFunc, /* Firefox */</span><br><span class="line">        &quot;-moz-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;-webkit-transform&quot;: scaleFunc, /* Safari 和 Chrome */</span><br><span class="line">        &quot;-webkit-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;-o-transform&quot;: scaleFunc, /* Opera */</span><br><span class="line">        &quot;-o-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    if (width &gt; 1920) &#123;</span><br><span class="line">        $(&apos;body&apos;).css(&#123;</span><br><span class="line">            &quot;backgroundAttachment&quot;: &quot;fixed&quot;,</span><br><span class="line">            &quot;backgroundSize&quot;: &quot;100% 100%&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">setRem()</span><br><span class="line">if ($(window).width() &gt; 1920 &amp;&amp; $(window).height() &gt; 1080) &#123;</span><br><span class="line">  screen()</span><br><span class="line">&#125;</span><br><span class="line">// 改变窗口大小时重新设置 rem</span><br><span class="line">window.onresize = function() &#123;</span><br><span class="line">  setRem()</span><br><span class="line">  if ($(window).width() &gt; 1920 &amp;&amp; $(window).height() &gt; 1080) &#123;</span><br><span class="line">    screen()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移动端<br>将px转化为rem，适配移动端vant-UI等框架(postcss-pxtorem)<br>1.单页面项目：<br>安装lib-flexible,postcss-pxtorem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible --save</span><br><span class="line">npm install postcss-pxtorem -D 用于将单位转化为 rem</span><br></pre></td></tr></table></figure><p>在main.js中引入lib-flexible：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;lib-flexible/flexible&apos;</span><br></pre></td></tr></table></figure><p>通过meta标签，设置设备宽度以及缩放比例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure><p>配置postcss-pxtorem 在postcss.config.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;</span><br><span class="line">      overrideBrowserslist: [&apos;Android 4.1&apos;, &apos;iOS 7.1&apos;, &apos;Chrome &gt; 31&apos;, &apos;ff &gt; 31&apos;, &apos;ie &gt;= 8&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;postcss-pxtorem&apos;: &#123;</span><br><span class="line">      rootValue: 37.5,//vant-UI的官方根字体大小是37.5</span><br><span class="line">      unitPrecision: 5,</span><br><span class="line">      propList: [&apos;*&apos;, &apos;!font-size&apos;, &apos;!border&apos;],</span><br><span class="line">      propList: [&apos;*&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">rootValue这个配置项, 通常根据ui图尺寸来定这个值。假如ui图尺寸给的宽度是750，我们通常就会把rootValue设置为75，这样我们写样式时，可以直接按照ui图尺寸标注的宽高来1:1还原开发。</div><br><div style="color: #909399;background-color: #f4f4f5;padding:4px 10px;border-radius:4px">但是在此设为37.5，是为了引用vant、mint-ui等第三方UI框架，因为第三方框架没有兼容rem，用的是px单位，将rootValue的值设置为设计图宽度（这里为750px）75的一半，即可以1:1还原vant、mint-ui的组件，否则会样式会有变化，例如按钮会变小。</div><br><div style="color: #f56c6c;background-color: #fef0f0;padding:4px 10px;border-radius:4px">设置成了37.5后，我们在根据ui图设置样式时要将值改为设计图的一半。</div><br>2.多端项目（多页面）<br>在进程文件.env.h5Dev配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = &apos;development&apos;</span><br><span class="line">selfDirName = &apos;h5&apos;</span><br><span class="line">selfAdaption = true //用于配置postcss-pxtorem的对象</span><br><span class="line">port = 9532</span><br></pre></td></tr></table></figure><p>package.json文件 配置h5移动端的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script:&#123;</span><br><span class="line">  &quot;h5Dev&quot;: &quot;vue-cli-service serve --mode h5Dev&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue.config.js文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    sourceMap: !isProd,</span><br><span class="line">    loaderOptions: process.env.selfAdaption ? &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          // px转rem</span><br><span class="line">          require(&apos;postcss-pxtorem&apos;)(&#123;</span><br><span class="line">            rootValue: 37.5,</span><br><span class="line">            unitPrecision: 5,//允许REM单位增长的十进制数字。</span><br><span class="line">            propList: [&apos;*&apos;, &apos;!font-size&apos;, &apos;!border&apos;],//可以从px更改为rem的属性。</span><br><span class="line">            replace: !!isProd,//替换包含rems的规则，而不添加后备</span><br><span class="line">            selectorBlackList: [],//要忽略的选择器，保留为px</span><br><span class="line">            minPixelValue: 12 //设置要替换的最小像素值。</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; : &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考配置：<a href="https://www.jianshu.com/p/220a186cc033" target="_blank" rel="noopener">vue:将px转化为rem，适配移动端vant-UI等框架(postcss-pxtorem)</a></p></li></ul><h1 id="使用vw实现移动端适配"><a href="#使用vw实现移动端适配" class="headerlink" title="使用vw实现移动端适配"></a>使用vw实现移动端适配</h1><ul><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S </span><br><span class="line"></span><br><span class="line">cssnano主要用来压缩和清理CSS代码,在cssnano的配置中，使用了preset: &quot;advanced&quot;，所以我们需要另外安装：</span><br><span class="line">npm i cssnano-preset-advanced --save-dev</span><br></pre></td></tr></table></figure></li><li><p>对新安装的PostCSS插件进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    &quot;plugins&quot;: &#123;</span><br><span class="line">        &quot;postcss-import&quot;: &#123;&#125;,</span><br><span class="line">        &quot;postcss-url&quot;: &#123;&#125;,</span><br><span class="line">        &quot;postcss-aspect-ratio-mini&quot;: &#123;&#125;, 主要用来处理元素容器宽高比</span><br><span class="line">        &quot;postcss-write-svg&quot;: &#123;//主要用来处理移动端1px的解决方案</span><br><span class="line">            utf8: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;postcss-cssnext&quot;: &#123;&#125;,//该插件可以让我们使用CSS未来的特性，其会对这些特性做相关的兼容性处理</span><br><span class="line">        &quot;postcss-px-to-viewport&quot;: &#123;//主要用来把px单位转换为vw、vh、vmin或者vmax这样的视窗单位</span><br><span class="line">            viewportWidth: 750,      // 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span><br><span class="line">            viewportHeight: 1334,    // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line">            unitPrecision: 3,       // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span><br><span class="line">            viewportUnit: &apos;vw&apos;,     // 指定需要转换成的视窗单位，建议使用vw</span><br><span class="line">            selectorBlackList: [&apos;.ignore&apos;, &apos;.hairlines&apos;],  // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">            minPixelValue: 1,       // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值.</span><br><span class="line">            mediaQuery: false       // 允许在媒体查询中转换`px`</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;postcss-viewport-units&quot;:&#123;&#125;,</span><br><span class="line">        &quot;cssnano&quot;: &#123;//用来压缩和清理CSS代码</span><br><span class="line">            preset: &quot;advanced&quot;,</span><br><span class="line">            autoprefixer: false,</span><br><span class="line">            &quot;postcss-zindex&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件的详细配置内容解析查看:<a href="https://www.jianshu.com/p/1f1b23f8348f" target="_blank" rel="noopener">如何在Vue项目中使用vw实现移动端适配</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rem </tag>
            
            <tag> vw </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FastClick使用</title>
      <link href="/2020/08/03/fastclick/"/>
      <url>/2020/08/03/fastclick/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>了解FastClick使用</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>在移动端H5开发过程中，关于点触可能会遇到如下两个问题：</p><ul><li>手动点击与真正触发click事件会存在 300ms 的延迟</li><li>点击穿透问题（点击行为会穿透元素触发非父子关系元素的事件）</li></ul><p>延迟是因为浏览器想知道你是否在进行双击操作；而点击穿透是因为 300ms 延迟触发时的副作用。<br>为了能够立即响应用户的点击事件，才有了FastClick。</p><h2 id="FastClick的使用"><a href="#FastClick的使用" class="headerlink" title="FastClick的使用"></a>FastClick的使用</h2><p>1.安装 npm install fastclick</p><p>2.初始化FastClick实例：<br>在main.js中引入并绑定到body<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import FastClick from &apos;fastclick&apos;</span><br><span class="line">//初始化FastClick实例。在页面的DOM文档加载完成后</span><br><span class="line">FastClick.attach(document.body)</span><br></pre></td></tr></table></figure></p><p>3.使用needsclick过滤特定的元素<br>如果页面上有一些特定的元素不需要使用fastclick来立刻触发点击事件，可以在元素的class上添加needsclick:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;needsclick&quot;&gt;Ignored by FastClick&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>4.不需要使用fastclick的情况</p><ul><li>对PC浏览器不需要FastClick</li><li>Android版Chrome 32+浏览器，如果设置viewport meta的值为width=device-width，这时浏览器会马上发点击事件，不会延迟。</li><li>所有版本的Android Chrome浏览器，如果设置viewport meta的值有user-scalable=no（屏幕不可缩放，双击缩放事件不需要，就不会有300ms的延迟），浏览器会马上发点击事件。</li><li>IE11+浏览器设置了css的属性touch-action: manipulation，它会在某些标签（a，button等）禁止双击事件，IE10的为-ms-touch-action: manipulation</li></ul><p>5.使用过程中存在的bug：</p><p>问题1：当使用FastClick 时，input框在ios上点击输入调取手机自带输入键盘不灵敏，有时候甚至点不出来。而安卓上完全没问题。这个原因是因为FastClick的点击穿透。<br>解决方法：<a href="https://www.jianshu.com/p/0df7a6f48c8a" target="_blank" rel="noopener">vue项目中使用fastclick时ios input点击不灵敏</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 添加Fastclick移除移动端点击延迟</span><br><span class="line">import FastClick from &apos;fastclick&apos;</span><br><span class="line">//FastClick的ios点击穿透解决方案</span><br><span class="line">FastClick.prototype.focus = function (targetElement) &#123;</span><br><span class="line">  var length;</span><br><span class="line"></span><br><span class="line">  var deviceIsWindowsPhone = navigator.userAgent.indexOf(&quot;Windows Phone&quot;) &gt;= 0;</span><br><span class="line">  var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) &amp;&amp; !deviceIsWindowsPhone;  </span><br><span class="line">    //兼容处理:在iOS7中，有一些元素（如date、datetime、month等）在setSelectionRange会出现TypeError    </span><br><span class="line">    //这是因为这些元素并没有selectionStart和selectionEnd的整型数字属性，所以一旦引用就会报错，因此排除这些属性才使用setSelectionRange方法</span><br><span class="line">  if ( deviceIsIOS &amp;&amp; targetElement.setSelectionRange &amp;&amp; targetElement.type.indexOf(&apos;date&apos;) !== 0 &amp;&amp; targetElement.type !== &apos;time&apos; &amp;&amp; targetElement.type !== &apos;month&apos; &amp;&amp; targetElement.type !== &apos;email&apos;) &#123; </span><br><span class="line">    length = targetElement.value.length; </span><br><span class="line">    targetElement.setSelectionRange(length, length);//修复bug ios 11.3不弹出键盘，这里加上聚焦代码，让其强制聚焦弹出键盘    </span><br><span class="line">    targetElement.focus(); </span><br><span class="line">  &#125; else &#123; </span><br><span class="line">    targetElement.focus(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">FastClick.attach(document.body)</span><br></pre></td></tr></table></figure><p>问题2：ios 软键盘关闭后 页面不会回弹<br>解决方法：<a href="https://segmentfault.com/a/1190000018028182?utm_source=tag-newest" target="_blank" rel="noopener">解决IOS中input失焦后，页面上移，点击不了问题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br><span class="line">var flag;</span><br><span class="line">var timer;</span><br><span class="line">var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);</span><br><span class="line">if (isIOS) &#123;</span><br><span class="line">document.body.addEventListener(&apos;focusin&apos;, () =&gt; &#123;  //软键盘弹起事件</span><br><span class="line">    flag = true;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">&#125;)</span><br><span class="line">document.body.addEventListener(&apos;focusout&apos;, () =&gt; &#123; //软键盘关闭事件</span><br><span class="line">    flag = false;</span><br><span class="line">    if (!flag) &#123;</span><br><span class="line">    timer = setTimeout( ()=&gt; &#123;</span><br><span class="line">        window.scrollTo(&#123; top: 0, left: 0, behavior: &quot;smooth&quot; &#125;)//重点  =======当键盘收起的时候让页面回到原始位置(这里的top可以根据你们个人的需求改变，并不一定要回到页面顶部)</span><br><span class="line">    &#125;, 200);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击穿透现象"><a href="#点击穿透现象" class="headerlink" title="点击穿透现象"></a>点击穿透现象</h2><p>例如页面上有A和B元素，B在A上面。在B元素的touchstart事件上注册了一个回调函数，该回调函数的作用是隐藏B元素。我们发现，当我们点击B元素，B元素被隐藏了，随后，A元素触发了click事件。<br>移动端上面，事件执行顺序是：touchstart &gt; touchend &gt; click。而 click 事件有300ms延迟，浏览器触发了click事件，但是此时B元素不见了，所以该事件被派发到了A元素身上。如果A元素是一个链接，那此时页面就会意外地跳转。</p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript </tag>
            
            <tag> FastClick </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>收集web项目常见的库和网站</title>
      <link href="/2020/07/12/website/"/>
      <url>/2020/07/12/website/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>介绍一些我在项目中遇到的常用的库，工具和网站</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h1 id="前端开发常用"><a href="#前端开发常用" class="headerlink" title="前端开发常用"></a>前端开发常用</h1><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>开箱即用的跨浏览器 CSS 动画效果<a href="https://animate.style/" target="_blank" rel="noopener">Animate.css</a></li><li>按需定制 CSS 动画效果<a href="https://animista.net/" target="_blank" rel="noopener">animista</a></li><li>CSS 动画效果收集，点击某个效果即可复制相应的代码片段至剪贴板<a href="https://emilkowalski.github.io/css-effects-snippets/" target="_blank" rel="noopener">CSSeffectsSnippets</a></li><li>汇集了实现各种加载效果的 CSS 代码片段<a href="https://tobiasahlin.com/spinkit/" target="_blank" rel="noopener">SpinKit</a></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li>可供免费使用的图片<a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a></li><li>免费图片网站<a href="https://pixabay.com/" target="_blank" rel="noopener">pixabay</a></li><li>免费图片网站<a href="https://www.pexels.com/zh-cn/" target="_blank" rel="noopener">pexels</a></li><li>使用 CC0 许可的免费高分辨率图片和视频<a href="https://isorepublic.com/" target="_blank" rel="noopener">isorepublic</a></li><li>在线图片压缩工具<a href="https://imagecompressor.com/" target="_blank" rel="noopener">imagecompressor</a></li><li>在线图片缩放工具<a href="bulkresizephotos://bulkresizephotos.com/en" target="_blank" rel="noopener">unsplash</a></li></ul><h2 id="插画"><a href="#插画" class="headerlink" title="插画"></a>插画</h2><ul><li>持续更新的精美的插画集<a href="https://undraw.co/illustrations" target="_blank" rel="noopener">undraw</a></li><li>免费插画集<a href="https://www.manypixels.co/gallery/" target="_blank" rel="noopener">manypixels</a></li><li>通过调配渐变色、搭配手绘组件定制插画<a href="https://iradesign.io/gallery/illustrations" target="_blank" rel="noopener">iradesign</a></li><li>免费 SVG 插画<a href="https://lukaszadam.com/illustrations" target="_blank" rel="noopener">lukaszadam</a></li></ul><h2 id="动态效果库"><a href="#动态效果库" class="headerlink" title="动态效果库"></a>动态效果库</h2><ul><li><p>Typed.js<br> 地址：<a href="https://mattboldt.com/demos/typed-js/" target="_blank" rel="noopener">Typed-doc</a><br> 在你的页面上添加一个打字机效果。虽然用js很容易实现，但这个要更完善，有更多的自定义选项。</p></li><li><p>gallery.echarts<br> 地址：<a href="https://gallery.echartsjs.com/explore.html#sort=rank~timeframe=all~author=all" target="_blank" rel="noopener">gallery.echarts</a><br> echarts的示例库</p></li><li><p>vue-count-to<br> 地址：<a href="https://www.npmjs.com/package/vue-count-to" target="_blank" rel="noopener">vue-count-to-npm</a><br> vue数字滚动插件</p></li><li><p>vue-seamless-scroll<br> 地址：<a href="https://github.com/chenxuan0000/vue-seamless-scroll" target="_blank" rel="noopener">vue-seamless-scroll-gitbub</a><br> vue无缝滚动插件</p></li><li><p>vue-scorll<br> 地址：<a href="https://vuescrolljs.yvescoding.org/zh/" target="_blank" rel="noopener">vuescrolljs</a><br> 自定义滚动条插件</p></li></ul><h2 id="实用的图像特效库"><a href="#实用的图像特效库" class="headerlink" title="实用的图像特效库"></a>实用的图像特效库</h2><ul><li><p>imagehover / iHover<br> 地址：<a href="https://github.com/ciar4n/imagehover.css" target="_blank" rel="noopener">imagehover-github</a><br> imagehover.css- 纯CSS3鼠标滑过图片效果动画库，44种鼠标滑过效果<br> <img src="/images/web/website/imagehover.gif" alt="目录"></p></li><li><p>Magnifier.js<br> 地址：<a href="https://github.com/mark-rolich/Magnifier.js" target="_blank" rel="noopener">Magnifier-github</a><br> Magnifier 是一款实用纯js制作的图片放大镜插件。<br> <img src="/images/web/website/Magnifier.gif" alt="目录"></p></li><li><p>FollowCursor<br> 地址:<a href="https://github.com/bersLucas/FollowCursor" target="_blank" rel="noopener">FollowCursor-github</a><br> 图像的旋转跟随光标移动而变化。<br> <img src="/images/web/website/FollowCursor.gif" alt="目录"></p></li><li><p>参考：<a href="https://segmentfault.com/a/1190000023537704" target="_blank" rel="noopener">更多实用的图像特效库</a></p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><p>favicon<br> 地址:<a href="https://favicon.io/index.html" target="_blank" rel="noopener">instafavicon-website</a><br> 这个网站可以帮你快速生成一个站点图标</p></li><li><p>geojson网站<br> 用于获取geojson地图数据<br> 地址：<a href="http://datav.aliyun.com/tools/atlas/#&amp;lat=30.316551722910077&amp;lng=106.68898666525287&amp;zoom=3.5" target="_blank" rel="noopener">GEOJSON</a><br> <a href="https://blog.csdn.net/qq_36523214/article/details/106991850" target="_blank" rel="noopener">echarts获取省市区的json</a></p></li></ul><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><ul><li><p>刷题lintcode,leetcode<br> 地址：<br> <a href="https://www.lintcode.com/" target="_blank" rel="noopener">lintcode</a><br> <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">leetcode</a><br> <a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a></p></li><li><p>掘金<br> 地址:<a href="https://juejin.im/frontend" target="_blank" rel="noopener">juejin</a></p></li><li><p>css<br> 地址：<br> <a href="https://css-tricks.com/" target="_blank" rel="noopener">css-tricks</a><br> <a href="https://css-weekly.com/" target="_blank" rel="noopener">css-weekly</a></p></li><li><p>css形状<br> <a href="https://zhuanlan.zhihu.com/p/63253867" target="_blank" rel="noopener">45个CSS 形状</a></p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><p>发现中国<br> 地址:<a href="https://www.ageeye.cn/" target="_blank" rel="noopener">https://www.ageeye.cn/</a><br> 中国历史地图以及历史人物等组成的地图</p></li><li><p>全历史<br> 地址:<a href="https://www.allhistory.com/" target="_blank" rel="noopener">https://www.allhistory.com/</a><br> 中国历史古籍，人物等构成的图谱</p></li><li><p>中国古诗文网<br> 地址:<a href="https://www.gushiwen.cn/" target="_blank" rel="noopener">https://www.gushiwen.cn/</a></p></li><li><p>知妖（中国妖怪百集）<br> 地址:<a href="https://www.cbaigui.com/" target="_blank" rel="noopener">https://www.cbaigui.com/</a></p></li><li><p>书格<br> 地址:<a href="https://new.shuge.org/" target="_blank" rel="noopener">https://new.shuge.org/</a><br> 中国古籍资源</p></li><li><p>中华珍宝馆<br> 地址:<a href="http://www.ltfc.net/" target="_blank" rel="noopener">http://www.ltfc.net/</a><br> 中国古画资源</p></li></ul><h1 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h1><p><a href="https://juejin.im/post/6875943665597546510" target="_blank" rel="noopener">前端开发常用免费资源</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web项目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高德地图实战</title>
      <link href="/2020/06/20/Amap/"/>
      <url>/2020/06/20/Amap/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>数据可视化-高德地图</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a></p><h2 id="创建行政区域"><a href="#创建行政区域" class="headerlink" title="创建行政区域"></a>创建行政区域</h2><h3 id="1-创建背景地图"><a href="#1-创建背景地图" class="headerlink" title="1.创建背景地图"></a>1.创建背景地图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//初始化背景地图(创建的完整中国地图，作为某块区域地图的背景)</span><br><span class="line">export const mapInit = (id = &apos;index-overView&apos;, opts = &#123;&#125;,styleId=&apos;amap://styles/f147564119361754e6372bfbef57548a&apos;) =&gt; &#123;</span><br><span class="line">    map = new AMap.Map(id, Object.assign(&#123;</span><br><span class="line">        mapStyle: styleId,</span><br><span class="line">        zoom: 8,</span><br><span class="line">        center:[119.92388,36.251768],</span><br><span class="line">        pitch: 50,</span><br><span class="line">        viewMode: &apos;3D&apos;,</span><br><span class="line">        features: [&apos;bg&apos;, &apos;road&apos;],</span><br><span class="line">    &#125;, opts));</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-查询行政区并绘制"><a href="#2-查询行政区并绘制" class="headerlink" title="2.查询行政区并绘制"></a>2.查询行政区并绘制</h3><p>行政区查询服务文档：<a href="https://lbs.amap.com/api/javascript-api/reference/search#m_AMap.DistrictSearch" target="_blank" rel="noopener">AMap.DistrictSearch 行政区查询</a></p><p>由于行政区查询服务只能具体查询到区县及以上，所以绘制不同级别有不同对应方式：</p><ol><li><p>绘制区县的行政区域<br>eg:绘制出胶州市（县级市）的行政区域<br>涉及的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//渲染边界线</span><br><span class="line">export const renderPolyline = (bounds, &#123;</span><br><span class="line">    strokeColor,</span><br><span class="line">    strokeWeight</span><br><span class="line">&#125; = &#123;</span><br><span class="line">    strokeColor: &apos;#FFFEC43B&apos;,</span><br><span class="line">    strokeWeight: 4</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    console.log(bounds);</span><br><span class="line">    if (!bounds || (bounds &amp;&amp; bounds.length == 0)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    let arr = []</span><br><span class="line">    for (var i = 0, l = bounds.length; i &lt; l; i++) &#123;</span><br><span class="line">        let p = new AMap.Polyline(&#123;</span><br><span class="line">            path: bounds[i],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        arr.push(p)</span><br><span class="line">    &#125;</span><br><span class="line">    var overlayGroup = new AMap.OverlayGroup(arr);</span><br><span class="line">    overlayGroup.setOptions(&#123;</span><br><span class="line">        strokeColor: strokeColor,</span><br><span class="line">        strokeWeight: strokeWeight,</span><br><span class="line">    &#125;);</span><br><span class="line">    map.add(overlayGroup);</span><br><span class="line">    //添加高度面</span><br><span class="line">    var object3Dlayer = new AMap.Object3DLayer(&#123;zIndex:1&#125;);</span><br><span class="line">    map.add(object3Dlayer)</span><br><span class="line">    var height = 0;</span><br><span class="line">    var color = &apos;rgba(155, 90, 0, 0.08)&apos;;//rgba</span><br><span class="line">    var wall = new AMap.Object3D.Wall(&#123;</span><br><span class="line">        path:bounds,</span><br><span class="line">        height:height,</span><br><span class="line">        color:color,</span><br><span class="line">    &#125;);</span><br><span class="line">    wall.transparent = true</span><br><span class="line">    object3Dlayer.add(wall)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//创建行政查询对象</span><br><span class="line">const district = new AMap.DistrictSearch(&#123;</span><br><span class="line">    level: &apos;district&apos;,</span><br><span class="line">    showbiz: false,</span><br><span class="line">    extensions: &apos;all&apos;,</span><br><span class="line">    subdistrict: 1</span><br><span class="line">&#125;);</span><br><span class="line">//根据名字查询</span><br><span class="line">district.search(&apos;胶州市&apos;, function (status, result) &#123;</span><br><span class="line">  if (status == &quot;complete&quot;) &#123;</span><br><span class="line">      let &#123; adcode, center, districtList, level, name, boundaries &#125; = result.districtList[0];</span><br><span class="line">      let originalBounds = boundaries;//boundaries返回行政区的边界坐标集合，为经纬度的二维数组</span><br><span class="line">      let bounds = originalBounds.filter(v =&gt; v.length &gt; 300);</span><br><span class="line">      if (bounds) &#123;</span><br><span class="line">          renderPolyline(bounds, &#123;</span><br><span class="line">              strokeColor: &apos;blue&apos;,</span><br><span class="line">              strokeWeight: 4</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>图示：胶州市（县级市）<img src="/images/web/visable/jz1.png" alt="目录"></p></li><li><p>绘制行政区划大于区县上的行政区域<br>eg:绘制出青岛市或者山东省（胶州市的上级或上上级）内的行政区域，district.search可查找出省市下面边界信息boundaries，所以可以直接使用district.search直接循环查找当前区域下面的行政区域然后绘制出来。<br>涉及的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//获取行政区域下面的信息（boundaries行政区的边界坐标集合，districtList下级行政区信息列表）</span><br><span class="line">export const getBounds = (&#123;</span><br><span class="line">      searchName,</span><br><span class="line">      opts</span><br><span class="line">  &#125;) =&gt; &#123;</span><br><span class="line">    if (opts) &#123;</span><br><span class="line">        opts.level &amp;&amp; district.setLevel(opts.level);</span><br><span class="line">        opts.subdistrict &amp;&amp; district.setSubdistrict(opts.subdistrict);</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      district.search(searchName, function (status, result) &#123;</span><br><span class="line">          if (status == &quot;complete&quot;) &#123;</span><br><span class="line">              let &#123; adcode, center, districtList, level, name, boundaries &#125; = result.districtList[0];</span><br><span class="line">              resolve(&#123;</span><br><span class="line">                  adcode,</span><br><span class="line">                  center: [center.lng, center.lat],</span><br><span class="line">                  districtList,</span><br><span class="line">                  boundaries,</span><br><span class="line">                  name,</span><br><span class="line">                  level</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              reject(result)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const filterBounds = (res) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        bounds: res.boundaries,</span><br><span class="line">        name: res.name,</span><br><span class="line">        adcode: res.adcode,</span><br><span class="line">        center: res.center</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 渲染行政覆盖物</span><br><span class="line">* citys 城市名称数组：[]</span><br><span class="line">* opts</span><br><span class="line">* usePolyline : 是否使用边界线，默认true</span><br><span class="line">* polyLineOpts : 边界线配置项</span><br><span class="line">* polygonOpts : 覆盖物配置项</span><br><span class="line">* mapClearFlag:是否清空所有覆盖物标志，默认为空清空所有</span><br><span class="line">* linearColor:各区块颜色是否为渐变</span><br><span class="line">* commonFillColor: 各区块颜色不一样，由polygonOpts设置各区块样式</span><br><span class="line">*  */</span><br><span class="line">export const rendPolygon = (&#123;</span><br><span class="line">        citys,</span><br><span class="line">        opts,</span><br><span class="line">        usePolyline = true,</span><br><span class="line">        polyLineOpts = &#123;&#125;,</span><br><span class="line">        polygonOpts = &#123;&#125;,</span><br><span class="line">        mapClearFlag = true,</span><br><span class="line">        linearColor = false,</span><br><span class="line">        commonFillColor=false,</span><br><span class="line">    &#125; = &#123;</span><br><span class="line">    citys,</span><br><span class="line">    opts,</span><br><span class="line">    usePolyline,</span><br><span class="line">    polyLineOpts,</span><br><span class="line">    polygonOpts,</span><br><span class="line">    linearColor,</span><br><span class="line">    commonFillColor</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    if (mapClearFlag) &#123;</span><br><span class="line">        // map.clearMap();</span><br><span class="line">    &#125;</span><br><span class="line">    let polygons = [];</span><br><span class="line">    return Promise.all(citys.map((v) =&gt; &#123; //获取边界线经纬度</span><br><span class="line">        return getBounds(&#123;</span><br><span class="line">            searchName: v,</span><br><span class="line">            opts</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)).then(res =&gt; &#123; //过滤边界线经纬度</span><br><span class="line">        return res.map(v =&gt; &#123;</span><br><span class="line">            return filterBounds(v)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(res =&gt; &#123; //绘制polygon和polyline</span><br><span class="line">        res.map((&#123;</span><br><span class="line">                    bounds,</span><br><span class="line">                    name,</span><br><span class="line">                    adcode,</span><br><span class="line">                &#125;) =&gt; &#123;</span><br><span class="line">            let v = bounds;</span><br><span class="line">            let Opt = opts;</span><br><span class="line">            for (let i = 0, l = v.length; i &lt; l; i++) &#123;</span><br><span class="line">                </span><br><span class="line">                let opts = &#123;</span><br><span class="line">                    strokeWeight: 3,</span><br><span class="line">                    path: v[i],</span><br><span class="line">                    fillOpacity: 0.5,</span><br><span class="line">                    fillColor: &apos;rgba(195, 244, 255, 0.46)&apos;,</span><br><span class="line">                    strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">                    strokeOpacity: 1</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                opts.strokeOpacity = (usePolyline ? 0.6 : 0)</span><br><span class="line">                opts.extData = &#123;</span><br><span class="line">                    areaName: name,</span><br><span class="line">                    adcode: adcode,</span><br><span class="line">                    ...opts.extData</span><br><span class="line">                &#125;</span><br><span class="line">                opts = &#123;...opts,...polygonOpts&#125;</span><br><span class="line">                // console.log(&apos;11111111111111111&apos;+name);</span><br><span class="line">                let polygon = new AMap.Polygon(opts);</span><br><span class="line">                polygons.push(polygon);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        map.add(polygons);</span><br><span class="line">        </span><br><span class="line">        let streets = res.map(v =&gt; &#123; return &#123;name: v.name, center: v.center&#125; &#125;);</span><br><span class="line"></span><br><span class="line">        return &#123;polygons, streets&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">initMap(para) &#123;</span><br><span class="line">  let that = this;</span><br><span class="line">  getBounds(&#123;</span><br><span class="line">      searchName: para,</span><br><span class="line">  &#125;).then(res =&gt; &#123;</span><br><span class="line">      let originalBounds = res.boundaries;</span><br><span class="line">      setLocalStorage(&apos;originalBounds&apos;,JSON.stringify(originalBounds));</span><br><span class="line">      this.citysCenter = res.districtList.map(item =&gt; &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">              name:item.name,</span><br><span class="line">              center:item.center</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      this.citys = this.citysCenter.map(v =&gt; v.name);</span><br><span class="line">      let opts = &#123;</span><br><span class="line">          level: &apos;district&apos;,</span><br><span class="line">          subdistrict: 1</span><br><span class="line">      &#125;;</span><br><span class="line">      rendPolygon(&#123;</span><br><span class="line">          citys: this.citys,</span><br><span class="line">          opts,</span><br><span class="line">          usePolyline: true,</span><br><span class="line">          polygonOpts: &#123;</span><br><span class="line">              fillColor:&apos;rgba(195, 244, 255, 1)&apos;,</span><br><span class="line">              strokeOpacity:0.6,</span><br><span class="line">              strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">              strokeWeight: 4,</span><br><span class="line">          &#125;,</span><br><span class="line">          polyLineOpts:&#123;</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">          mapClearFlag: true,</span><br><span class="line">          linearColor:false,</span><br><span class="line">      &#125;).then((&#123;polygons, streets&#125;) =&gt; &#123;</span><br><span class="line">          let that = this;</span><br><span class="line">          that.polygonList = polygons;</span><br><span class="line">          that.streets = streets;</span><br><span class="line">          if(this.currentUrl == &apos;landAnalysis&apos;)&#123;</span><br><span class="line">                polygons.map(cu=&gt;&#123;</span><br><span class="line">                    cu.off(&apos;click&apos;,this.polygonClick)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                polygons.map(cu=&gt;&#123;</span><br><span class="line">                    cu.on(&apos;click&apos;,this.polygonClick)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          // 设置区县文字</span><br><span class="line">          this.map.add(</span><br><span class="line">              streets.map((city,i)=&gt;&#123;</span><br><span class="line">                  let citys = new AMap.Text(&#123;</span><br><span class="line">                      text: city.name,</span><br><span class="line">                      cursor: &apos;default&apos;,</span><br><span class="line">                      position: city.center,</span><br><span class="line">                      color: &apos;white&apos;</span><br><span class="line">                  &#125;)</span><br><span class="line">                  citys.setStyle(&#123;</span><br><span class="line">                      &apos;background-color&apos;: &apos;transparent&apos;,</span><br><span class="line">                      color: &apos;#0015A5&apos;,</span><br><span class="line">                      &apos;font-size&apos;: &apos;50%&apos;,</span><br><span class="line">                      border: &apos;none&apos;</span><br><span class="line">                  &#125;);</span><br><span class="line">                  return citys</span><br><span class="line">              &#125;)</span><br><span class="line">          )</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>图示：青岛市<img src="/images/web/visable/jz2.png" alt="目录"></p></li><li><p>绘制区县下的街道等行政区域<br>eg:绘制出胶州市（县级市）下面街道的行政区域，district.search查不出区县下面行政区域的边界信息boundaries，所以需要自己提供每个街道乡镇的边界信息。<br>文件./lngLat/amap.jiaozhou放胶州市下的街镇以及各街镇边界信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const jiaozhou = &#123;</span><br><span class="line">  &quot;citycode&quot;:&quot;0532&quot;,&quot;adcode&quot;:&quot;370281&quot;,&quot;name&quot;:&quot;胶州市&quot;,&quot;polyline&quot;:&quot;&quot;,&quot;districts&quot;:[</span><br><span class="line">    &quot;citycode&quot;:&quot;0532&quot;,&quot;adcode&quot;:&quot;370281&quot;,&quot;name&quot;:&quot;阜安街道&quot;,&quot;polyline&quot;:&quot;&quot;,&quot;districts&quot;:[],....</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">先拿到胶州市下乡镇的边界信息</span><br><span class="line">import &#123;</span><br><span class="line">    jiaozhou</span><br><span class="line">&#125; from &quot;./lngLat/amap.jiaozhou&quot;</span><br><span class="line"></span><br><span class="line">let jzMapper = &#123;&#125;</span><br><span class="line">jiaozhou.districts.map(v =&gt; &#123;</span><br><span class="line">    jzMapper[v.name] = v</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const mapper = &#123;</span><br><span class="line">    ...jzMapper,//把胶州下面所有的街镇放在mapper里面</span><br><span class="line">&#125;</span><br><span class="line">const processMapper = &#123;&#125;</span><br><span class="line">const district = new AMap.DistrictSearch(&#123;</span><br><span class="line">    level: &apos;province&apos;,</span><br><span class="line">    showbiz: false,</span><br><span class="line">    extensions: &apos;all&apos;,</span><br><span class="line">    subdistrict: 3</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function createLngLat(polyline) &#123;</span><br><span class="line">    let result = []</span><br><span class="line">    let arr = polyline.split(&quot;|&quot;).filter(v =&gt; v.length);</span><br><span class="line">    let arr1 = arr.map(v =&gt; &#123;</span><br><span class="line">        return v.split(&quot;;&quot;).map(v1 =&gt; v1.split(&quot;,&quot;).map(v2 =&gt; (v2 - 0)))</span><br><span class="line">    &#125;)</span><br><span class="line">    result = arr1.filter(v =&gt; v.length &gt; 0)</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">function processLngLat(districts) &#123;</span><br><span class="line">    return districts.map(v =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            adcode: v.adcode,</span><br><span class="line">            center: v.center.split(&quot;,&quot;).map(v =&gt; (v - 0)),</span><br><span class="line">            districtList: processLngLat(v.districts),</span><br><span class="line">            boundaries: (v.polyline ? createLngLat(v.polyline) : []),</span><br><span class="line">            name: v.name,</span><br><span class="line">            level: v.level</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function createAMapResponse(areaName) &#123;</span><br><span class="line">    let districts = mapper[areaName].districts;</span><br><span class="line">    let v = mapper[areaName];</span><br><span class="line">    processMapper[areaName] = &#123;</span><br><span class="line">        adcode: v.adcode,</span><br><span class="line">        center: v.center.split(&quot;,&quot;).map(v =&gt; (v - 0)),</span><br><span class="line">        districtList: processLngLat(v.districts),</span><br><span class="line">        boundaries: (v.polyline ? createLngLat(v.polyline) : []),</span><br><span class="line">        name: v.name,</span><br><span class="line">        level: v.level</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return processMapper[areaName]</span><br><span class="line">&#125;</span><br><span class="line">export const getBounds = (&#123;</span><br><span class="line">                              searchName,</span><br><span class="line">                              opts</span><br><span class="line">                          &#125;) =&gt; &#123;</span><br><span class="line">    if (opts) &#123;</span><br><span class="line">        opts.level &amp;&amp; district.setLevel(opts.level);</span><br><span class="line">        opts.subdistrict &amp;&amp; district.setSubdistrict(opts.subdistrict);</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        if (processMapper[searchName]) &#123;</span><br><span class="line">            resolve(processMapper[searchName])</span><br><span class="line">        &#125; else if (mapper[searchName]) &#123;//如果是胶州的街镇则取自定义的街镇边界信息</span><br><span class="line">            resolve(createAMapResponse(searchName))</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            district.search(searchName, function (status, result) &#123;</span><br><span class="line">                console.log(result);</span><br><span class="line">                if (status == &quot;complete&quot;) &#123;</span><br><span class="line">                    let &#123; adcode, center, districtList, level, name, boundaries &#125; = result.districtList[0];</span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        adcode,</span><br><span class="line">                        center: [center.lng, center.lat],</span><br><span class="line">                        districtList,</span><br><span class="line">                        boundaries,</span><br><span class="line">                        name,</span><br><span class="line">                        level</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reject(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">export const filterBounds = (res) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        bounds: res.boundaries,</span><br><span class="line">        name: res.name,</span><br><span class="line">        adcode: res.adcode,</span><br><span class="line">        center: res.center</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">* 渲染行政覆盖物</span><br><span class="line">* citys 城市名称数组：[]</span><br><span class="line">* opts</span><br><span class="line">* usePolyline : 是否使用边界线，默认true</span><br><span class="line">* polyLineOpts : 边界线配置项</span><br><span class="line">* polygonOpts : 覆盖物配置项</span><br><span class="line">* mapClearFlag:是否清空所有覆盖物标志，默认为空清空所有</span><br><span class="line">* linearColor:各区块颜色是否为渐变</span><br><span class="line">* commonFillColor: 各区块颜色不一样，由polygonOpts设置各区块样式</span><br><span class="line">*  */</span><br><span class="line">export const rendPolygon = (&#123;</span><br><span class="line">      citys,</span><br><span class="line">      opts,</span><br><span class="line">      usePolyline = true,</span><br><span class="line">      polyLineOpts = &#123;&#125;,</span><br><span class="line">      polygonOpts = &#123;&#125;,</span><br><span class="line">      mapClearFlag = true,</span><br><span class="line">      linearColor = false,</span><br><span class="line">      commonFillColor=false,</span><br><span class="line">  &#125; = &#123;</span><br><span class="line">    citys,</span><br><span class="line">    opts,</span><br><span class="line">    usePolyline,</span><br><span class="line">    polyLineOpts,</span><br><span class="line">    polygonOpts,</span><br><span class="line">    linearColor,</span><br><span class="line">    commonFillColor</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    if (mapClearFlag) &#123;</span><br><span class="line">        // map.clearMap();</span><br><span class="line">    &#125;</span><br><span class="line">    let polygons = [];</span><br><span class="line">    return Promise.all(citys.map((v) =&gt; &#123; //获取边界线经纬度</span><br><span class="line">        return getBounds(&#123;</span><br><span class="line">            searchName: v,</span><br><span class="line">            opts</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)).then(res =&gt; &#123; //过滤边界线经纬度</span><br><span class="line">        </span><br><span class="line">        return res.map(v =&gt; &#123;</span><br><span class="line">            return filterBounds(v)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(res =&gt; &#123; //绘制polygon和polyline</span><br><span class="line">        res.map((&#123;</span><br><span class="line">                bounds,</span><br><span class="line">                name,</span><br><span class="line">                adcode,</span><br><span class="line">            &#125;) =&gt; &#123;</span><br><span class="line">            let v = bounds;</span><br><span class="line">            let Opt = opts;</span><br><span class="line">            for (let i = 0, l = v.length; i &lt; l; i++) &#123;</span><br><span class="line">                let opts = &#123;</span><br><span class="line">                    strokeWeight: 3,</span><br><span class="line">                    path: v[i],</span><br><span class="line">                    fillOpacity: 0.5,</span><br><span class="line">                    fillColor: &apos;rgba(195, 244, 255, 0.46)&apos;,</span><br><span class="line">                    strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">                    strokeOpacity: 1</span><br><span class="line">                &#125;;</span><br><span class="line">                opts.strokeOpacity = (usePolyline ? 0.6 : 0)</span><br><span class="line">                opts.extData = &#123;</span><br><span class="line">                    areaName: name,</span><br><span class="line">                    adcode: adcode,</span><br><span class="line">                    ...opts.extData</span><br><span class="line">                &#125;</span><br><span class="line">                opts = &#123;...opts,...polygonOpts&#125;</span><br><span class="line">                let polygon = new AMap.Polygon(opts);</span><br><span class="line">                polygons.push(polygon);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            // for (let i = 0, l = v.length; i &lt; l; i++) &#123;</span><br><span class="line">            //     if(usePolyline)&#123;</span><br><span class="line">            //         // console.log(v[i])</span><br><span class="line">            //         let opts = &#123;</span><br><span class="line">            //             path:v[i],</span><br><span class="line">            //             strokeColor:&apos;#FFFEC43B&apos;,</span><br><span class="line">            //             strokeWeight:2,</span><br><span class="line">            //             strokeOpacity:.3,</span><br><span class="line">            //             map:map</span><br><span class="line">            //         &#125;</span><br><span class="line">            //         Object.assign(opts,polyLineOpts);</span><br><span class="line">            //         new AMap.Polyline(opts)</span><br><span class="line">            //     &#125;</span><br><span class="line">            //</span><br><span class="line">            // &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        map.add(polygons);</span><br><span class="line">        let streets = res.map(v =&gt; &#123; return &#123;name: v.name, center: v.center&#125; &#125;);</span><br><span class="line">        return &#123;polygons, streets&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    // return polygons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    this.map = mapInit(&apos;map-main&apos;,&#123;viewMode: &apos;3D&apos;,&#125;,&apos;amap://styles/069da364079e3b5bdce1f621f8ac52ea&apos;);</span><br><span class="line">    if(this.map)&#123;</span><br><span class="line">        this.setMapCenterSpot(120.02382574526537,36.212799916381756);</span><br><span class="line">        this.setMapZoom(10.9);</span><br><span class="line">        this.setMapPitch(50);</span><br><span class="line">        this.initMap(&apos;胶州市&apos;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">initMap(para) &#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    getBounds(&#123;</span><br><span class="line">        searchName: para,</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">        //let originalBounds = res.boundaries;</span><br><span class="line">        //setLocalStorage(&apos;originalBounds&apos;,JSON.stringify(originalBounds));</span><br><span class="line">        this.citysCenter = res.districtList.map(item =&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:item.name,</span><br><span class="line">                center:item.center</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        this.citys = this.citysCenter.map(v =&gt; v.name);</span><br><span class="line">        //let bounds = originalBounds.filter(v =&gt; v.length &gt; 300);</span><br><span class="line">        let opts = &#123;</span><br><span class="line">            level: &apos;district&apos;,</span><br><span class="line">            subdistrict: 1</span><br><span class="line">        &#125;;</span><br><span class="line">        // if (bounds) &#123;</span><br><span class="line">        //     renderPolyline(bounds, &#123;</span><br><span class="line">        //         strokeColor: &apos;red&apos;,</span><br><span class="line">        //         strokeWeight: 4</span><br><span class="line">        //     &#125;)</span><br><span class="line">        // &#125;</span><br><span class="line">        rendPolygon(&#123;</span><br><span class="line">            citys: this.citys,</span><br><span class="line">            opts,</span><br><span class="line">            usePolyline: true,</span><br><span class="line">            polygonOpts: &#123;</span><br><span class="line">                fillColor:&apos;rgba(195, 244, 255, 1)&apos;,</span><br><span class="line">                strokeOpacity:0.6,</span><br><span class="line">                strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">                strokeWeight: 4,</span><br><span class="line">            &#125;,</span><br><span class="line">            polyLineOpts:&#123;&#125;,</span><br><span class="line">            mapClearFlag: true,</span><br><span class="line">            linearColor:false,</span><br><span class="line">        &#125;).then((&#123;polygons, streets&#125;) =&gt; &#123;</span><br><span class="line">            let that = this;</span><br><span class="line">            that.polygonList = polygons;</span><br><span class="line">            that.streets = streets;</span><br><span class="line">            // 设置区县文字</span><br><span class="line">            this.map.add(</span><br><span class="line">                streets.map((city,i)=&gt;&#123;</span><br><span class="line">                    let citys = new AMap.Text(&#123;</span><br><span class="line">                        text: city.name,</span><br><span class="line">                        cursor: &apos;default&apos;,</span><br><span class="line">                        position: city.center,</span><br><span class="line">                        color: &apos;white&apos;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    citys.setStyle(&#123;</span><br><span class="line">                        &apos;background-color&apos;: &apos;transparent&apos;,</span><br><span class="line">                        color: &apos;#0015A5&apos;,</span><br><span class="line">                        &apos;font-size&apos;: &apos;50%&apos;,</span><br><span class="line">                        border: &apos;none&apos;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    return citys</span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>图示：胶州市下的镇街<img src="/images/web/visable/jz3.png" alt="目录"></p></li></ol><p>上面三种方式概括了大部分行政区域绘制的情况，其中第三种属于通用性方式，通过第三种方式可以绘制出大部分行政区域的地图。<br>若是需要绘制其他区县级行政区域只需按照格式替换相应json文件即可。</p><p>完整代码地址：<a href="https://gitee.com/Chensanr/daily-code/tree/master/visable/qdjz" target="_blank" rel="noopener">胶州市区域绘制</a></p><h2 id="楼宇图层-AMap-Buildings"><a href="#楼宇图层-AMap-Buildings" class="headerlink" title="楼宇图层 - AMap.Buildings"></a>楼宇图层 - AMap.Buildings</h2><h3 id="功能1：根据不同图例的范围显示楼宇不同的颜色"><a href="#功能1：根据不同图例的范围显示楼宇不同的颜色" class="headerlink" title="功能1：根据不同图例的范围显示楼宇不同的颜色"></a>功能1：根据不同图例的范围显示楼宇不同的颜色</h3><p><img src="/images/web/visable/build1.png" alt="目录"></p><p>template组件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;landAnalysis&quot; class=&quot;analysis-container mapAnalysis&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;select-position&quot;&gt;</span><br><span class="line">      &lt;el-autocomplete</span><br><span class="line">        class=&quot;decision-input&quot;</span><br><span class="line">        v-model=&quot;keyword&quot;</span><br><span class="line">        :fetch-suggestions=&quot;querySearchAsync1&quot;</span><br><span class="line">        value-key=&quot;entName&quot;</span><br><span class="line">        prefix-icon=&quot;el-icon-search&quot;</span><br><span class="line">        clearable</span><br><span class="line">        :trigger-on-focus=&quot;false&quot;</span><br><span class="line">        placeholder=&quot;请输入企业名称进行查询&quot;</span><br><span class="line">        @select=&quot;handleSelect1&quot;</span><br><span class="line">      &gt;&lt;/el-autocomplete&gt;</span><br><span class="line">      &lt;!-- &lt;div id=&quot;pickerBox&quot;&gt;</span><br><span class="line">        &lt;input id=&quot;pickerInput&quot; class=&quot;decision-input&quot; placeholder=&quot;输入关键字选取地点&quot; /&gt;</span><br><span class="line">        &lt;div id=&quot;poiInfo&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;--&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;type&quot; placeholder=&quot;请选择&quot; @change=&quot;changeItem&quot; class=&quot;decision-select&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">          v-for=&quot;item in landMuOption&quot;</span><br><span class="line">          :key=&quot;item.value&quot;</span><br><span class="line">          :label=&quot;item.name&quot;</span><br><span class="line">          :value=&quot;item.value&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;div class=&quot;dictList&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dict_item&quot; v-for=&quot;(items,i) in dictList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;i_btn&quot; :style=&quot;&#123;background:landMuColors[i].color,borderColor:items.color,borderStyle:&apos;solid&apos;,borderWidth:&apos;1px&apos;&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123;items.label&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;text-position&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;text-position-first&quot;&gt;胶州市地图&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;text-position-second&quot;&gt;企业分布经纬度坐标分布图&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;cash_box&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;cash_item&quot; @click=&quot;changeLay&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont iconweixing&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span&gt;卫星地图&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span&gt;|&lt;/span&gt;</span><br><span class="line">      &lt;div class=&quot;cash_item&quot; @click=&quot;startDraw&quot; :style=&quot;pickUpStyle&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont iconbianqushibie&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span&gt;边界拾取&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span&gt;|&lt;/span&gt;</span><br><span class="line">      &lt;div class=&quot;cash_item&quot; @click=&quot;resetDraw&quot;&gt;</span><br><span class="line">        &lt;span style=&quot;&quot;&gt;清除&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;dataset_box&quot; v-show=&quot;isShowRight&quot;&gt;</span><br><span class="line">      &lt;section class=&quot;box_head&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left_head&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;title_or1 head_item&quot;&gt;企业边界信息&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">      &lt;section class=&quot;boundary_content&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          面积：</span><br><span class="line">          &lt;span&gt;&#123;&#123;boundaryInfo.mapArea&#125;&#125;&lt;/span&gt;平方米</span><br><span class="line">          &lt;span&gt;&#123;&#123;boundaryInfo.area2&#125;&#125;&lt;/span&gt;亩</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          企业名称：</span><br><span class="line">          &lt;el-autocomplete</span><br><span class="line">            v-model=&quot;boundaryInfo.entName&quot;</span><br><span class="line">            :fetch-suggestions=&quot;querySearchAsync&quot;</span><br><span class="line">            value-key=&quot;entName&quot;</span><br><span class="line">            placeholder=&quot;请搜索&quot;</span><br><span class="line">            clearable</span><br><span class="line">            :trigger-on-focus=&quot;false&quot;</span><br><span class="line">            @select=&quot;handleSelect&quot;</span><br><span class="line">          &gt;&lt;/el-autocomplete&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          经纬度范围：</span><br><span class="line">          &lt;el-input</span><br><span class="line">            type=&quot;textarea&quot;</span><br><span class="line">            :rows=&quot;4&quot;</span><br><span class="line">            placeholder=&quot;请输入经纬度范围&quot;</span><br><span class="line">            v-model=&quot;boundaryInfo.locationRange&quot;</span><br><span class="line">            disabled</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          经纬度点：</span><br><span class="line">          &lt;el-input v-model=&quot;boundaryInfo.lngLat&quot; placeholder=&quot;请输入经纬度点&quot; disabled&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">      &lt;section class=&quot;boundary_footer&quot;&gt;</span><br><span class="line">        &lt;span @click=&quot;cancalBind&quot;&gt;取消&lt;/span&gt;</span><br><span class="line">        &lt;span @click=&quot;confirmBind&quot;&gt;确定&lt;/span&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>1.定义楼宇图例的颜色和范围(常量)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">//楼宇样式 </span><br><span class="line">export const landMuColors = [</span><br><span class="line">    &#123;</span><br><span class="line">        color:&apos;rgba(251, 139, 16, 0.25)&apos;,//楼宇的fillColor</span><br><span class="line">        color1:&apos;FFFFDBA9&apos;,//楼顶颜色</span><br><span class="line">        borderColor:&apos;#FB8B10&apos;,//外部polygon的填充颜色和楼宇的borderColor</span><br><span class="line">        color2:&apos;FFE05100&apos;//楼面颜色</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        color:&apos;rgba(173, 198, 253, 0.5)&apos;,</span><br><span class="line">        borderColor:&apos;#4060E4&apos;,</span><br><span class="line">        color1:&apos;FFADC6FD&apos;,</span><br><span class="line">        color2:&apos;FF0036B1&apos;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        color:&apos;rgba(231, 62, 21, 0.4)&apos;,</span><br><span class="line">        borderColor:&apos;#FF6910&apos;,</span><br><span class="line">        color1:&apos;FFFF987F&apos;,</span><br><span class="line">        color2:&apos;FFD30000&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        color:&apos;rgba(247, 181, 0, 0.4)&apos;,</span><br><span class="line">        borderColor:&apos;#FFBC04&apos;,</span><br><span class="line">        color1:&apos;FFFFE59D&apos;,</span><br><span class="line">        color2:&apos;FFD28300&apos;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line">//专题分析图例列表</span><br><span class="line">export const landMuOption = [</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位用地税收&apos;,</span><br><span class="line">        value:1,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~0.5万元/亩&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0.5~2万元/亩&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;2~5万元/亩&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;5万元/亩以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位用地主营业务收入&apos;,</span><br><span class="line">        value:2,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~100万元/亩&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;100~200万元/亩&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;200~300万元/亩&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;300万元/亩以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位能耗主营业务收入&apos;,</span><br><span class="line">        value:3,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~25万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;25~60万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;60~150万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;150以上万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位污染物排放主营业务收入&apos;,</span><br><span class="line">        value:4,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~3万元/当量吨&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;3~10万元/当量吨&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;10~30万元/当量吨&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;30万元以上/当量吨&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;研发经费投入占主营业务收入比重&apos;,</span><br><span class="line">        value:5,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~4%&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;4%~5%&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;5%~7%&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;7%以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;全员劳动生产率&apos;,</span><br><span class="line">        value:6,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~40万元/人·年&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;40~70万元/人·年&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;70~120万元/人·年&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;120万元/人·年以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;分档&apos;,</span><br><span class="line">        value:7,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;A档&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;B档&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;C档&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;D档&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">后台返回的楼宇数据格式：</span><br><span class="line">data:[</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;0~0.5万元/亩&apos;, //当前选择图例的第一项图例name，依次类推</span><br><span class="line">        data:[&#123;</span><br><span class="line">            allWorkRate: 607.355</span><br><span class="line">            creditCode: &quot;91370281740398747R&quot;</span><br><span class="line">            dataYear: 2018</span><br><span class="line">            entName: &quot;青岛德全食品有限公司&quot;</span><br><span class="line">            entType: &quot;B&quot;</span><br><span class="line">            id: 5803</span><br><span class="line">            lat: &quot;36.4493852655075600&quot;</span><br><span class="line">            lng: &quot;120.0681803666910500&quot;</span><br><span class="line">            locationRange: &quot;120.0681803666910500,36.4493852655075600,120.0681803666910500,36.4493852655075600,120.0681803666910500,36.4493852655075600,120.0681803666910500,36.4493852655075600&quot;</span><br><span class="line">            mapArea: null</span><br><span class="line">            muConsumeIncome: 533.3106</span><br><span class="line">            muEmissionsIncome: null</span><br><span class="line">            muMainIncome: 664.3298</span><br><span class="line">            muPerTax: 0.2605</span><br><span class="line">            rangeList: [[&quot;120.0681803666910500&quot;, &quot;36.4493852655075600&quot;], [&quot;120.0681803666910500&quot;, &quot;36.4493852655075600&quot;],…] //楼宇需要的边界值path</span><br><span class="line">            researchRate: 4.2149</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&apos;0.5~2万元/亩&apos;,</span><br><span class="line">        data:[]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&apos;2~5万元/亩&apos;,</span><br><span class="line">        data:[]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&apos;5万元/亩以上&apos;,</span><br><span class="line">        data:[]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.初始化地图，根据后台数据添加楼宇<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">//初始化某个市的地图</span><br><span class="line">initSearch() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      //卫星图层</span><br><span class="line">      this.satelliteLayer = new AMap.TileLayer.Satellite();</span><br><span class="line">      //楼块图层</span><br><span class="line">      this.buildingLayer = new AMap.Buildings(&#123;</span><br><span class="line">        zIndex: 130,</span><br><span class="line">        merge: false,</span><br><span class="line">        sort: false,</span><br><span class="line">        heightFactor: 2,</span><br><span class="line">        zooms: [16, 18]</span><br><span class="line">      &#125;);</span><br><span class="line">      this.map.setFeatures([&quot;bg&quot;, &quot;road&quot;, &quot;building&quot;, &quot;point&quot;]);</span><br><span class="line">      this.map.setLayers([new AMap.TileLayer(&#123;&#125;), this.buildingLayer]);</span><br><span class="line">      this.map.setPitch(60);</span><br><span class="line">      this.map.setRotation(35);</span><br><span class="line">      //调视角控件</span><br><span class="line">      this.map.plugin([&quot;AMap.ControlBar&quot;], function() &#123;</span><br><span class="line">        let Options = &#123;</span><br><span class="line">          position: &#123;</span><br><span class="line">            bottom: &quot;-100px&quot;,</span><br><span class="line">            right: 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        that.controlBar = new AMap.ControlBar(Options);</span><br><span class="line">        that.map.addControl(that.controlBar);</span><br><span class="line">      &#125;);</span><br><span class="line">      this.mouseTool = new AMap.MouseTool(this.map);</span><br><span class="line">      this.mouseTool.close();</span><br><span class="line">      //拿到所有楼块的位置并设置</span><br><span class="line">      this.getbuildingLayer();</span><br><span class="line">    &#125;,</span><br><span class="line">    //获取后台数据 设置楼宇</span><br><span class="line">    getbuildingLayer() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      landAnalysisEntList(&#123; type: this.type, dataYear: 2018 &#125;).then(res =&gt; &#123;</span><br><span class="line">        let arr = res.data || [];</span><br><span class="line">        let options = &#123;&#125;;</span><br><span class="line">        let allData = arr.map((v, i) =&gt; &#123;</span><br><span class="line">          let eveItemData = v.data.map(val =&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              rejectTexture: true, //是否屏蔽自定义地图的纹理</span><br><span class="line">              color1: that.landMuColors[i].color1,</span><br><span class="line">              color2: that.landMuColors[i].color2,</span><br><span class="line">              entName: val.entName,</span><br><span class="line">              creditCode: val.creditCode,</span><br><span class="line">              lng: val.lng,</span><br><span class="line">              lat: val.lat,</span><br><span class="line">              entType: val.entType,</span><br><span class="line">              fillColor: that.landMuColors[i].color,</span><br><span class="line">              borderColor: that.landMuColors[i].borderColor,</span><br><span class="line">              path: val.rangeList || []</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125;);</span><br><span class="line">          return eveItemData;</span><br><span class="line">        &#125;);</span><br><span class="line">        //所有楼块的位置</span><br><span class="line">        that.areas = allData.reduce(function(a, b) &#123;</span><br><span class="line">          return a.concat(b);</span><br><span class="line">        &#125;).filter((v)=&gt;&#123;</span><br><span class="line">          return v.lng&amp;&amp;v.lat;</span><br><span class="line">        &#125;);</span><br><span class="line">        //设置楼块的位置</span><br><span class="line">        that.buildingLayer.setStyle(&#123;</span><br><span class="line">          hideWithoutStyle: false,</span><br><span class="line">          areas: that.areas</span><br><span class="line">        &#125;);</span><br><span class="line">        //所有楼块上面的地面矩形Polygon</span><br><span class="line">        this.polygonFloorList = that.areas.map((v, i) =&gt; &#123;</span><br><span class="line">          let somePolygon = new AMap.Polygon(&#123;</span><br><span class="line">            bubble: true,</span><br><span class="line">            fillColor: v.fillColor || &quot;green&quot;,</span><br><span class="line">            // fillOpacity: 0.2,</span><br><span class="line">            strokeWeight: 1,</span><br><span class="line">            strokeColor: v.borderColor,</span><br><span class="line">            strokeWeight: 2,</span><br><span class="line">            path: v.path,</span><br><span class="line">            map: that.map</span><br><span class="line">          &#125;);</span><br><span class="line">          //地面Polygon设置点击事件-清除当前楼层</span><br><span class="line">          // somePolygon.on(&quot;click&quot;, function(e) &#123;</span><br><span class="line">          //   that.currentIndex = i;</span><br><span class="line">          //   // console.log(that.currentIndex);</span><br><span class="line">          //   that.clearLayBuding();</span><br><span class="line">          // &#125;);</span><br><span class="line">          return somePolygon;</span><br><span class="line">        &#125;);</span><br><span class="line">        //给每个楼块标记点marker</span><br><span class="line">        pointShow(</span><br><span class="line">          this.map,</span><br><span class="line">          function(current) &#123;</span><br><span class="line">            iconPoint(that.map, function(curr) &#123;&#125;, [current], 2); //2表示土地的infowindow</span><br><span class="line">          &#125;,</span><br><span class="line">          that.areas,</span><br><span class="line">          2</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    clearLayBuding() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      //清除当前楼层 - 拿不到当前polygon上的楼层- （去掉areas中当前点击的index之后重新设置style的areas）</span><br><span class="line">      let areas = [...that.areas];</span><br><span class="line">      areas.splice(that.currentIndex, 1);</span><br><span class="line">      that.buildingLayer.setStyle(&#123;</span><br><span class="line">        hideWithoutStyle: false,</span><br><span class="line">        areas</span><br><span class="line">      &#125;);</span><br><span class="line">      //清除当前楼层下polygon</span><br><span class="line">      let current = this.polygonFloorList[this.currentIndex];</span><br><span class="line">      current.setMap(null);</span><br><span class="line">      current = null;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>如下：能清晰看到楼宇效果图<br><img src="/images/web/visable/build2.png" alt="目录"></p><h3 id="功能2：边界拾取"><a href="#功能2：边界拾取" class="headerlink" title="功能2：边界拾取"></a>功能2：边界拾取</h3><p>在地图上拾取一个范围边界圈出企业的范围保存楼宇到后台，改拾取的边界区域就是企业的位置和楼宇</p><p><img src="/images/web/visable/build3.png" alt="目录"></p><p><a href="https://lbs.amap.com/api/javascript-api/reference/plugin#AMap.MouseTool" target="_blank" rel="noopener">AMap.MouseTool 插件api文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">//点击拾取</span><br><span class="line">startDraw() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      this.pickUpStyle = &#123;</span><br><span class="line">        color:&apos;#54CFFF&apos;</span><br><span class="line">      &#125;</span><br><span class="line">      //边界拾取 - 绘制polyon</span><br><span class="line">      this.mouseTool.polygon(&#123;</span><br><span class="line">        fillColor: &quot;#00b0ff&quot;,</span><br><span class="line">        strokeColor: &quot;#80d8ff&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">      //   that.mouseTool.close(); //绘制结束后先关闭绘制工具   that.mouseTool.close(true)关闭绘制并清除绘制图形</span><br><span class="line">      this.mouseTool.on(&quot;draw&quot;, function(e) &#123;</span><br><span class="line">        //结束绘制</span><br><span class="line">        let obj = e.obj;</span><br><span class="line">        that.overlays.push(obj);</span><br><span class="line">        that.mouseTool.close();</span><br><span class="line">        that.pickUpStyle = &#123;</span><br><span class="line">          color:&apos;#fff&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        //双击点开右侧数据栏，</span><br><span class="line">        obj.on(&quot;dblclick&quot;, function(event) &#123;</span><br><span class="line">          that.isShowRight = true;</span><br><span class="line">          //获取当前绘制的边界值范围</span><br><span class="line">          let arr = obj.getPath();</span><br><span class="line">          let lngLat =</span><br><span class="line">            arr &amp;&amp; arr.length &gt; 0</span><br><span class="line">              ? arr</span><br><span class="line">                  .map((v, i) =&gt; &#123;</span><br><span class="line">                    return v.lng + &quot;,&quot; + v.lat;</span><br><span class="line">                  &#125;)</span><br><span class="line">                  .join(&quot;,&quot;)</span><br><span class="line">              : &quot;&quot;;</span><br><span class="line">          that.boundaryInfo.locationRange = lngLat;</span><br><span class="line">          let area = obj.getArea();</span><br><span class="line">          that.boundaryInfo.mapArea = area;</span><br><span class="line">          that.boundaryInfo.area2 = (area * 0.0015).toFixed(2);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    //把右侧的数据提交后台，再重新获取楼宇则刚才绘制的边界就显示出来</span><br><span class="line">    confirmBind() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      let &#123;</span><br><span class="line">        id,</span><br><span class="line">        creditCode,</span><br><span class="line">        entName,</span><br><span class="line">        dataYear,</span><br><span class="line">        mapArea,</span><br><span class="line">        locationRange</span><br><span class="line">      &#125; = this.boundaryInfo;</span><br><span class="line">      let con = &#123; id, creditCode, entName, dataYear, mapArea, locationRange &#125;;</span><br><span class="line">      if (id &amp;&amp; entName) &#123;</span><br><span class="line">        landAnalysisUpdateEntRange(con).then(res =&gt; &#123;</span><br><span class="line">          if (res.code == &quot;0000&quot;) &#123;</span><br><span class="line">            that.isShowRight = false;</span><br><span class="line">            that.getbuildingLayer();</span><br><span class="line">            that.$message(&#123;</span><br><span class="line">              type: &quot;success&quot;,</span><br><span class="line">              message: &quot;绘制成功&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            that.resetBoundary();</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            that.$message(&#123;</span><br><span class="line">              type: &quot;error&quot;,</span><br><span class="line">              message: res.msg</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        that.$message(&#123;</span><br><span class="line">          type: &quot;warning&quot;,</span><br><span class="line">          message: &quot;请选择绘制范围的公司&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/Chensanr/daily-code/blob/master/visable/jz-buildings.js" target="_blank" rel="noopener">完整代码地址</a></p><p>文档:<a href="https://lbs.amap.com/api/javascript-api/reference/layer#buildings" target="_blank" rel="noopener">楼宇图层api文档</a><br>示例:<a href="https://lbs.amap.com/api/javascript-api/example/personalized-map/building-style" target="_blank" rel="noopener">楼宇图层设置楼块颜色示例</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> Visualization </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visualization </tag>
            
            <tag> 高德地图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端兼容问题</title>
      <link href="/2020/06/13/hack/"/>
      <url>/2020/06/13/hack/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>常见的前端兼容问题</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="移动端兼容问题"><a href="#移动端兼容问题" class="headerlink" title="移动端兼容问题"></a>移动端兼容问题</h2><ol><li>移动端屏幕 1px 边框问题</li></ol><ul><li><p>使用伪类 + transform 实现，原理是把原先元素的 border 去掉，然后利用 :before 或者 :after 重做 border ，并 transform 的 scale 缩小一半，原先的元素相对定位，新做的 border 绝对定位。</p></li><li><p>单条 border 样式设置：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.scale-1px&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  border:none;</span><br><span class="line">&#125;</span><br><span class="line">.scale-1px:after&#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background: #000;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 1px;</span><br><span class="line">  -webkit-transform: scaleY(0.5);</span><br><span class="line">  transform: scaleY(0.5);</span><br><span class="line">  -webkit-transform-origin: 0 0;</span><br><span class="line">  transform-origin: 0 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>四条 boder 样式设置:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.scale-1px&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin-bottom: 20px;</span><br><span class="line">  border:none;</span><br><span class="line">&#125;</span><br><span class="line">.scale-1px:after&#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  border: 1px solid #000;</span><br><span class="line">  -webkit-box-sizing: border-box;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  width: 200%;</span><br><span class="line">  height: 200%;</span><br><span class="line">  -webkit-transform: scale(0.5);</span><br><span class="line">  transform: scale(0.5);</span><br><span class="line">  -webkit-transform-origin: left top;</span><br><span class="line">  transform-origin: left top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>new Date(date).getTime()在 ios 下的兼容性问题。</li></ol><ul><li>new Date(“2018-12-12 00:00:01”).getTime()获取时间戳的时候在 ios 下面为 NaN.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new Date(&quot;2018-12-12 00:00:01&quot;)</span><br><span class="line">/*</span><br><span class="line">*chrome浏览器以及安卓下面都可以正常输出-&gt;Wed Dec 12 2018 00:00:01 GMT+0800 (中国标准时间)</span><br><span class="line">*在ios下面输出是Invalid Date。因为ios下面必须传new Date(&quot;2018/12/12 00:00:01&quot;)，这种格式的日期参数</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*所以在ios下面就相当于是new Date(&quot;Invalid Date&quot;).getTime()，所以自然输出的结果是：NaN</span><br><span class="line">*/</span><br><span class="line">new Date(&quot;2018-12-12 00:00:01&quot;).getTime()//NaN</span><br></pre></td></tr></table></figure><ul><li>解决方法：直接将时间格式化为“YYYY/MM/DD HH:MM:SS”即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Date(dataTime.replace(/-/g,&apos;/&apos;)).getTime()</span><br></pre></td></tr></table></figure><h2 id="pc-端兼容问题"><a href="#pc-端兼容问题" class="headerlink" title="pc 端兼容问题"></a>pc 端兼容问题</h2><ol><li><p>window.open()在 ie 浏览器打开空白<br>解决方式：用 window.location.href 方式打开</p></li><li><p>文件下载</p></li></ol><p>IE 浏览器：使用微软自带的msSaveBlob 方法，a标签的download属性不支持IE<br>谷歌浏览器：创建a标签 ，添加download属性，模拟鼠标点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">downloadProposal(params).then(res =&gt; &#123;</span><br><span class="line">               const blob = new Blob([res]);</span><br><span class="line">               if (window.navigator.msSaveBlob) &#123;</span><br><span class="line">                 try &#123;</span><br><span class="line">                   window.navigator.msSaveBlob(blob, &apos;下载的文件命名&apos;)</span><br><span class="line">                 &#125; catch (e) &#123;</span><br><span class="line">                   console.log(e);</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                 // 谷歌浏览器 创建a标签 添加download属性下载</span><br><span class="line">                 const a = document.createElement(&quot;a&quot;);</span><br><span class="line">                 // 兼容webkix浏览器，处理webkit浏览器中herf自动添加blob前缀，默认在浏览器打开而不是下载</span><br><span class="line">                 const URL = window.URL || window.webkitURL;</span><br><span class="line">                 // 根据blob对象创建URL 对象，生成本地URL</span><br><span class="line">                 const herf = URL.createObjectURL(blob);</span><br><span class="line">                 // 下载链接</span><br><span class="line">                 a.href = herf;</span><br><span class="line">                 //当前时间</span><br><span class="line">                 const time = timeNow();</span><br><span class="line">                 // 下载文件名,如果后端没有返回，可以自己写a.download = &apos;文件.pdf&apos;</span><br><span class="line">                 a.download = &quot;项目审核意见书&quot; + time + &quot;.doc&quot;;</span><br><span class="line">                 document.body.appendChild(a);</span><br><span class="line">                 a.click();</span><br><span class="line">                 document.body.removeChild(a);</span><br><span class="line">                 // 在内存中移除URL 对象</span><br><span class="line">                 window.URL.revokeObjectURL(herf);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES 2020 新特性</title>
      <link href="/2020/05/26/ES-2020-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/05/26/ES-2020-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>ES 2020 比较好用的几个新特性</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h3 id="空值合并-（-）"><a href="#空值合并-（-）" class="headerlink" title="空值合并 （??）"></a>空值合并 （??）</h3><ul><li><p>空值合并运算符（??）是一个逻辑运算符。当左侧操作数为 null 或 undefined 时，其返回右侧的操作数。否则返回左侧的操作数。</p></li><li><p>与逻辑或（||）操作符不同，逻辑或会在左操作数为 假值（0,null,undefined,’’,NAN） 时返回右侧操作数见下面的例子.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onst foo = (null||undefined) ?? &apos;default string&apos;;</span><br><span class="line">console.log(foo);</span><br><span class="line">// expected output: &quot;default string&quot;</span><br><span class="line"></span><br><span class="line">const baz = 0||&apos;&apos;||NAN ?? 42;</span><br><span class="line">console.log(baz);</span><br><span class="line">// expected output: 0 &apos;&apos; NAN</span><br></pre></td></tr></table></figure></li></ul><h3 id="可选链式操作符-（-）"><a href="#可选链式操作符-（-）" class="headerlink" title="可选链式操作符 （?.）"></a>可选链式操作符 （?.）</h3><ul><li><p>如果访问对象上不存在的属性上的属性，使用.操作符会直接报错.</p></li><li><p>而使用可选链式操作符 ?.，如果没有值，则返回 undefined 而不是直接报错</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 如果person对象不包含profile会报错</span><br><span class="line">console.log(person.profile.name ?? &quot;Anonymous&quot;); // person.profile is undefined</span><br><span class="line">// 下面的路径是可选的，如果person对象不包含profile属性直接返回&quot;Anonymous&quot;</span><br><span class="line">console.log(person?.profile?.name ?? &quot;Anonymous&quot;);</span><br><span class="line">console.log(person?.profile?.age ?? 18);</span><br><span class="line"></span><br><span class="line">var age = user &amp;&amp; user.info &amp;&amp; user.info.getAge &amp;&amp; user.info.getAge();</span><br><span class="line">var age = user?.info?.getAge?.();</span><br></pre></td></tr></table></figure></li></ul><h3 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h3><p>JavaScript 在不同的环境获取全局对象有不同的方式，NodeJS 中通过 global, Web 中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 JavaScript 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">过去获取全局对象，可通过一个全局函数:</span><br><span class="line">var getGlobal = function () &#123;</span><br><span class="line">  if (typeof self !== &apos;undefined&apos;) &#123; return self; &#125;</span><br><span class="line">  if (typeof window !== &apos;undefined&apos;) &#123; return window; &#125;</span><br><span class="line">  if (typeof global !== &apos;undefined&apos;) &#123; return global; &#125;</span><br><span class="line">  throw new Error(&apos;unable to locate global object&apos;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">var globals = getGlobal();</span><br><span class="line"></span><br><span class="line">而限制 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis后，你可以在任意上下文，任意时刻都能获取到全局对象，不需要调用函数判断</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>热爱可抵岁月漫长</title>
      <link href="/2020/05/21/%E7%94%9F%E6%B4%BB/"/>
      <url>/2020/05/21/%E7%94%9F%E6%B4%BB/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>热爱生活<br>遍历山河<br>依然觉得人间值得</p></blockquote><p><img src="/images/life/daily/qdh1.jpg" alt="出门"><a id="more"></a></p><p>不得不说杭州确实适合生活，有酒有肉有朋友。自从来杭州，幸福感已经上了一个度。</p><p>早上八点半起床洗漱，走十分钟到办公室，</p><p>九点半开始工作，忙时敲代码，闲时听听同事吐槽昨日趣事。</p><p>下午混到三点半开始点水果喝下午茶讲黄段子。</p><p>晚上六点下班回家，偶尔忙时加加班。</p><p>周末就逗猫喝茶。</p><p><img src="/images/life/daily/cat.jpg" alt="出门"></p><p><img src="/images/life/daily/tea.jpg" alt="出门"></p><p>图来自爱喝茶爱摄影的室友。</p><p>在杭州已经一年多了，有一群可爱的90后同事和一个对生活热枕的闺蜜室友，幸福感爆棚。</p><p>公司周年，千岛湖玩耍。</p><p><img src="/images/life/daily/qdh1.jpg" alt="出门"><br><img src="/images/life/daily/qdh2.jpg" alt="出门"><br><img src="/images/life/daily/qdh3.jpg" alt="出门"></p><p>和闺蜜花花海南演唱会撞上，一人场周董演唱会。</p><p><img src="/images/life/daily/ych.jpg" alt="出门"></p><p>我家投影小6的营业日常</p><p><img src="/images/life/daily/ty1.jpg" alt="出门"><br><img src="/images/life/daily/ty2.jpg" alt="出门"></p><p>以前只是周末做饭加餐，现在已经每天做饭带去公司吃</p><p><img src="/images/life/daily/f1.jpg" alt="出门"><br><img src="/images/life/daily/f2.jpg" alt="出门"><br><img src="/images/life/daily/f3.jpg" alt="出门"></p><p>把种子放进去就能长出的花花草草</p><p><img src="/images/life/daily/flower1.jpg" alt="出门"><br><img src="/images/life/daily/flower2.jpg" alt="出门"></p><p>经历了很多，觉得日子终究是自己过的舒适才是最重要的。</p><p>看过千帆，不必苦求有人同行。</p><p>渡尽长路，不必执着有无所得。</p><p>将遇之人皆为挚友，去往之地皆为热土。</p><p>愿你遍历山河，依然觉得人间值得。</p><p>最后，谁说程序员是秃子，我有头发！！！</p><p><img src="/images/life/daily/wo.jpg" alt="出门"></p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>钉钉登录</title>
      <link href="/2020/04/27/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/"/>
      <url>/2020/04/27/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>钉钉登录</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h3 id="钉钉内部微应用免登"><a href="#钉钉内部微应用免登" class="headerlink" title="钉钉内部微应用免登"></a>钉钉内部微应用免登</h3><p>文档：<a href="https://ding-doc.dingtalk.com/doc#/dev/ep7bpq" target="_blank" rel="noopener">钉钉内部微应用免登</a></p><ul><li><p>安装 npm install dingtalk-jsapi –save</p></li><li><p>引入 import * as dd from ‘dingtalk-jsapi’;</p></li><li><p>获取微应用免登授权码，再根据code登录应用</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">export const ddLogin = ()=&gt;&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        axios.post(&apos;/api/dtalk/getDingParam&apos;).then((res)=&gt;&#123;</span><br><span class="line">            if (res.data.code == &apos;0000&apos;) &#123;</span><br><span class="line">                let corpId = res.data.data.corpId;//公司的corpId</span><br><span class="line">                dd.ready(function() &#123;</span><br><span class="line">                //获取微应用免登授权码</span><br><span class="line">                    dd.runtime.permission.requestAuthCode(&#123;</span><br><span class="line">                        corpId: corpId, // 企业id</span><br><span class="line">                        onSuccess: function (info) &#123;</span><br><span class="line">                            let code = info.code; // 通过该免登授权码可以获取用户身份</span><br><span class="line">                            // alert(code,corpId);</span><br><span class="line">                            axios(&#123;</span><br><span class="line">                                method: &apos;post&apos;,</span><br><span class="line">                                url: &apos;/api/dtalkLogin&apos;, // 路径</span><br><span class="line">                                data: &#123;</span><br><span class="line">                                    code</span><br><span class="line">                                &#125;,</span><br><span class="line">                                transformRequest: [function (data) &#123;</span><br><span class="line">                                    let ret = &apos;&apos;;</span><br><span class="line">                                    ret = qs.stringify(data);</span><br><span class="line">                                    return ret;</span><br><span class="line">                                &#125;],</span><br><span class="line">                                headers: &#123;</span><br><span class="line">                                    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;).then(res=&gt;&#123;</span><br><span class="line">                                if(res.data.code == &apos;0000&apos;)&#123;</span><br><span class="line">                                    setLocalStorage(&apos;token&apos;,res.data.data.token.token);</span><br><span class="line">                                    setLocalStorage(&quot;curl&quot;, res.data.data.permission);</span><br><span class="line">                                    setLocalStorage(&quot;grider&quot;, res.data.data.grider);</span><br><span class="line">                                    setLocalStorage(&quot;permissionDing&quot;, res.data.data.permissionDing);</span><br><span class="line">                                    setLocalStorage(&quot;level&quot;, res.data.data.level);</span><br><span class="line">                                    resolve(res.data);</span><br><span class="line">                                &#125;else&#123;</span><br><span class="line">                                    // _this.$router.go(-1);</span><br><span class="line">                                    Toast(&apos;登录失败&apos;);</span><br><span class="line">                                    location.href = localStorage.getItem(&quot;loginUrl&quot;);//登录页</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;,</span><br><span class="line">                        onFail: function (err) &#123;</span><br><span class="line">                            Toast(err.errorMessage);</span><br><span class="line">                            location.href = localStorage.getItem(&quot;loginUrl&quot;);//登录页</span><br><span class="line">                            reject();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast(&apos;登录失败&apos;);</span><br><span class="line">                location.href = localStorage.getItem(&quot;loginUrl&quot;);//登录页</span><br><span class="line">                reject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三方网站钉钉扫码登录"><a href="#第三方网站钉钉扫码登录" class="headerlink" title="第三方网站钉钉扫码登录"></a>第三方网站钉钉扫码登录</h3><p>采用官网中的方式二 ：支持网站将钉钉登录二维码内嵌到自己页面中<br>文档：<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/kymkv6/jfDu3" target="_blank" rel="noopener">第三方网站钉钉扫码登录</a></p><p>1.创建一个div，用于显示钉钉带过来的二维码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;scan_box&quot; id=&quot;scan_box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2.通过公司的appid拿到二维码，<br>用户扫码-扫码成功-跳转空白页登录应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">this.codeLogin();</span><br><span class="line">&#125;,</span><br><span class="line">codeLogin()&#123;</span><br><span class="line">            let that = this;</span><br><span class="line">            api.getQrDingParam().then(res=&gt;&#123;</span><br><span class="line">//                console.log(res);</span><br><span class="line">                if(res.code == &apos;0000&apos;)&#123;</span><br><span class="line">                    //1.调用后台接口拿到公司的appid</span><br><span class="line">                    this.appid = res.data.appId;</span><br><span class="line">                    //2.在需要使用钉钉登录的地方实例以下JS对象</span><br><span class="line">                    let obj = DDLogin(&#123;</span><br><span class="line">                        id: &apos;scan_box&apos;,</span><br><span class="line">                        goto: encodeURIComponent(&apos;https://oapi.dingtalk.com/connect/oauth2/sns_authorize?appid=&apos; + this.appid + &apos;&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri=&apos; + this.redirect_uri + &apos;&apos;),</span><br><span class="line">                        style: &apos;border:none;background-color:#FFFFFF;&apos;,</span><br><span class="line">                        width: &apos;220&apos;,</span><br><span class="line">                        height: &apos;300&apos;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    let hanndleMessage = function (event) &#123;</span><br><span class="line">                        let origin = event.origin;</span><br><span class="line">                        // 判断是否来自ddLogin扫码事件</span><br><span class="line">                        if (origin === &apos;https://login.dingtalk.com&apos;) &#123;</span><br><span class="line">                            let loginTmpCode = event.data;</span><br><span class="line">                            // 这里url不用进行urlencode编码</span><br><span class="line">                            let url = &apos;https://oapi.dingtalk.com/connect/oauth2/sns_authorize?appid=&apos; + that.appid + &apos;&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri=&apos; + that.redirect_uri + &apos;&amp;loginTmpCode=&apos; + loginTmpCode;</span><br><span class="line">                            //跳转链接到新页面</span><br><span class="line">                            window.location.href = url;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    if (typeof window.addEventListener !== &apos;undefined&apos;) &#123; // 添加事件</span><br><span class="line">                        window.addEventListener(&apos;message&apos;, hanndleMessage, false)</span><br><span class="line">                    &#125; else if (typeof window.attachEvent !== &apos;undefined&apos;) &#123;</span><br><span class="line">                        window.attachEvent(&apos;onmessage&apos;, hanndleMessage)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return this.$message.error(res.msg)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></p><p>3.新页面的代码：后台会在新页面带上code,根据code进行登录；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//登录接口</span><br><span class="line">getdd()&#123;</span><br><span class="line">        let code=getLocation().query.code;</span><br><span class="line">                api.dtalkPcQrLogin(&#123;code&#125;).then(res=&gt;&#123;</span><br><span class="line">                    if (res.code == &quot;0000&quot;) &#123;</span><br><span class="line">                        setLocalStorage(&quot;token&quot;, res.data.token.token);</span><br><span class="line">                        setLocalStorage(&quot;curl&quot;, res.data.permission);</span><br><span class="line">                        setLocalStorage(&quot;department&quot;, res.data.department);</span><br><span class="line">                        setLocalStorage(&quot;level&quot;, res.data.level);</span><br><span class="line">                        setLocalStorage(&quot;grider&quot;, res.data.grider);</span><br><span class="line">                        setLocalStorage(&quot;username&quot;, res.data.username);</span><br><span class="line">                        setLocalStorage(&quot;name&quot;, res.data.realName);</span><br><span class="line">                        setLocalStorage(&quot;permissionDing&quot;, res.data.permissionDing);</span><br><span class="line">                        document.cookie = &quot;token=&quot; + res.data.token.token;</span><br><span class="line">                        let arr = JSON.parse(res.data.permission);</span><br><span class="line">                        let item = arr[0];</span><br><span class="line">                        let child = item.child[0];</span><br><span class="line">                        if (item.url &amp;&amp; item.child.length==0) &#123;</span><br><span class="line">                            gotoGovURL(`$&#123;item.url&#125;`);</span><br><span class="line">                        &#125; else if (child) &#123;</span><br><span class="line">                            gotoGovURL(`$&#123;item.url&#125;#/$&#123;child.url&#125;`);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        this.$message(&#123;</span><br><span class="line">                            message: res.msg,</span><br><span class="line">                            type: &apos;warning&apos;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure></p><p>项目: <a href="http://lylobsysc.cet0570.com/gov/login.html#/" target="_blank" rel="noopener">登录页</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> login </category>
          
      </categories>
      
      
        <tags>
            
            <tag> login </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue单页面动态路由权限配置</title>
      <link href="/2020/03/23/vueSingleRoutePage/"/>
      <url>/2020/03/23/vueSingleRoutePage/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>vue单页面动态路由</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司最近涉及的亩均项目大多类似，打算做一个模块化亩均产品，提高代码复用性。采用的是vue-element-admin的单页面路由创建项目。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h4><p>使用的是vue-element-admin的基本模板搭建项目，具体的使用过程参考他的官方文档，本文主要介绍这个项目的权限路由验证</p><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><p>项目的路由全部在router文件夹，根据后台路由权限配置动态路由；每个模块都新建文件引入到index里。</p><p>路由分为两类：</p><ul><li><p>constantRoutes固定路由，不因角色变量改变而一直存在的路由对象，例如首页，登录页，404页面等；</p></li><li><p>asyncRoutes变动路由，有权限的路由对象，一般在登录时根据当前用户的后台权限去筛选出asyncRoutes中的路由，组成当前用户的路由权限。</p></li><li><p>注意：404页面一定要放在最后</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.在初始router时把constantRoutes固定路由塞进去</span><br><span class="line">const createRouter = () =&gt; new Router(&#123;</span><br><span class="line">  // mode: &apos;history&apos;, // require service support</span><br><span class="line">  scrollBehavior: () =&gt; (&#123; y: 0 &#125;),</span><br><span class="line">  routes: constantRoutes</span><br><span class="line">&#125;)</span><br><span class="line">2.在登陆成功时通过addRoutes动态添加路由</span><br><span class="line">//accessRoutes-筛选后的路由权限</span><br><span class="line">router.addRoutes(accessRoutes)</span><br></pre></td></tr></table></figure><h4 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h4><p>1.在router.beforeEach中做路由权限验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(async(to, from, next) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  NProgress.start()</span><br><span class="line">  const hasToken = getToken()</span><br><span class="line"></span><br><span class="line">  if (hasToken) &#123;</span><br><span class="line">    if (to.path === &apos;/login&apos;) &#123;</span><br><span class="line">      </span><br><span class="line">      next(&#123; path: &apos;/&apos; &#125;)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const hasRoles = store.getters.roles &amp;&amp; store.getters.roles.length &gt; 0</span><br><span class="line">      if (hasRoles) &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          //获取用户基本信息</span><br><span class="line">          const &#123; roles &#125; = await store.dispatch(&apos;user/getInfo&apos;)</span><br><span class="line">          </span><br><span class="line">          // 获取动态路由权限</span><br><span class="line">          const accessRoutes = await store.dispatch(&apos;permission/generateRoutes&apos;, roles)</span><br><span class="line">          </span><br><span class="line">          //通过router.addRoutes给设置动态路由</span><br><span class="line">          router.addRoutes(accessRoutes)</span><br><span class="line">          next(&#123; ...to, replace: true &#125;)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">          await store.dispatch(&apos;user/resetToken&apos;)</span><br><span class="line">          Message.error(error || &apos;Has Error&apos;)</span><br><span class="line">          next(`/login?redirect=$&#123;to.path&#125;`)</span><br><span class="line">          NProgress.done()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if (whiteList.indexOf(to.path) !== -1) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(`/login?redirect=$&#123;to.path&#125;`)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>2.获取动态路由权限 :在store的permission/generateRoutes中</p><p>项目的原方案（方案一）是通过roles[admin,editor]字段和本地写的router配置的route.meta.roles匹配来筛选出动态路由；但是这种方式不满足公司角色很多的情况，所以我改造了一下，根据不同角色返回权限列表筛选出动态路由（方案二）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">import &#123; asyncRoutes, constantRoutes &#125; from &apos;@/router&apos;</span><br><span class="line">import &#123; getUserMenu,getMenuList &#125; from &quot;@/api/organization/permission&quot;;</span><br><span class="line">// asyncRoutes 前台需要获取权限的总路由</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Use meta.role to determine if the current user has permission</span><br><span class="line"> * @param roles</span><br><span class="line"> * @param route</span><br><span class="line"> */</span><br><span class="line">function hasPermission(roles, route) &#123;</span><br><span class="line">  if (route.meta &amp;&amp; route.meta.roles) &#123;</span><br><span class="line">    return roles.some(role =&gt; route.meta.roles.includes(role))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Filter asynchronous routing tables by recursion</span><br><span class="line"> * @param routes asyncRoutes</span><br><span class="line"> * @param roles</span><br><span class="line"> */</span><br><span class="line">export function filterAsyncRoutes(routes, roles) &#123;</span><br><span class="line">  const res = []</span><br><span class="line"></span><br><span class="line">  routes.forEach(route =&gt; &#123;</span><br><span class="line">    const tmp = &#123; ...route &#125;</span><br><span class="line">    if (hasPermission(roles, tmp)) &#123;</span><br><span class="line">      if (tmp.children) &#123;</span><br><span class="line">        tmp.children = filterAsyncRoutes(tmp.children, roles)</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//方案二</span><br><span class="line">export function filterAsyncRoutes2(menuList, asyncRoutes) &#123;</span><br><span class="line">  const res = []</span><br><span class="line">  menuList.forEach(route =&gt; &#123;</span><br><span class="line">    const tmp = &#123; ...route &#125;</span><br><span class="line">    let currentAsyn = asyncRoutes.find((v)=&gt;&#123;</span><br><span class="line">      return tmp.href == v.path</span><br><span class="line">    &#125;)</span><br><span class="line">    // console.log(tmp,currentAsyn);</span><br><span class="line">    if (currentAsyn) &#123;</span><br><span class="line">      if (tmp.sonMenu) &#123;</span><br><span class="line">        tmp.sonMenu = filterAsyncRoutes2(tmp.sonMenu,currentAsyn.sonMenu||[])</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(currentAsyn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  //404页面 必须再动态路由最后面加上</span><br><span class="line">  res.push(&#123; path: &apos;*&apos;, redirect: &apos;/404&apos;, hidden: true &#125;)</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const state = &#123;</span><br><span class="line">  routes: [],</span><br><span class="line">  appHeaderRoutes:[],//头部应用的路由列表 - 用于头部切换应用</span><br><span class="line">  currentRoute: &apos;&apos;,//当前应用名 - 用于筛选当前应用的路由对象</span><br><span class="line">  addRoutes: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">  SET_ROUTES: (state, routes) =&gt; &#123;</span><br><span class="line">    //constantRoutes-固定存在的路由  addRoutes- （过滤权限后的后台路由）</span><br><span class="line">    state.addRoutes = routes;</span><br><span class="line">    state.routes = constantRoutes.concat(routes)</span><br><span class="line">  &#125;,</span><br><span class="line">  SET_CURRENTROUTE: (state, name) =&gt; &#123;</span><br><span class="line">    state.currentRoute = name;</span><br><span class="line">  &#125;,</span><br><span class="line">  SET_APPHEADERROUTES:(state, routes) =&gt; &#123;</span><br><span class="line">    state.appHeaderRoutes = routes;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const actions = &#123;</span><br><span class="line">  setCurrentRoue(&#123;commit&#125;,item)&#123;</span><br><span class="line">    commit(&apos;SET_CURRENTROUTE&apos;, item.name)</span><br><span class="line">    let &#123;origin,pathname&#125; =  window.location;</span><br><span class="line">    window.location.href = `$&#123;origin&#125;$&#123;pathname&#125;#$&#123;item.href&#125;`</span><br><span class="line">  &#125;,</span><br><span class="line">  generateRoutes(&#123; commit &#125;, roles) &#123;</span><br><span class="line">    /**方案1.</span><br><span class="line">     * 根据roles(角色的列表) 过滤出动态路由 - 原方案</span><br><span class="line">     * */</span><br><span class="line">    // return new Promise(resolve =&gt; &#123;</span><br><span class="line">    //   let accessedRoutes;</span><br><span class="line">    //   if (roles.includes(&apos;admin&apos;)) &#123; //管理员可以看全部的asyncRoutes</span><br><span class="line">    //     accessedRoutes = asyncRoutes || []</span><br><span class="line">    //   &#125; else &#123; //其他成员只能看过滤权限后的</span><br><span class="line">    //     accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)</span><br><span class="line">    //   &#125;</span><br><span class="line">    //   //设置当前应用平台名 - 可拿到当前的路由对象</span><br><span class="line">    //   let name = accessedRoutes.length&gt;0 ? accessedRoutes[0].meta.title : &apos;系统设置&apos;;</span><br><span class="line">    //   commit(&apos;SET_ROUTES&apos;, accessedRoutes)</span><br><span class="line">    //   commit(&apos;SET_CURRENTROUTE&apos;,name)</span><br><span class="line">    //   resolve(accessedRoutes)</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 方案2.-现在使用</span><br><span class="line">     * 后台根据不同角色返回权限列表 </span><br><span class="line">     * 前端再与asyncRoutes对比，过滤出本用户可查看的菜单权限accessedRoutes</span><br><span class="line">     * 再返回给addRoutes ；再通过router.addRoutes(accessRoutes)动态添加进router</span><br><span class="line">     * */</span><br><span class="line">    return new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">      getUserMenu().then(response =&gt; &#123;</span><br><span class="line">        let res = response.data;</span><br><span class="line">        let menuList = [], accessedRoutes = [];</span><br><span class="line">        if (res.code == &quot;000000&quot;) &#123;</span><br><span class="line">          menuList = res.data || [];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          menuList = [];</span><br><span class="line">        &#125;</span><br><span class="line">        //设置头部应用的路由列表</span><br><span class="line">        commit(&apos;SET_APPHEADERROUTES&apos;, menuList);</span><br><span class="line">        //过滤出文件夹以外的菜单列表（二维变一维数组）</span><br><span class="line">        let menus = menuList.reduce((prev, cur, index) =&gt; &#123;</span><br><span class="line">          if (cur.sonMenu &amp;&amp; cur.sonMenu.length &gt; 0) &#123;</span><br><span class="line">            return prev.concat(cur.sonMenu);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            return prev.concat([]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, [], 0);</span><br><span class="line">        // console.log(menus);</span><br><span class="line">        accessedRoutes = filterAsyncRoutes2(menus, asyncRoutes);</span><br><span class="line">        //设置当前应用平台名 - 可拿到当前的路由对象</span><br><span class="line">        let name = accessedRoutes.length &gt; 0 ? accessedRoutes[0].meta.title : &apos;系统设置&apos;;</span><br><span class="line">        let item = accessedRoutes.length &gt; 0 ? accessedRoutes[0] :&#123;&#125;</span><br><span class="line">        commit(&apos;SET_ROUTES&apos;, accessedRoutes)</span><br><span class="line">        commit(&apos;SET_CURRENTROUTE&apos;, name)</span><br><span class="line">        resolve(accessedRoutes)</span><br><span class="line">      &#125;).catch(error =&gt; &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/images/vue/vue-router-page.png" alt=""><br>切换头部应用台菜单的时候 左侧菜单栏会相应改变；当前用户的路由权限通过filterAsyncRoutes2来筛选。</p><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/" target="_blank" rel="noopener">vue-element-admin官方文档</a></p><p><a href="https://github.com/chenjing123456/vue-singe-frame" target="_blank" rel="noopener">项目完整代码</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> vue-router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>element-ui 组件使用</title>
      <link href="/2020/02/26/element/"/>
      <url>/2020/02/26/element/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>element-ui 组件</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h3 id="自动搜索-autocomplete"><a href="#自动搜索-autocomplete" class="headerlink" title="自动搜索 autocomplete"></a>自动搜索 autocomplete</h3><ul><li><p>远程搜索 属性fetch-suggestions（从服务器获取数据）</p><p>功能：搜索企业名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1.设置:fetch-suggestions</span><br><span class="line">&lt;el-autocomplete</span><br><span class="line">     v-model=&quot;defaultObj.entName&quot;</span><br><span class="line">     class=&quot;gov-input&quot;</span><br><span class="line">     :fetch-suggestions=&quot;querySearchAsync&quot;</span><br><span class="line">     value-key=&quot;entName&quot;</span><br><span class="line">     placeholder=&quot;请搜索&quot;</span><br><span class="line">     @select=&quot;handleSelect&quot;</span><br><span class="line">&gt;&lt;/el-autocomplete&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  //2.远程搜索方法</span><br><span class="line">   querySearchAsync(queryString,cb)&#123;</span><br><span class="line">        queryString ? this.fuzzySearchEnt(queryString).then((results)=&gt;&#123;</span><br><span class="line">       cb(results);</span><br><span class="line">      &#125;) : [];</span><br><span class="line">   &#125;,</span><br><span class="line">   //后台接口-根据entName搜索企业</span><br><span class="line">   async fuzzySearchEnt(queryString)&#123;</span><br><span class="line">    let results = await new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        fuzzySearchEnt(&#123;entName:queryString&#125;).then((res)=&gt;&#123;</span><br><span class="line">          if(res.code==&apos;0000&apos;)&#123;</span><br><span class="line">            resolve(res.data.results||[])</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            this.$message.error(res.msg);</span><br><span class="line">            reject()</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return results;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="时间选择器-date-picker"><a href="#时间选择器-date-picker" class="headerlink" title="时间选择器 date-picker"></a>时间选择器 date-picker</h3><ul><li>开始时间不限制，结束时间不小于当前时间；开始时间小于结束时间。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">  &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;公示日期&quot; prop=&quot;publicityTimeStart&quot;&gt;</span><br><span class="line">      &lt;el-date-picker clearable :type=&quot;dateType&quot; placeholder=&quot;选择开始时间&quot; :format=&quot;dateFormat&quot; :value-format=&quot;dateFormat&quot; v-model=&quot;ruleForm.publicityTimeStart&quot; :picker-options=&quot;pickerOptions0&quot; style=&quot;width: 100%;&quot;&gt; &lt;/el-date-picker&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">  &lt;el-col class=&quot;line&quot; style=&quot;text-align:center&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;</span><br><span class="line">  &lt;el-col :span=&quot;10&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;&quot; prop=&quot;publicityTimeEnd&quot; class=&quot;publicityTimeEnd&quot;&gt;</span><br><span class="line">      &lt;el-date-picker :type=&quot;dateType&quot; placeholder=&quot;选择结束时间&quot; :format=&quot;dateFormat&quot; :value-format=&quot;dateFormat&quot; v-model=&quot;ruleForm.publicityTimeEnd&quot; :picker-options=&quot;pickerOptions1&quot; style=&quot;width: 100%;&quot; clearable&gt; &lt;/el-date-picker&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">export default class ConfirmDialog extends Vue &#123;</span><br><span class="line">  dateFormat: string = &apos;yyyy-MM-dd&apos;;</span><br><span class="line">  dateType: string = &apos;date&apos;;</span><br><span class="line">  ruleForm: &#123; publicityTimeStart: string; publicityTimeEnd: string; title: string; content: string; id: any &#125; = &#123;</span><br><span class="line">    id: null,</span><br><span class="line">    title: &apos;&apos;,</span><br><span class="line">    content: &apos;&apos;,</span><br><span class="line">    publicityTimeStart: &apos;&apos;,</span><br><span class="line">    publicityTimeEnd: &apos;&apos;,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  //pickerOptions:&#123;</span><br><span class="line">    // 此处调用this this的指向不是vue实例 而是undefined</span><br><span class="line">   // disabledDate()&#123;&#125;</span><br><span class="line">  //&#125;</span><br><span class="line">  get pickerOptions0() &#123;</span><br><span class="line">    //用计算属性解决this指向问题</span><br><span class="line">    let that = this;</span><br><span class="line">    return &#123;</span><br><span class="line">      disabledDate: (time) =&gt; &#123;</span><br><span class="line">        let endDateVal = new Date(that.ruleForm.publicityTimeEnd).getTime();</span><br><span class="line">        if (endDateVal) &#123;</span><br><span class="line">          return time.getTime() &gt; endDateVal - 8.64e7;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get pickerOptions1() &#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    return &#123;</span><br><span class="line">      disabledDate(time) &#123;</span><br><span class="line">        let beginDateVal = new Date(that.ruleForm.publicityTimeStart).getTime();</span><br><span class="line">        if (beginDateVal) &#123;</span><br><span class="line">          // 等于的时候是临界值00:00:00  一天= 8.64e7毫秒</span><br><span class="line">          if (beginDateVal &lt; Date.now()) &#123;</span><br><span class="line">            return time.getTime() &lt; Date.now();</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            return time.getTime() &lt; beginDateVal;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return time.getTime() &lt; Date.now();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="级联选择器-cascader"><a href="#级联选择器-cascader" class="headerlink" title="级联选择器 cascader"></a>级联选择器 cascader</h3><ul><li><p>动态加载 属性lazyLoad</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    return &#123;</span><br><span class="line">    //1.设置在props设置lazy和lazyLoad属性</span><br><span class="line">        addProps: &#123;</span><br><span class="line">        lazy: true,</span><br><span class="line">        value: &quot;code&quot;,</span><br><span class="line">        children: &quot;childList&quot;,</span><br><span class="line">        label: &quot;name&quot;,</span><br><span class="line">        lazyLoad(node, resolve) &#123;</span><br><span class="line">          const &#123; level &#125; = node;</span><br><span class="line">          if (level === 0) &#123;//一级</span><br><span class="line">            that.queryRegions(0, resolve) </span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            that.queryRegions(node, resolve);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">** 注意点：动态加载级联选择框时，如果有默认选中的需求，emitPath必须为true,既v-model绑定数组并且checkStrictly: true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">methods:()&#123;</span><br><span class="line">// 调用后台接口，根据父级的code获取子集，若是一级parentCode传0 </span><br><span class="line">    queryRegions(node, resolve) &#123;</span><br><span class="line">      let parentCode = node ? node.data.code : 0;</span><br><span class="line">      queryRegions(&#123; parentCode &#125;).then(res =&gt; &#123;</span><br><span class="line">        let &#123; code, data &#125; = res.data;</span><br><span class="line">        if (code == &quot;000000&quot; &amp;&amp; data) &#123;</span><br><span class="line">          resolve(data);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          resolve([]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>远程搜索 filterable-method</p></li><li><p>多选并且只能选中最后一级 disabled属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  &lt;el-cascader</span><br><span class="line">  :options=&quot;industry&quot;</span><br><span class="line">  :props=&quot;&#123;</span><br><span class="line">    label: &quot;name&quot;,</span><br><span class="line">    children: &quot;child&quot;,</span><br><span class="line">    value: &quot;name&quot;,</span><br><span class="line">    checkStrictly: true,</span><br><span class="line">    emitPath: false,</span><br><span class="line">    multiple: true,</span><br><span class="line">    &#125;&quot;</span><br><span class="line">  :show-all-levels=&quot;false&quot;</span><br><span class="line">  popper-class=&quot;cascaderIndustry&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;/el-cascader&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.设置除最后一项其余的disabled属性都不可选的方法</span><br><span class="line">/**</span><br><span class="line"> * @description 数组嵌套 级联数据设置disabled，最后一项数据设置可选,其余为不可选</span><br><span class="line"> * @author xiaomeng</span><br><span class="line"> * @param &#123;String&#125; childStr 数组的每个数据项里用来接收children的字段</span><br><span class="line"> * @param &#123;Array&#125; arr 要处理的源数组</span><br><span class="line"> * @return &#123;Array&#125; 返回处理后的数组</span><br><span class="line"> */</span><br><span class="line">export const handleChildDisAbled = (arr, childStr) =&gt; &#123;</span><br><span class="line">  const handledArr = arr.map(item =&gt; &#123;</span><br><span class="line">    if (!item[childStr] || item[childStr].length === 0) &#123;</span><br><span class="line">      item[childStr] = null</span><br><span class="line">      item[&apos;disabled&apos;] = false</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const childArr = handleChildDisAbled(item[childStr], childStr)</span><br><span class="line">      item[childStr] = childArr</span><br><span class="line">      item[&apos;disabled&apos;] = true</span><br><span class="line">    &#125;</span><br><span class="line">    return item</span><br><span class="line">  &#125;)</span><br><span class="line">  return handledArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2. this.industry = handleChildDisAbled(data,&apos;child&apos;)</span><br><span class="line"></span><br><span class="line">3.设置样式，除最后一级之外，其余的多选框都隐藏</span><br><span class="line"></span><br><span class="line">//适用行业</span><br><span class="line">.cascaderIndustry &#123;</span><br><span class="line">  .el-checkbox__input.is-disabled .el-checkbox__inner &#123;</span><br><span class="line">    display: none !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>disabled属性<br>需求：后台菜单可配置，在配置某菜单的上级菜单时，要求该菜单的上级菜单不能选中某菜单本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-cascader</span><br><span class="line">  :options=&quot;[&#123;id:0,name:&apos;root&apos;&#125;,...menuList]&quot;</span><br><span class="line">  v-model=&quot;menuItem.parentId&quot;</span><br><span class="line">  :show-all-levels=&quot;false&quot;</span><br><span class="line">  :props=&quot;props&quot;</span><br><span class="line">  clearable</span><br><span class="line">&gt;&lt;/el-cascader&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    menuList:[],//菜单列表</span><br><span class="line">    value: &apos;id&apos;,</span><br><span class="line">        checkStrictly: true, // 设置父子菜单不相互关联， 确保当前此菜单不可选，但是此菜单的子菜单可以选择</span><br><span class="line">        label: &apos;name&apos;,</span><br><span class="line">        children: &apos;sonMenu&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * @description 设置当前菜单不可选中项 （上级菜单不可为本身）</span><br><span class="line">  * @param &#123;Array&#125; list 菜单列表</span><br><span class="line">  */</span><br><span class="line">setDisAbled(list) &#123;</span><br><span class="line">  let parentId = this.menuItem.id</span><br><span class="line">  for (var i = 0; i &lt;= list.length - 1; i++) &#123;</span><br><span class="line">    if (list[i].id === parentId) &#123;</span><br><span class="line">      list[i].disabled = true</span><br><span class="line">      break</span><br><span class="line">    &#125;</span><br><span class="line">    if (list[i].sonMenu &amp;&amp; list[i].sonMenu.length &gt; 0) &#123;</span><br><span class="line">      this.setDisAbled(list[i].sonMenu)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.setDisAbled(this.menuList) //调用即可改变menuList的不可选项配置</span><br></pre></td></tr></table></figure><p><img src="/images/vue/disabled-cas.png" alt="目录"></p></li></ul><h3 id="表格全选问题-el-table"><a href="#表格全选问题-el-table" class="headerlink" title="表格全选问题 el-table"></a>表格全选问题 el-table</h3><p>需求：要求全选时选中同一个工作流的数据</p><ul><li><p>vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;ctable&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      ref=&quot;multipleTable&quot;</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      @select-all=&quot;selectAll&quot;</span><br><span class="line">      @select=&quot;handleSelectionChange&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot; :selectable=&quot;selectable&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;流程名称&quot; width=&quot;180&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;div</span><br><span class="line">            class=&quot;processName&quot;</span><br><span class="line">            :title=&quot;scope.row.processName&quot;</span><br><span class="line">            @click=&quot;gotoDetail(scope.row)&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;&#123; scope.row.processName &#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/section&gt;</span><br></pre></td></tr></table></figure></li><li><p>data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 手动勾选数据行的 Checkbox 时触发的事件</span><br><span class="line">handleSelectionChange(val) &#123;</span><br><span class="line">  this.multipleSelection = val;</span><br><span class="line">&#125;,</span><br><span class="line">// 全选点击事件</span><br><span class="line">selectAll(val) &#123;</span><br><span class="line">  const that = this;</span><br><span class="line">  if (this.tableData.length === 1) &#123;</span><br><span class="line">    this.multipleSelection = val;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const len = this.multipleSelection.length;</span><br><span class="line">  // 没有选中项</span><br><span class="line">  if (len === 0) &#123;</span><br><span class="line">    const item = this.tableData[0];</span><br><span class="line">    const filterList = this.tableData.filter(</span><br><span class="line">      v =&gt; v.processDefinitionId === item.processDefinitionId</span><br><span class="line">    );</span><br><span class="line">    // 所有数据不在同一工作流</span><br><span class="line">    if (filterList &amp;&amp; filterList.length !== this.tableData.length) &#123;</span><br><span class="line">      this.$warnMsg(&apos;只有数据都属于同一个工作流，才能全选&apos;);</span><br><span class="line">      this.multipleSelection = [];</span><br><span class="line">      this.$refs.multipleTable.clearSelection();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this.multipleSelection = [...this.tableData];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 有选中项</span><br><span class="line">    const currentItem = this.multipleSelection[0];</span><br><span class="line">    const filterCurrList = this.tableData.filter(</span><br><span class="line">      v =&gt; v.processDefinitionId === currentItem.processDefinitionId</span><br><span class="line">    );</span><br><span class="line">    // 选中项 === 可以被选中项（processDefinitionId相同的） --&gt;相当于取消全选操作</span><br><span class="line">    if (filterCurrList.length === len) &#123;</span><br><span class="line">      this.multipleSelection = [];</span><br><span class="line">      this.$refs.multipleTable.clearSelection();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 选中项 !== 可以被选中项   --&gt;相当于全选操作（把所有可以被选中项 勾选）</span><br><span class="line">      filterCurrList.forEach(row =&gt; &#123;</span><br><span class="line">        that.$refs.multipleTable.setCurrentRow(row);</span><br><span class="line">      &#125;);</span><br><span class="line">      this.multipleSelection = [...filterCurrList];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // console.log(this.multipleSelection, &apos;finally&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">selectable(row) &#123;</span><br><span class="line">  //默认没有选中项，是全部都可以选中；如果已经有选中项时，则只有processDefinitionId相同的才能被选中。</span><br><span class="line">  if (</span><br><span class="line">    this.multipleSelection.length &gt; 0 &amp;&amp;</span><br><span class="line">    row.processDefinitionId !==</span><br><span class="line">      this.multipleSelection[0].processDefinitionId</span><br><span class="line">  ) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="无限滚动-InfiniteScroll"><a href="#无限滚动-InfiniteScroll" class="headerlink" title="无限滚动 InfiniteScroll"></a>无限滚动 InfiniteScroll</h3><p>调用后台使用步骤：</p><ul><li><p>vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;info-list&quot; v-infinite-scroll=&quot;load&quot; infinite-scroll-disabled=&quot;disabled&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;info-item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot; @click=&quot;gotoDetail(item)&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;info-left&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;info-left-h&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;entName&quot;&gt;&#123;&#123;item.entName&#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;span class=&quot;creditCode&quot;&gt;&#123;&#123;item.creditCode&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;info-left-b&quot;&gt;</span><br><span class="line">              &lt;span&gt;注册地址：&lt;/span&gt;</span><br><span class="line">              &lt;span class=&quot;add&quot;&gt;&#123;&#123;item.address&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;info-right&quot;&gt;</span><br><span class="line">            &lt;span&gt;审核状态&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;status&quot;&gt;&#123;&#123;item.flowStatus&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div v-if=&quot;loading&quot; class=&quot;loading&quot;&gt;</span><br><span class="line">          &lt;span&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div v-if=&quot;noMore&quot; class=&quot;data-text&quot;&gt;没有更多了&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      属性 ：</span><br><span class="line">      v-infinite-scroll表示滚动加载</span><br><span class="line">      infinite-scroll-disabled是否禁用（起始页数大于等于总页数时停止加载）</span><br></pre></td></tr></table></figure></li><li><p>data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">      loading: false,//加载中</span><br><span class="line">      count: 1,//页数</span><br><span class="line">      totalPages: 0,//总页数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    noMore() &#123;</span><br><span class="line">      //当起始页数大于总页数时停止加载</span><br><span class="line">      return this.count &gt;= this.totalPages;</span><br><span class="line">    &#125;,</span><br><span class="line">    disabled() &#123;</span><br><span class="line">      return this.loading || this.noMore;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getList(1);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>methods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">methods：&#123;</span><br><span class="line">// 分页查询待审核的直报</span><br><span class="line">  getList(pageNum) &#123;</span><br><span class="line">    if (pageNum) &#123;</span><br><span class="line">      this.count = 1;</span><br><span class="line">      this.list = [];</span><br><span class="line">    &#125;</span><br><span class="line">    let &#123; flowStatus, keyword, town &#125; = this.conditions;</span><br><span class="line">    if (flowStatus == &quot;全部&quot;) flowStatus = &quot;&quot;;</span><br><span class="line">    let params = &#123;</span><br><span class="line">      pageNum: this.count,</span><br><span class="line">      pageSize: 6, //每页查询条数</span><br><span class="line">      flowStatus,</span><br><span class="line">      keyword,</span><br><span class="line">      town</span><br><span class="line">    &#125;;</span><br><span class="line">    describeAuditEntCheckDataByPage(params).then(response =&gt; &#123;</span><br><span class="line">      let &#123; data, code &#125; = response;</span><br><span class="line">      this.list = this.list.concat(data.results); //因为每次后端返回的都是数组，所以这边把数组拼接到一起</span><br><span class="line">      this.total = data.totalRecord; //总数</span><br><span class="line">      this.totalPages = data.totalPage; //总页数</span><br><span class="line">      this.loading = false;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  load() &#123;</span><br><span class="line">    //滑到底部时进行加载</span><br><span class="line">    this.loading = true;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.count += 1; //页数+1</span><br><span class="line">      this.getList(); //调用接口，此时页数+1，查询下一页数据</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="上传组件-upload"><a href="#上传组件-upload" class="headerlink" title="上传组件 upload"></a>上传组件 upload</h3><ul><li><p>手动上传 http-request方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">//功能：上传文件</span><br><span class="line">//1:vue</span><br><span class="line">&lt;el-upload</span><br><span class="line">            class=&quot;upload-demo&quot;</span><br><span class="line">            ref=&quot;upload&quot;</span><br><span class="line">            drag</span><br><span class="line">            :show-file-list=&quot;false&quot;</span><br><span class="line">            :limit=&quot;1&quot;</span><br><span class="line">            :file-list=&quot;fileList&quot;</span><br><span class="line">            :http-request=&quot;httpRequest&quot;</span><br><span class="line">            action=&quot;#&quot;</span><br><span class="line">            accept=&quot;.xls, .xlsx&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;div class=&quot;preview&quot;&gt;</span><br><span class="line">              &lt;div</span><br><span class="line">                class=&quot;fail_icon&quot;</span><br><span class="line">                v-bind:key=&quot;jobnumberKey&quot;</span><br><span class="line">                v-if=&quot;uploadStatus == &apos;fail&apos;&amp;&amp;isShowText&quot;</span><br><span class="line">                @click.stop=&quot;shuan()&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;i class=&quot;el-icon-circle-close&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;span&gt;上传失败&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div</span><br><span class="line">                class=&quot;success_icon&quot;</span><br><span class="line">                v-bind:key=&quot;jobnumberKey&quot;</span><br><span class="line">                v-if=&quot;uploadStatus == &apos;success&apos;&amp;&amp;isShowText&quot;</span><br><span class="line">                @click.stop=&quot;shuan()&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;i class=&quot;el-icon-circle-check&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;span&gt;上传成功&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;i</span><br><span class="line">                :class=&quot;[&apos;iconfont&apos;, &apos;iconyulan&apos;,isPreview?&apos;isPreview&apos;:&apos;&apos;]&quot;</span><br><span class="line">                @click.stop=&quot;previewOnHtml&quot;</span><br><span class="line">              &gt;&lt;/i&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;wait&apos;&quot; class=&quot;wait&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconshangchuanwenjian&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;status_cen&quot;&gt;将文件拖拽至此&lt;/span&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  或</span><br><span class="line">                  &lt;span style=&quot;color:#0091FF&quot;&gt;点击上传&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;success&apos;&quot; class=&quot;success&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconexcelbiaodan&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;status_cen&quot;&gt;&#123;&#123;fileName&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  &lt;span style=&quot;color:#0091FF&quot;&gt;重新上传&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;uploading&apos;&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconexcelbiaodan&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;el-progress class=&quot;progress&quot; :show-text=&quot;false&quot; :percentage=&quot;progressPercent&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  &lt;span&gt;正在上传...&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;fail&apos;&quot; class=&quot;fail&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconexcelbiaodan fail_icon&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;status_cen&quot;&gt;&#123;&#123;fileName&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  &lt;span style=&quot;color:#0091FF&quot;&gt;重新上传&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;</span><br><span class="line">              &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(item) in tips&quot; :key=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//2.data</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        jobnumberKey: +new Date(),</span><br><span class="line">        uploadStatus: &quot;wait&quot;,</span><br><span class="line">        isShowText: false,</span><br><span class="line">        progressPercent: 0,//上传进度</span><br><span class="line">        fileName:&quot;&quot;,</span><br><span class="line">        fileList:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//3.methods</span><br><span class="line">  methods:&#123;</span><br><span class="line">    //上传失败-刷新</span><br><span class="line">    shuan() &#123;</span><br><span class="line">      this.isShowText = false;</span><br><span class="line">      this.jobnumberKey = +new Date(); //强制刷新</span><br><span class="line">    &#125;,</span><br><span class="line">    // config 是自带参数。 this.$refs.upload.submit() 会自动调用 httpRequest方法.在里面取得file</span><br><span class="line">    httpRequest(file) &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      that.uploadStatus = &quot;uploading&quot;; //上传中</span><br><span class="line">      let fd = new FormData();</span><br><span class="line">      let fileObj = file.file;</span><br><span class="line">      fd.append(&quot;file&quot;, fileObj);</span><br><span class="line">      fd.append(&quot;labelId&quot;, this.labelId);</span><br><span class="line">      fd.append(&quot;updateType&quot;, this.updateType);</span><br><span class="line">      that.fileName = file.file.name;</span><br><span class="line">      const config = &#123;</span><br><span class="line">        headers: &#123; Authorization: this.token &#125;,</span><br><span class="line">        onUploadProgress: progressEvent =&gt; &#123;</span><br><span class="line">          // progressEvent.loaded:已上传文件大小</span><br><span class="line">          // progressEvent.total:被上传文件的总大小</span><br><span class="line">          this.progressPercent = Number(</span><br><span class="line">            ((progressEvent.loaded / progressEvent.total) * 100).toFixed(2)</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">     //调用后台上传方法</span><br><span class="line">     uploadLabelFile(fd, config)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          if (res.code === &quot;000000&quot;) &#123;</span><br><span class="line">            that.uploadStatus = &quot;success&quot;;</span><br><span class="line">            that.fileId = res.data;</span><br><span class="line">            that.fileList = [];</span><br><span class="line">            that.isPreview = true;</span><br><span class="line">            that.isShowText = true;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            that.uploadStatus = &quot;fail&quot;;</span><br><span class="line">            that.fileList = [];</span><br><span class="line">            that.isPreview = false;</span><br><span class="line">            that.isShowText = true;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(res =&gt; &#123;</span><br><span class="line">          that.uploadStatus = &quot;fail&quot;;</span><br><span class="line">          that.fileList = [];</span><br><span class="line">          that.isPreview = false;</span><br><span class="line">          that.isShowText = true;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>上传组件在表单验证时的必填项的验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  //设置prop属性</span><br><span class="line">  &lt;el-form-item prop=&quot;attachmentList&quot; label=&quot;租赁合同：&quot; required&gt;</span><br><span class="line">  &lt;el-upload</span><br><span class="line">    action=&quot;/api/ent/file/upload&quot;</span><br><span class="line">    list-type=&quot;picture-card&quot;</span><br><span class="line">    accept=&quot;.jpg, .png, .jpeg&quot;</span><br><span class="line">    :on-remove=&quot;(file,fileList)=&gt;handleRemove(file,fileList,&apos;in&apos;)&quot;</span><br><span class="line">    :file-list=&quot;rentInItem.attachmentList&quot;</span><br><span class="line">    :on-success=&quot;(data)=&gt;uploadSuccess(data,&apos;in&apos;)&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  //设置自定义的验证方式</span><br><span class="line">var validatorRentImg = (rule, value, callback) =&gt; &#123;</span><br><span class="line">    if (value.length === 0) &#123;</span><br><span class="line">      callback(new Error(&quot;请上传租赁合同&quot;));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  return &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      attachmentList: [&#123; validator: validatorRentImg, trigger: &quot;change&quot; &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    rentInItem: &#123;</span><br><span class="line">      lessor: &quot;&quot;,</span><br><span class="line">      lessorCreditCode: &quot;&quot;,</span><br><span class="line">      lessorEntType: &quot;&quot;,</span><br><span class="line">      areaOfInLand: &quot;&quot;,</span><br><span class="line">      rentPeriod: &quot;&quot;,</span><br><span class="line">      attachmentList: []</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> element </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端编码规范</title>
      <link href="/2020/01/29/web-rules/"/>
      <url>/2020/01/29/web-rules/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>了解前端编码规范</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="一般代码规范"><a href="#一般代码规范" class="headerlink" title="一般代码规范"></a>一般代码规范</h2><p>1.文件/资源命名：在 web 项目中，所有的文件名应该都遵循同一命名约定。</p><ul><li><p>减号（-）是用来分隔文件名</p></li><li><p>确保文件命名总是以字母开头而不是数字</p></li><li><p>资源的字母名称必须全为小写</p></li><li><p>对文件增加前后缀或特定的扩展名时，建议使用点分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my-script.js</span><br><span class="line">my-camel-case-name.css</span><br><span class="line">i-love-underscores.html</span><br><span class="line">thousand-and-one-scripts.js</span><br><span class="line">my-file.min.css</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>协议</p><ul><li>不要指定引入资源所带的具体协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当引入图片或其他媒体文件，还有样式和脚本时，URLs 所指向的具体路径，不要指定协议部分（http:, https:），除非这两者协议都不可用</span><br><span class="line">&lt;script src=&quot;http://cdn.com/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">而可采用这种方式&lt;script src=&quot;//cdn.com/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">.example &#123;</span><br><span class="line">    &lt;!-- background: url(http://static.example.com/images/bg.jpg); --&gt;</span><br><span class="line">    background: url(//static.example.com/images/bg.jpg);采用下面这种</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注释</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 筛选条件</span><br><span class="line"> * @param &#123;Number&#125; dataYear - 年份</span><br><span class="line"> * @author xiaomeng</span><br><span class="line"> * @constructor - 构造函数声明注释</span><br><span class="line"> * @returns &#123;string|*&#125; 返回值注释</span><br><span class="line"> * @example 示例注释</span><br><span class="line"> * @date 2017年12月05日17:22:43</span><br><span class="line"> * @version 当前代码的版本</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p>文本缩进<br> 一次缩进两个空格</p></li><li><p>代码检查<br> 严格遵循编码规范和格式化风格指南</p></li></ol><h2 id="Vue代码规范"><a href="#Vue代码规范" class="headerlink" title="Vue代码规范"></a>Vue代码规范</h2><p>官方给定风格指南分为四个等级的类型，来推荐用户使用相对规范的写法避免出现错误。</p><h3 id="优先级-A-的规则：必要的-规避错误"><a href="#优先级-A-的规则：必要的-规避错误" class="headerlink" title="优先级 A 的规则：必要的 (规避错误)"></a>优先级 A 的规则：必要的 (规避错误)</h3><ul><li><p>组件名为多个单词<br>组件名应该始终是多个单词的，根组件 App 以及 <transition>、<component> 之类的 Vue 内置组件除外。避免跟现有的以及未来的 HTML 元素相冲突。</component></transition></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;todo-item&apos;, &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件的 data 必须是一个函数。<br>当 data 的值是一个对象时，它会在这个组件的所有实例之间共享。重用这个组件，这时就会产生问题。因为每个组件的实例都引用了相同的数据对象，更改其中一个列表的标题就会改变其它每一个列表的标题。因此每个实例必须生成一个独立的数据对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    listTitle: &apos;&apos;,</span><br><span class="line">    todos: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Prop 定义应该尽量详细<br>至少需要指定其类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  status: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">    validator: function (value) &#123;</span><br><span class="line">      return [</span><br><span class="line">        &apos;syncing&apos;,</span><br><span class="line">        &apos;synced&apos;,</span><br><span class="line">        &apos;version-conflict&apos;,</span><br><span class="line">        &apos;error&apos;</span><br><span class="line">      ].indexOf(value) !== -1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为 v-for 设置键值<br>总是用 key 配合 v-for。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;li</span><br><span class="line">  v-for=&quot;todo in todos&quot;</span><br><span class="line">  :key=&quot;todo.id&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>避免 v-if 和 v-for 用在一起<br>当 Vue 处理指令时，v-for 比 v-if 具有更高的优先级<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul v-if=&quot;shouldShowUsers&quot;&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;user in users&quot;</span><br><span class="line">    :key=&quot;user.id&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>为组件样式设置作用域</li></ul><h3 id="优先级-B：强烈推荐"><a href="#优先级-B：强烈推荐" class="headerlink" title="优先级 B：强烈推荐"></a>优先级 B：强烈推荐</h3><ul><li><p>单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyComponent.vue</span><br><span class="line">my-component.vue</span><br></pre></td></tr></table></figure></li><li><p>基础组件名:应用特定样式和约定的基础组件 (也就是展示类的、无逻辑的或无状态的组件) 应该全部以一个特定的前缀开头，比如 Base、App 或 V。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|- BaseButton.vue</span><br><span class="line">|- AppTable.vue</span><br><span class="line">|- VIcon.vue</span><br></pre></td></tr></table></figure></li><li><p>单例组件名:只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。不意味着组件只可用于一个单页面,而是每个页面只使用一次,永远不接受任何 prop （TheHeading.vue）</p></li><li><p>和父组件紧密耦合的子组件应该以父组件名作为前缀命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|- TodoList.vue</span><br><span class="line">|- TodoListItem.vue</span><br><span class="line">|- TodoListItemButton.vue</span><br></pre></td></tr></table></figure></li><li><p>模板中的组件名大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在所有地方 --&gt;</span><br><span class="line">import MyComponent from &apos;./MyComponent.vue&apos;</span><br><span class="line">&lt;my-component&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure></li><li><p>Prop 名大小写:在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  greetingText:&#123;</span><br><span class="line">    type:String</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">&lt;WelcomeMessage greeting-text=&quot;hi&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="优先级-C：推荐"><a href="#优先级-C：推荐" class="headerlink" title="优先级 C：推荐"></a>优先级 C：推荐</h3><ul><li>组件/实例的选项应该有统一的顺序。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">副作用 (触发组件外的影响)</span><br><span class="line">el</span><br><span class="line">全局感知</span><br><span class="line">name</span><br><span class="line">parent</span><br><span class="line">模板依赖 (模板内使用的资源)</span><br><span class="line">components</span><br><span class="line">directives</span><br><span class="line">filters</span><br><span class="line">组合</span><br><span class="line">extends</span><br><span class="line">mixins</span><br><span class="line">接口</span><br><span class="line">props/propsData</span><br><span class="line">本地状态</span><br><span class="line">data</span><br><span class="line">computed</span><br><span class="line">事件</span><br><span class="line">watch</span><br><span class="line">生命周期钩子函数</span><br><span class="line">methods</span><br><span class="line">渲染 (组件输出的声明式描述)</span><br><span class="line">template</span><br><span class="line"></span><br><span class="line">script - template - css</span><br></pre></td></tr></table></figure></li></ul><h3 id="优先级-D-谨慎使用"><a href="#优先级-D-谨慎使用" class="headerlink" title="优先级 D: 谨慎使用"></a>优先级 D: 谨慎使用</h3><h2 id="git代码提交规范"><a href="#git代码提交规范" class="headerlink" title="git代码提交规范"></a>git代码提交规范</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><p>其中，Header 是必需的，Body 和 Footer 可以省略<br>Header部分只有一行，包括两个字段：type（必需）和subject（必需）。<br>type用于说明 commit 的类别，只允许使用下面9个标识，subject是 commit 目的的简短描述，不超过50个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">feat: 新功能（feature）</span><br><span class="line">fix: 修补bug</span><br><span class="line">docs: 文档（documentation）</span><br><span class="line">style: 格式（不影响代码运行的变动）</span><br><span class="line">refactor: 重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">chore: 构建过程或辅助工具的变动</span><br><span class="line">revert: 撤销，版本回退</span><br><span class="line">perf: 性能优化</span><br><span class="line">test：测试</span><br><span class="line">improvement: 改进</span><br><span class="line">build: 打包</span><br><span class="line">ci: 持续集成</span><br><span class="line"></span><br><span class="line">举例说明：</span><br><span class="line">feat: 增加订单详情  closes xxxx (closes非必需)</span><br><span class="line">fix: 修复xx情况下xx问题  closes xxxx (closes非必需)</span><br><span class="line">docs: 修改md文件</span><br><span class="line">style: 修改订单列表样式</span><br><span class="line">refactor: 重构utils.js下部分方法</span><br><span class="line">chore: 增加xxx插件/xxxxloader</span><br><span class="line">revert: 回退当前版本667ec到 sssee2</span><br><span class="line">perf: 优化了xxx，提高了渲染速度</span><br><span class="line">test：增加测试</span><br><span class="line">improvement: 改进</span><br><span class="line">build: 打包</span><br><span class="line">ci: 持续集成</span><br></pre></td></tr></table></figure></p><p>在有数编制的规范：<a href="https://gitee.com/Chensanr/daily-code/blob/master/js-basis/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3.docx" target="_blank" rel="noopener">前端编码规范-有数</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript（核心js） </tag>
            
            <tag> API标准库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在路上</title>
      <link href="/2020/01/26/life2/"/>
      <url>/2020/01/26/life2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>身体和心总有一个在路上</p></blockquote><p><img src="/images/life/daily/default.jpg" alt="目录"><a id="more"></a></p><p>也不知道是不是错觉，最近发生的很多事让我觉得，有些东西好像悄悄在改变。亦或是人心，亦或是人性。</p><p>但是，世界本就良莠不齐。好坏不能一言以论之，每个人心里都有一杆秤，作为我们普通人以其量之自身，而后向世之大者看齐。</p><p>世间美好皆由自身，而非外事外物。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一人场演唱会</title>
      <link href="/2019/11/16/jackZhou/"/>
      <url>/2019/11/16/jackZhou/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>没有稻香<br>没有七里香<br>但是有说好不哭</p></blockquote><p><img src="/images/life/daily/jackzhou.jpg" alt="出门"><a id="more"></a></p><p>醒来已经九点，拉开窗帘推开门，微光照射进来，外面的喧闹声渐缓清晰，街道边几个行人稀稀落落的漫步行走。抬头深吸一口气，今天确实是个好天，又忍不住长叹，原来已经毕业一年半了。</p><p>室友几天前去海南看花花的演唱会了，在那之前凭借她多年追星的手速给我抢了一张周杰伦的票。晚上开场，时间很充裕，在家里悠哉的荒度白日，直到下午五点，才开始不紧不慢收拾自己。出门去公交车站等车，站台零散的站着几对情侣，站在最角落的一对情侣应该是从外地过来的，女孩子拿着相机环顾四周，似乎在寻找能入镜的实物。直到她的镜头对准身侧的男孩，男孩似乎也有感应似的侧头对她笑，伸手摸摸她的头，对她低语几句。这一刻我变柠檬酱了，忍不住喟叹年轻真好，如果朋友在身侧，应该会吐槽我又老干部了。</p><p>从四方而来的杰迷熙来攘往地聚集在体育场外，我在九号门前的草地找了一块可以落座的石头等待开场。等到薄暮冥冥，场内外的灯光渐渐明晰，我起来走向人数还算稀少的队伍中站定，站在我前面的是一个白净的大男孩，和他的朋友在讨论今晚的演唱会以及他们票的由来。记录这段单纯是因为我跟他说话了并且他长的好看，虽然能预感，但到最后结束事实也证明今晚我真的只说了一句话。我的票是抢的，虽然不是我自己抢的。</p><p>我的位置在26排，进去的时候发现后排的荧光棒被人收走拿去卖了，所以整场我就干巴巴的看着遥远的舞台，听着熟悉的旋律，哼着轻快的调调。没有稻香没有七里香但是有说好不哭，献给我第一次听的演唱会，如果不是露天的话，我会更开心的，毕竟十一月份的杭州夜晚确实算不上暖和。</p><p>将近十点散场，等我走出人群坐上公交的时候已经十一点多了。司机师傅载着一车杰迷，拿起手机拍了视频发给同事，抱怨他请不到假烂在手里的票，抱怨为了生活但是开心遇到，陪我们一起嬉笑。可惜我还是没有赶上一号线的最后一趟，只能蹲在路边等滴滴师傅赶来。室友海南那边最后一场也刚散场，我们俩分享这片刻的开心和悲伤。回到家已经凌晨，今天短暂又漫长，确是个好天。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云轻量服务器Centos 7.3开发环境配置</title>
      <link href="/2019/09/29/centos-1/"/>
      <url>/2019/09/29/centos-1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>阿里云轻量服务器</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想自己开发一个小程序，需要服务器和后台给小程序提供接口。所以记录了一下，服务器在开发前必须要准备的开发环境。<br>本人是前端小菜鸡，后台用的是node,数据库用mysql，顺便用nginx反向代理。</p><p>在操作前，你需要准备：<br>一台服务器（我的是学生价的轻量云服务器 centos 7.3的）<br>域名（顺便备案）<br>本地安装个xshell和xftp</p><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>安装步骤：<br>1、 wget命令下载Node.js安装包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></p><p>2.解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf node-v6.9.5-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></p><p>3.全局配置node,创建软链，不进行这一步操作你在别的目录是启动不了node的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/node-v6.9.5-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /root/node-v6.9.5-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></p><p>4.检测是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><p>5.若是想要修改默认安装目录(比如/opt/node),则执行下面操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/node/</span><br><span class="line">mv /root/node-v6.9.5-linux-x64/* /opt/node/</span><br><span class="line">rm -f /usr/local/bin/node</span><br><span class="line">rm -f /usr/local/bin/npm</span><br><span class="line">ln -s /opt/node/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /opt/node/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></p><p>6.安装cnpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm - -registry=https://registry.npm.taobao.org </span><br><span class="line">ln -s opt/node/bin/cnpm /usr/bin/cnpm  创建软链 全局使用（opt/node/bin/cnpm是你的安装目录）。</span><br></pre></td></tr></table></figure></p><p>以后通过cnpm或者npm安装的包，都需要将它添加至全局，不然使用的时候会出现bug</p><p>参考地址：<a href="https://yq.aliyun.com/articles/162294?spm=a2c4e.11153940.0.0.127743eddvPiAR" target="_blank" rel="noopener">node</a></p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>1.安装mysql，mysql-devel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql</span><br><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure></p><p>2.官网下载安装mysql-server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure></p><p>3.安装成功后重启mysql服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure></p><p>4.进入数据库，修改初始密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root </span><br><span class="line">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;123&apos;);  //123表示你的root账号的密码</span><br></pre></td></tr></table></figure></p><p>安装参考地址：<a href="https://yq.aliyun.com/articles/49808" target="_blank" rel="noopener">mysql</a></p><p>5.配置mysql</p><ol><li><p>中文编码问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/my.cnf 编辑数据库配置文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">因为我的配置文件没有client,只有mysqld。所以第一步先加上client</span><br><span class="line">   ［client］</span><br><span class="line">   default-character-set=utf8 </span><br><span class="line">第二步在加上mysqld的配置</span><br><span class="line">   [mysqld]</span><br><span class="line">   default-storage-engine=INNODB </span><br><span class="line">   character-set-server=utf8 </span><br><span class="line">   collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入数据库，输入</span><br><span class="line">show varibales like &apos;charcter%&apos;;</span><br><span class="line">若是除了character_set_filesystem之外都显示utf-8的话则成功</span><br></pre></td></tr></table></figure><p>参考地址：<a href="https://yq.aliyun.com/articles/71424?spm=5176.2000012.0.0.78e75e860s69i4" target="_blank" rel="noopener">mysql</a></p><p>2.远程连接（workbence连接服务器数据库时）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>技术胖的视频，比较详细<br>参考地址：<a href="https://jspang.com/posts/2018/10/05/nginx.html" target="_blank" rel="noopener">nginx</a></p>]]></content>
      
      <categories>
          
          <category> Other </category>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git</title>
      <link href="/2019/08/28/git/"/>
      <url>/2019/08/28/git/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>git命令日常学习</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a></p><h1 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h1>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init 初始化仓库（.git）</span><br><span class="line">git add . 把文件添加到缓存区</span><br><span class="line">git commit -m &apos;&apos; 把缓存区文件提交到仓库 </span><br><span class="line">git status 查看当前仓库状态</span><br><span class="line">git log 查看版本历史提交记录</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git branch 查看当前分支 </span><br><span class="line"></span><br><span class="line">git branch -r 查看远程分支</span><br><span class="line"></span><br><span class="line">git branch -a 查看所有分支（本地和远程）</span><br><span class="line"></span><br><span class="line">git branch &lt;branchname&gt; //新建分支</span><br><span class="line"></span><br><span class="line">git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; //重命名本地分支</span><br><span class="line"></span><br><span class="line">git branch -d &lt;branchname&gt; //删除本地分支</span><br><span class="line"></span><br><span class="line">git branch -d -r &lt;branchname&gt; //删除远程分支，删除后还需推送到服务器</span><br><span class="line">git push origin:&lt;branchname&gt;  //删除后推送至服务器</span><br></pre></td></tr></table></figure><h2 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h2><h3 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.先有本地库，后有远程库时。把本地仓库关联到远程库。（本地和远程都有库）</span><br><span class="line">(1) 在远程创建一个仓库（空仓库，不勾选readme.txt文件）</span><br><span class="line"></span><br><span class="line">(2) 在本地init了的仓库里运行关联仓库命令， git remote add origin 远程仓库地址</span><br><span class="line"></span><br><span class="line">(3) 关联后，使用命令git push -u origin master 进行第一次提交</span><br><span class="line"></span><br><span class="line">另外也可以关联多个远程仓库地址：关联多个远程仓库时，只需要取不同的远程仓库名，再push到不同远程仓库名上即可</span><br><span class="line">git remote add gitlab gitlab地址</span><br><span class="line">git push gitlab(远程仓库名) master(分支)</span><br><span class="line"></span><br><span class="line">2.本地无库，远程有库，从远程仓库克隆即可（推荐使用）</span><br><span class="line">git clone 远程仓库地址</span><br><span class="line"></span><br><span class="line">3.取消关联</span><br><span class="line">git remote remove origin/gitlab(远程仓库名)</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>  场景：当前dev分支,dev分支要合并到线上master分支</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchname&gt; 切换到要合并的分支</span><br><span class="line"></span><br><span class="line">git pull 拉最新代码</span><br><span class="line"></span><br><span class="line">git merge dev 把dev合并到当前分支</span><br><span class="line"></span><br><span class="line">git push 把更新推送到远程</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>  HEAD表示当前版本（最新提交版本），HEAD^表示上一版本</p><p>  回退命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 简洁/完整哈希索引值   ：回到指定哈希值所对应的版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD：强制工作区、暂存区、本地库为当前HEAD指针所在的版本</span><br><span class="line"></span><br><span class="line">  git reset --hard HEAD^：后退一个版本(上一个版本)</span><br><span class="line"></span><br><span class="line">  tip：一个^表示回退一个版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~1：后退一个版本</span><br><span class="line"></span><br><span class="line">  tip：波浪线~后面的数字表示后退几个版本</span><br></pre></td></tr></table></figure></p><p>  回退场景：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.在add 和 commit之前。想把当前工作区的修改返回原来状态用此命令。</span><br><span class="line">git chackout -- file(文件名)</span><br><span class="line">适用乱改文件后未进行git add和commit</span><br><span class="line"></span><br><span class="line">2.把暂存区的修改回退到工作区</span><br><span class="line">git reset HEAD file(文件名)</span><br><span class="line">适用乱改文件后add操作但是没有commit，可以使用git reset HEAD file(文件名)回到工作区，若是需要再回到最原来状态需要git checkout -- file</span><br><span class="line"></span><br><span class="line">3.回退版本，已经add和commit了之后的操作则需要</span><br><span class="line">git reset --hard 版本号/HEAD^</span><br></pre></td></tr></table></figure></p><h3 id="拉取远程分支到本地"><a href="#拉取远程分支到本地" class="headerlink" title="拉取远程分支到本地"></a>拉取远程分支到本地</h3><ol><li><p>首先把远程分支先拉到本地（情况：本地无远程分支dev,想拉取同名dev分支到本地）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin dev（dev为远程仓库的分支名）</span><br></pre></td></tr></table></figure></li><li><p>在本地创建分支dev并切换到该分支，然后跟远程的origin地址上的dev分支关联起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev(本地分支名称) origin/dev(远程分支名称)   </span><br><span class="line">注：origin/dev表示跟远程的origin地址上的dev分支关联起来</span><br></pre></td></tr></table></figure></li><li><p>把远程某个分支上的内容都拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev(远程分支名称)</span><br></pre></td></tr></table></figure></li><li><p>再git add ,git commit ,git push代码</p></li></ol><h3 id="本地未切换分支修改代码"><a href="#本地未切换分支修改代码" class="headerlink" title="本地未切换分支修改代码"></a>本地未切换分支修改代码</h3><ul><li>master分支代码提交（此次版本要修改的分支地址dev_20210101，未切换分支直接在master上修改代码）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;&apos;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>若要切换本地不存在的远程分支，先将远程git仓库里的指定分支拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.本地没有分支，切换并关联远程分支</span><br><span class="line">git checkout -b dev_20210101 origin/dev_20210101</span><br><span class="line">2.本地已经有建分支</span><br><span class="line">切换新分支</span><br><span class="line">git checkout dev_20210101</span><br><span class="line">关联远程分支</span><br><span class="line">git push --set-upstream origin branch_name</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>合并master分支到dev_20210101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>提交dev_20210101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>切换到master分支,进行master分支回退版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git reset hard HEAD</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Other </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>uniapp</title>
      <link href="/2019/07/10/miniPro/"/>
      <url>/2019/07/10/miniPro/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>uniapp项目实现一套代码多端发布，可适用小程序，app，h5等项目</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>公司最近要开发一个受益人所有认查询的小程序。第一次接触，踩了很多坑，包括小程序登录获取授权信息等逻辑，故记录下来。<br>开发工具：HBuilder 和微信开发者工具。<br>主要采用uni-app代替原生进行开发。</p><h2 id="多端项目框架-uniapp"><a href="#多端项目框架-uniapp" class="headerlink" title="多端项目框架(uniapp)"></a>多端项目框架(uniapp)</h2><p>写了一个包括不限于http，network等封装后形成一个基础的项目框架配置。<br>项目框架包括基础的接口请求和网络诊断。</p><ul><li><p>http.js文件内部是请求request的构造函数 通过Vue.prototype.$ysHttp = http;绑定到Vue，可以通过this.$ysHttp请求接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import &#123; config &#125;  from &quot;./config.js&quot;</span><br><span class="line">import &#123;login&#125; from &apos;./utils.js&apos;;</span><br><span class="line">class Http &#123;</span><br><span class="line">    constructor(options) &#123;</span><br><span class="line">        this.options = options;</span><br><span class="line">        this.config = &#123;</span><br><span class="line">            url: config.DOMAIN,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            header: &#123;&#125;,</span><br><span class="line">            method: &quot;&quot;,</span><br><span class="line">            dataType: &quot;json&quot;,</span><br><span class="line">            responseType: &quot;text&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">        this.init();</span><br><span class="line">        return this.request();</span><br><span class="line">    &#125;</span><br><span class="line">    setToken()&#123;</span><br><span class="line">        this.config.header = &#123;&quot;token&quot;: uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">        this.config.data = &#123;...this.config.data,&apos;token&apos;:uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    init() &#123;</span><br><span class="line">        this.config.header = &#123;&quot;token&quot;: uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">        this.options.data = &#123;...this.options.data,&apos;token&apos;:uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">        this.options.url = this.options.url.indexOf(&quot;http&quot;) &gt; -1 ? this.options.url :(this.config.url + this.options.url);</span><br><span class="line">        this.options.method = this.options.method ? this.options.method.toUpperCase() : &apos;GET&apos;;</span><br><span class="line">        this.config = Object.assign(&#123;&#125;, this.config, this.options);</span><br><span class="line">    &#125;</span><br><span class="line">    request() &#123;</span><br><span class="line">        if(!config.netWork.hasNet())&#123;</span><br><span class="line">            uni.showToast(&#123;</span><br><span class="line">                title:&quot;请检查网络&quot;,</span><br><span class="line">                icon:&apos;loading&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">            return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">                setTimeout(function()&#123;</span><br><span class="line">                    uni.hideToast();</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;,3000)</span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        return uni.request(this.config).then(res=&gt; &#123;</span><br><span class="line">            let data = res[1];</span><br><span class="line">            if(data.statusCode == &apos;401&apos;)&#123;//token失效</span><br><span class="line">                return login().then(res=&gt;&#123;</span><br><span class="line">                    this.setToken();</span><br><span class="line">                    return this.request();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;else if(data.statusCode == &apos;200&apos;)&#123;</span><br><span class="line">                return data.data</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">export const http = function(options)&#123;</span><br><span class="line">    return new Http(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NetWork.js文件是定义了当前网络状态的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">export default class NetWork&#123;</span><br><span class="line">constructor() &#123;</span><br><span class="line">    this.netWorkStatus = 0 ;//0 无网络，1，网络正常</span><br><span class="line">this.init();</span><br><span class="line">&#125;</span><br><span class="line">init = ()=&gt;&#123;</span><br><span class="line">let that = this;</span><br><span class="line">uni.getNetworkType(&#123;</span><br><span class="line">complete(res)&#123;</span><br><span class="line">that.netWorkStatus = res.networkType === &quot;none&quot; ? 0 : 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">that._event();</span><br><span class="line">&#125;</span><br><span class="line">_event()&#123;</span><br><span class="line">let that = this;</span><br><span class="line">uni.onNetworkStatusChange((res) =&gt; &#123;</span><br><span class="line">that.netWorkStatus = res.networkType === &quot;none&quot; ? 0 : 1;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">getStatus = ()=&gt;&#123;</span><br><span class="line">return this.netWorkStatus;</span><br><span class="line">&#125;</span><br><span class="line">hasNet = ()=&gt;&#123;</span><br><span class="line">return this.netWorkStatus === 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>utils.js文件定义了项目能用到的所有方法</p></li><li><p>config.js文件定义全局配置（包括了network对象）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import NetWork from &quot;./NetWork.js&quot;;</span><br><span class="line">export const config = &#123;</span><br><span class="line">    // production</span><br><span class="line">    // DOMAIN : &quot;https://yscredit.com&quot;,</span><br><span class="line">    </span><br><span class="line">    //dev</span><br><span class="line">    DOMAIN : &quot;http://10.1.5.7:8081&quot;,</span><br><span class="line">    // reqConfig:&#123;</span><br><span class="line">    // exeQueue : true,</span><br><span class="line">    // promiseQueue : []</span><br><span class="line">    // &#125;,</span><br><span class="line">    //h5</span><br><span class="line">    //DOMAIN :&quot;&quot;,</span><br><span class="line">    netWork :new NetWork()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DOMAIN域名常量：</span><br><span class="line">在h5页面打开或者打包时 DOMAIN :&quot;&quot;；开发时通过vue.config.js进行代理设置解决跨域问题（或者使用xbuilder内置浏览器）</span><br><span class="line">在微信小程序打开或打包时 域名改为相对应的域名地址。</span><br></pre></td></tr></table></figure></li><li><p>constant.js定义了全局的常量</p></li></ul><p>项目地址：<a href="https://github.com/chenjing123456/uniapp-frame" target="_blank" rel="noopener">https://github.com/chenjing123456/uniapp-frame</a></p><h2 id="小程序登录逻辑"><a href="#小程序登录逻辑" class="headerlink" title="小程序登录逻辑"></a>小程序登录逻辑</h2><h3 id="判断授权"><a href="#判断授权" class="headerlink" title="判断授权"></a>判断授权</h3><p>判断用户是否已授权过。已授权则跳过授权逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isAuth()&#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    uni.getSetting(&#123;</span><br><span class="line">        success(res) &#123;</span><br><span class="line">            //res.authSetting //所有设置项</span><br><span class="line">            if(res.authSetting[&apos;scope.userInfo&apos;])&#123;//获取用户是否已授权用户信息项</span><br><span class="line">                that.isShow = false;   //this.isShow用于判断是否显示用户授权弹框</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                that.isShow = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>uni.openSetting获取用户的当前设置，即可获取用户是否已经授权。</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>未授权则弹框进行授权登录。注意，微信未防止授权泛滥，修改了授权逻辑，必须通过按钮获取授权。<br>1.弹框代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;uni-popup :show=&quot;isShow&quot; type=&quot;middle&quot; mode=&quot;fixed&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;auth-modal&quot;&gt;</span><br><span class="line">        &lt;image class=&quot;modal-img&quot; src=&quot;../../static/copy@2x.png&quot;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;view class=&quot;modal-text&quot;&gt;</span><br><span class="line">            &lt;text&gt;&#123;&#123;contant[0]&#125;&#125;&lt;/text&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;button class=&apos;modal-foot bottom&apos; plain=&apos;false&apos; type=&apos;default&apos; open-type=&quot;getUserInfo&quot; withCredentials=&quot;true&quot; lang=&quot;zh_CN&quot; @getuserinfo=&quot;getUserInfo&quot;&gt;</span><br><span class="line">            &#123;&#123;contant[1]&#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/uni-popup&gt;</span><br></pre></td></tr></table></figure></p><p>其中button是用于调取授权弹框的， open-type=”getUserInfo”表示想授权获取用户信息<br>如图：<img src="/images/vue/login.png" alt="login"></p><p>2.点击授权按钮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo(userInfo) &#123;//用户是否允许获取授权信息</span><br><span class="line">    let d = userInfo.detail;</span><br><span class="line">    if(d.errMsg == &quot;getUserInfo:ok&quot;)&#123;//允许</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.isShow = false;</span><br><span class="line">        login();//登录</span><br><span class="line">    &#125;else&#123;//拒绝</span><br><span class="line">        this.isShow = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>如图：<img src="/images/vue/auth.png" alt="auth"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>若用户同意授权则登录获取code,把code传给后台获取token，把token放进请求头或者请求参数即可。若token失效则重新调用login获取新token。</p><p>1.登录方法(封装在util.js中)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">export const login=()=&gt;&#123;</span><br><span class="line">// 1.获取登录用户code</span><br><span class="line">return new Promise(function(resolve, reject)&#123;</span><br><span class="line">uni.login(&#123;</span><br><span class="line">    provider: &apos;weixin&apos;,</span><br><span class="line">    success: function(loginRes) &#123;</span><br><span class="line">        let code = loginRes.code;</span><br><span class="line">                //2.将用户登录code传递到后台置换用户SessionKey、OpenId等信息</span><br><span class="line">                if(code)&#123;</span><br><span class="line">                    uni.request(&#123;</span><br><span class="line">                        url:`$&#123;config.DOMAIN&#125;/weixin/getTokenByWexin`, //后台接口</span><br><span class="line">                        data:&#123;</span><br><span class="line">                            code:code</span><br><span class="line">                        &#125;,</span><br><span class="line">                        success(res) &#123;</span><br><span class="line">                            let data = res.data;</span><br><span class="line">                            if(data.code == &apos;00&apos;)&#123;</span><br><span class="line">                                uni.setStorageSync(&apos;token&apos;, data.data.token);//token存入本地</span><br><span class="line">                                //uni.setStorageSync(&apos;code&apos;, code);</span><br><span class="line">                            &#125;</span><br><span class="line">                            resolve();</span><br><span class="line">                        &#125;,</span><br><span class="line">                        fail(res) &#123;</span><br><span class="line">                            reject();</span><br><span class="line">                            uni.showToast(&#123;</span><br><span class="line">                                title: res.data.codeMsg,</span><br><span class="line">                                duration: 2000</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            fail(loginRes) &#123;</span><br><span class="line">                reject();</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.在封装uni.request时，在请求头或者请求参数里把token放进去.在登录成功之后就能通过token获取后台接口信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.config.header = &#123;&quot;token&quot;: uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">this.config.data = &#123;...this.config.data,&apos;token&apos;:uni.getStorageSync(&apos;token&apos;)&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="小程序开发注意点"><a href="#小程序开发注意点" class="headerlink" title="小程序开发注意点"></a>小程序开发注意点</h3><p>1.设置背景图片</p><p>在内联样式中可以直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image class=&quot;modal-img&quot; src=&quot;../../static/copy@2x.png&quot;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure></p><p>但是在内部样式中必须通过~@去拿，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background-image: url(&apos;~@/static/bgmin@2x.png&apos;);</span><br><span class="line">// background-color: #005CFF;</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-position: center center;</span><br><span class="line">background-size:cover;</span><br></pre></td></tr></table></figure></p><p>2.背景图片小于40kb的微信会自动转成base64的格式，但是大于40kb的需要开发者自己转化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;search-content&quot; :style=&quot;&#123;backgroundImage:`url($&#123;bgImg&#125;)`&#125;&quot;&gt;</span><br><span class="line">//bgImg是base64的路径</span><br></pre></td></tr></table></figure></p><p>3.uni.navigateTo跳转，保留当前页面，跳转到应用内的某个页面<br>参数url有长度限制，太长的字符串会传递失败，可使用窗体通信、全局变量，或encodeURIComponent等多种方式解决。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator :url=&quot;&apos;/pages/test/test?item=&apos;+ encodeURIComponent(JSON.stringify(item))&quot;&gt;&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line">// 在test.vue页面接受参数</span><br><span class="line">onLoad: function (option) &#123;</span><br><span class="line">    const item = JSON.parse(decodeURIComponent(option.item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 假设item的字段内部有html元素或者是富文本时，需要再做一次处理，不然会报错。</span><br><span class="line">因为url加密传参有时候会出现Uncaught URIError: URI malformed的错误，这是因为你的url中包含了“%”字符，浏览器在对“%”执行decodeURIComponent时报错，正确的解决是将%全部替换为%25再进行传输：</span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">url:&quot;/pages/appCenter/yqDetail?item=&quot;+encodeURIComponent(JSON.stringify(item).replace(/%/g,&apos;%25&apos;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="uniapp多端登录"><a href="#uniapp多端登录" class="headerlink" title="uniapp多端登录"></a>uniapp多端登录</h2><p>uniapp通过条件编译实现一套代码多端登录。<br>文档：<a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">uniapp跨端兼容</a><br>eg:包括微信小程序、浙政钉、和h5等登录；代码逻辑在微信小程序使用微信免登，在浙政钉使用浙政钉的钉钉免登，其余情况使用h5登录（填写账号密码）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;config&#125; from &apos;../../common/config&apos;</span><br><span class="line">import secret from &apos;../../components/secret.vue&apos;</span><br><span class="line">import userAgreement from &apos;../../components/userAgreement.vue&apos;</span><br><span class="line">import uniPopup from &apos;@/components/uni-popup/uni-popup.vue&apos;</span><br><span class="line">//#ifdef H5</span><br><span class="line">import dd from &apos;gdt-jsapi&apos;;//浙政钉jsapi</span><br><span class="line">//#endif</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">query:&#123;</span><br><span class="line">phone:&quot;&quot;,</span><br><span class="line">validCode:&quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">code:&quot;&quot;,</span><br><span class="line">countdown:&quot;获取验证码&quot;,</span><br><span class="line">timestatus:false,</span><br><span class="line">clear:&apos;&apos;,</span><br><span class="line">disabled:false,</span><br><span class="line">codes:&quot;&quot;,</span><br><span class="line">isShow:false,</span><br><span class="line">checked:[],</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">onReady()&#123;</span><br><span class="line">if(this.isShow==&apos;true&apos;)&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">this.isShow==true</span><br><span class="line">//#ifdef  MP-WEIXIN</span><br><span class="line">this.wxLogin()</span><br><span class="line">//#endif</span><br><span class="line">//#ifdef H5</span><br><span class="line">this.ddLogin()</span><br><span class="line">//#endif</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">onLoad(option) &#123;</span><br><span class="line">this.isShow=option.isShow</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">secret,</span><br><span class="line">userAgreement,</span><br><span class="line">uniPopup</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">//获取token 判断是否登陆过</span><br><span class="line">getToken(data)&#123;</span><br><span class="line">// 发起网络请求</span><br><span class="line">return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">this.$http(&#123;</span><br><span class="line">url:&apos;/wxLogin/getToken&apos;,</span><br><span class="line">data:data, </span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">if(res.status==200)&#123;</span><br><span class="line">resolve(res.data)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">reject(res.data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(()=&gt;&#123;</span><br><span class="line">reject()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">//微信小程序免登</span><br><span class="line">wxLogin()&#123;</span><br><span class="line">let that=this</span><br><span class="line">uni.login(&#123;</span><br><span class="line">provider: &apos;weixin&apos;,</span><br><span class="line">success(res) &#123; </span><br><span class="line">console.log(res)</span><br><span class="line">if (res.code) &#123;</span><br><span class="line">   that.codes=res.code</span><br><span class="line">    // 发起网络请求</span><br><span class="line">that.getToken(&#123;</span><br><span class="line">code:res.code,</span><br><span class="line">source:&apos;wx&apos;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">uni.setStorageSync(&apos;token&apos;,res.token);</span><br><span class="line">uni.setStorageSync(&apos;user&apos;,res.username);</span><br><span class="line">uni.switchTab(&#123;</span><br><span class="line">url: &apos;/pages/index/index&apos;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).catch(res=&gt;&#123;</span><br><span class="line">that.isShow=true</span><br><span class="line">&#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">that.isShow=true</span><br><span class="line">console.log(&apos;登录失败！&apos; + res.errMsg)</span><br><span class="line">&#125;</span><br><span class="line">&#125; ,</span><br><span class="line">fail: (err) =&gt; &#123;  </span><br><span class="line">console.log(&apos;uni.login 接口调用失败，将无法正常使用开放接口等服务&apos;, err)  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">            //判断当前是浙政钉还是其他h5端</span><br><span class="line">ddGetAuthCode()&#123;</span><br><span class="line">return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">dd.ready(function() &#123;</span><br><span class="line">dd.getAuthCode().then((result) =&gt;&#123;</span><br><span class="line">console.log(result)</span><br><span class="line">if(result)&#123;</span><br><span class="line">resolve(result.code)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">resolve(&apos;&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">console.error(err);</span><br><span class="line">resolve(&apos;&apos;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">//钉钉免登,如果非钉钉端则为h5</span><br><span class="line">ddLogin()&#123;</span><br><span class="line">let code = &apos;&apos;</span><br><span class="line">let source = &apos;&apos;</span><br><span class="line">let that = this</span><br><span class="line">that.ddGetAuthCode().then(res=&gt;&#123;</span><br><span class="line">if(res===&apos;&apos;)&#123;</span><br><span class="line">source = &apos;h5&apos;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">source = &apos;dd&apos;</span><br><span class="line">code = res</span><br><span class="line">&#125;</span><br><span class="line">that.getToken(&#123;</span><br><span class="line">code:code,</span><br><span class="line">source:source</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">uni.setStorageSync(&apos;token&apos;,res.token);</span><br><span class="line">uni.setStorageSync(&apos;user&apos;,res.username);</span><br><span class="line">uni.switchTab(&#123;</span><br><span class="line">url: &apos;/pages/index/index&apos;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).catch(res=&gt;&#123;</span><br><span class="line">that.isShow=true</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).catch(res=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">// 服务协议、隐私政策--start</span><br><span class="line">userAgreementEvent()&#123;</span><br><span class="line">this.$refs.userAgreement.open()</span><br><span class="line">&#125;,</span><br><span class="line">serviceAgreementContent()&#123;</span><br><span class="line">                this.$refs.secret.open()</span><br><span class="line">&#125;,</span><br><span class="line">serviceAgreement(event)&#123;</span><br><span class="line">this.checked = event.detail.value</span><br><span class="line">&#125;,</span><br><span class="line">    onClose() &#123;</span><br><span class="line">  this.secretDialog=false</span><br><span class="line">  this.userAgreementDioalog=false</span><br><span class="line">&#125;,</span><br><span class="line">// 服务协议--end</span><br><span class="line">onChange(event)&#123;</span><br><span class="line">  this.query.phone=event.target.value</span><br><span class="line">&#125;,</span><br><span class="line">onChange1(event)&#123;</span><br><span class="line"> this.query.validCode=event.target.value</span><br><span class="line">&#125;,</span><br><span class="line">// 获取验证码</span><br><span class="line">_getCode()&#123;</span><br><span class="line">  let phonereg = /^[1][3,4,5,7,8][0-9]&#123;9&#125;$/;</span><br><span class="line">  if (!phonereg.test(this.query.phone)) &#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: &apos;请输入正确的手机号&apos;,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 2000</span><br><span class="line">&#125;);</span><br><span class="line">return false;</span><br><span class="line">  &#125; </span><br><span class="line">this.disabled = true;</span><br><span class="line">this.$http(&#123;</span><br><span class="line">url:&apos;/wxLogin/sendCodeBylogin&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">phone:this.query.phone,</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">if(res.status == &apos;200&apos;)&#123;</span><br><span class="line">    // clearInterval(this.timer); //清楚定时器</span><br><span class="line">this.timestatus = true;</span><br><span class="line">this.countdown = 60;</span><br><span class="line">this.clear = setInterval(this.countDown,1000);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.disabled = false;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: res.message,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 1000</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">  // 倒计时</span><br><span class="line">            countDown()&#123;</span><br><span class="line">                if(!this.countdown)&#123;                    </span><br><span class="line">                    this.disabled = false;</span><br><span class="line">                    this.timestatus = false;</span><br><span class="line">                    this.countdown = &apos;获取验证码&apos;;</span><br><span class="line">                    clearInterval(this.clear);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    --this.countdown;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 普通登录</span><br><span class="line">_getLogin()&#123;</span><br><span class="line">let that=this;</span><br><span class="line">let &#123;phone,validCode&#125; = this.query;</span><br><span class="line">if(this.checked.length&lt;=0)&#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: &apos;请先阅读服务协议&apos;,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 2000</span><br><span class="line">&#125;);</span><br><span class="line">return</span><br><span class="line">&#125;else&#123;</span><br><span class="line">if(!phone||!validCode)&#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: &apos;请填写手机号或者验证码&apos;,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 2000</span><br><span class="line">&#125;);</span><br><span class="line">return</span><br><span class="line">&#125;else&#123;</span><br><span class="line">that.getCurrentCode()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//重新获取code</span><br><span class="line">getCurrentCode()&#123;</span><br><span class="line">let that = this</span><br><span class="line">//#ifdef  MP-WEIXIN</span><br><span class="line">uni.login(&#123;</span><br><span class="line">provider: &apos;weixin&apos;,</span><br><span class="line">success(res) &#123; </span><br><span class="line">if (res.code) &#123;</span><br><span class="line">   that.codes=res.code</span><br><span class="line">    // 发起网络请求</span><br><span class="line">that.normalLogin(&apos;wx&apos;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(&apos;登录失败！&apos; + res.errMsg)</span><br><span class="line">&#125;</span><br><span class="line">&#125; ,</span><br><span class="line">fail: (err) =&gt; &#123;  </span><br><span class="line">console.log(&apos;uni.login 接口调用失败，将无法正常使用开放接口等服务&apos;, err)  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;)</span><br><span class="line">//#endif</span><br><span class="line">//#ifdef H5</span><br><span class="line">that.ddGetAuthCode().then(res=&gt;&#123;</span><br><span class="line">let source = &apos;&apos;</span><br><span class="line">if(res===&apos;&apos;)&#123;</span><br><span class="line">source = &apos;h5&apos;</span><br><span class="line">that.codes = &apos;&apos;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">source = &apos;dd&apos;</span><br><span class="line">that.codes = res</span><br><span class="line">&#125;</span><br><span class="line">that.normalLogin(source)</span><br><span class="line">&#125;)</span><br><span class="line">//#endif</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">//登录</span><br><span class="line">normalLogin(source)&#123;</span><br><span class="line">let that =this;</span><br><span class="line">this.$http(&#123;</span><br><span class="line">url:&apos;/wxLogin/loginByPhone&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">phone:that.query.phone,</span><br><span class="line">source,</span><br><span class="line">code:that.codes,</span><br><span class="line">validCode:that.query.validCode</span><br><span class="line">&#125;,</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">if(res.status == &apos;200&apos;)&#123;</span><br><span class="line">uni.setStorageSync(&apos;token&apos;,res.data.token);</span><br><span class="line">uni.setStorageSync(&apos;user&apos;,res.data.username);</span><br><span class="line">uni.switchTab(&#123;url: &apos;/pages/index/index&apos;&#125;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">title: res.message,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">duration: 1000</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(()=&gt;&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>浙政钉免登文档：<a href="https://openplatform-portal.dg-work.cn/portal/#/helpdoc?docKey=kfzn&amp;slug=kpkrae" target="_blank" rel="noopener">h5获取免登授权码</a><br>微信免登: <a href="https://uniapp.dcloud.io/api/plugins/login?id=login" target="_blank" rel="noopener">uniapp的 uni.login</a></p><h2 id="数据埋点"><a href="#数据埋点" class="headerlink" title="数据埋点"></a>数据埋点</h2><ul><li><p>埋点：<br> 埋点代码分为：稳定性监控代码（Emas）和流量分析代码(A+)。<br> 流量分析代码(A+)包含通用采集 SDK、基础埋点、用户信息埋点；<br> 稳定性监控代码（Emas）只需要在首页加入。流量分析代码(A+)每个页面都需要加入，也可以写通用js，在其他页面引入。</p></li><li><p>稳定性监控代码(html页面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   &lt;script src=&apos;https://wpk-gate.zjzwfw.gov.cn/static/wpk-jssdk.1.0.2/wpkReporter.js&apos; crossorigin=&apos;true&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  try &#123;</span><br><span class="line">    const config = &#123;</span><br><span class="line">      bid: &apos;************&apos;,</span><br><span class="line">      signkey: &apos;1234567890abcdef&apos;,</span><br><span class="line">      gateway: &apos;https://wpk-gate.zjzwfw.gov.cn&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">    const wpk = new wpkReporter(config);</span><br><span class="line">    wpk.installAll();</span><br><span class="line">    window._wpk = wpk;</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.error(&apos;WpkReporter init fail&apos;, err);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>流量分析代码</p><ul><li><p>引入api，通用采集SDK (html页面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     (function(w, d, s, q, i) &#123;</span><br><span class="line">       w[q] = w[q] || [];</span><br><span class="line">       var f = d.getElementsByTagName(s)[0],j = d.createElement(s);</span><br><span class="line">       j.async = true;</span><br><span class="line">       j.id = &apos;beacon-aplus&apos;;</span><br><span class="line">       j.src = &apos;https://alidt.alicdn.com/alilog/mlog/aplus_cloud.js&apos;;</span><br><span class="line">       f.parentNode.insertBefore(j, f);</span><br><span class="line">     &#125;)(window, document, &apos;script&apos;, &apos;aplus_queue&apos;);</span><br><span class="line">   </span><br><span class="line">     aplus_queue.push(&#123;</span><br><span class="line">       action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">       arguments: [&apos;aplus-rhost-v&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">     &#125;);</span><br><span class="line">     aplus_queue.push(&#123;</span><br><span class="line">       action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">       arguments: [&apos;aplus-rhost-g&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">     &#125;);</span><br><span class="line">     </span><br><span class="line">     var u = navigator.userAgent</span><br><span class="line">     var isAndroid = u.indexOf(&apos;Android&apos;) &gt; -1</span><br><span class="line">     var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)</span><br><span class="line">   </span><br><span class="line">     aplus_queue.push(&#123;</span><br><span class="line">       action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">       arguments: [&apos;appId&apos;, isAndroid ? &apos;28302650&apos; : isIOS ? &apos;28328447&apos; : &apos;47130293&apos;]</span><br><span class="line">     &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>在每个页面做基础埋点和用户信息埋点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1.基础埋点：单页应用 或 “单个页面”需异步补充PV日志参数还需进行如下埋点：</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;aplus-waiting&apos;, &apos;MAN&apos;]</span><br><span class="line">&#125;);//</span><br><span class="line">// 单页应用路由切换后 或 在异步获取到pv日志所需的参数后再执行sendPV：</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  &apos;action&apos;:&apos;aplus.sendPV&apos;,</span><br><span class="line">  &apos;arguments&apos;:[&#123;</span><br><span class="line">    is_auto: false</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    // 当前你的应用信息，此两行按应用实际参数修改，不可自定义。</span><br><span class="line">    sapp_id: &apos;*****&apos;,</span><br><span class="line">    sapp_name: &apos;*********&apos;,</span><br><span class="line">    // 自定义PV参数key-value键值对（只能是这种平铺的json，不能做多层嵌套），如：</span><br><span class="line">    x: 111,</span><br><span class="line">    y: 222</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">2.用户信息埋点</span><br><span class="line">// 如采集用户信息是异步行为需要先执行这个BLOCK埋点</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;_hold&apos;, &apos;BLOCK&apos;]</span><br><span class="line">&#125;);</span><br><span class="line">// 设置会员昵称</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_nick&quot;, &quot;当前会员用户昵称&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">// 设置会员ID</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_id&quot;, &quot;当前会员ID&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_dev_id&quot;, &quot;yourDeviceId&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">// 如采集用户信息是异步行为，需要先设置完用户信息后再执行这个START埋点</span><br><span class="line">// 此时被block住的日志会携带上用户信息逐条发出</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;_hold&apos;, &apos;START&apos;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>注意每个应用中稳定性监控中的bid和基础埋点中的sapp_id、sapp_name  是不同的，请根据自己的应用填写信息。</p></li></ul></li></ul><h2 id="uniapp埋点方法和遇见的坑"><a href="#uniapp埋点方法和遇见的坑" class="headerlink" title="uniapp埋点方法和遇见的坑"></a>uniapp埋点方法和遇见的坑</h2><h3 id="遇见的坑"><a href="#遇见的坑" class="headerlink" title="遇见的坑"></a>遇见的坑</h3><p>首先使用uniapp做埋点分析遇见的两大问题：html页面和路由问题。</p><ol><li>uniapp的html页面配置(<a href="https://uniapp.dcloud.io/collocation/manifest?id=h5-template" target="_blank" rel="noopener">h5-template官网文档</a>)</li></ol><ul><li><p>首先在manifest的h5配置选项中的template属性用于配置项目的html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;h5&quot; : &#123;</span><br><span class="line">      &quot;router&quot; : &#123;</span><br><span class="line">          &quot;mode&quot; : &quot;hash&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;template&quot; : &quot;index.html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在根目录创建模板文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">       &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">       &lt;title&gt;</span><br><span class="line">           &lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">       &lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var coverSupport = &apos;CSS&apos; in window &amp;&amp; typeof CSS.supports === &apos;function&apos; &amp;&amp; (CSS.supports(&apos;top: env(a)&apos;) || CSS.supports(&apos;top: constant(a)&apos;))</span><br><span class="line">document.write(&apos;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&apos; + (coverSupport ? &apos;, viewport-fit=cover&apos; : &apos;&apos;) + &apos;&quot; /&gt;&apos;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 自定义模板中引入这个css link,解决页面错乱问题 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= BASE_URL %&gt;static/index.&lt;%= VUE_APP_INDEX_CSS_HASH %&gt;.css&quot; /&gt;</span><br><span class="line">&lt;!-- 引入埋点代码 --&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">       &lt;noscript&gt;</span><br><span class="line">           &lt;strong&gt;Please enable JavaScript to continue.&lt;/strong&gt;</span><br><span class="line">       &lt;/noscript&gt;</span><br><span class="line">       &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><div style="color: #f56c6c;background-color: #fef0f0;padding:10px">注意事项：自定义模板后会产生页面错乱问题，解决方式是在自定义模板中引入下面这个css link <a href="https://ask.dcloud.net.cn/question/65055" target="_blank" rel="noopener">参考解决方案</a></div></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= BASE_URL %&gt;static/index.&lt;%= VUE_APP_INDEX_CSS_HASH %&gt;.css&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>uniapp的类似router配置<br>要给每个页面做埋点，实现方式是在进入每个路由（beforeEach）之前做拦截操作然后进行埋点，但是uniapp不想vue-router一样有这个方法，所以引出与uniapp适用的router方案，就是插件uni-crazy-router。<br>uni-crazy-router：<a href="https://github.com/devilwjp/uni-crazy-router" target="_blank" rel="noopener">github地址</a> <a href="https://ext.dcloud.net.cn/plugin?id=1658" target="_blank" rel="noopener">uniapp-插件市场-简单使用方法</a><br>使用方式：</p><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i uni-crazy-router -S</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 根目录创建src/router/index.js。</span><br><span class="line">   import Vue from &apos;vue&apos;</span><br><span class="line">import uniCrazyRouter from &quot;uni-crazy-router&quot;;</span><br><span class="line">Vue.use(uniCrazyRouter)</span><br><span class="line"></span><br><span class="line">uniCrazyRouter.beforeEach(async (to, from ,next)=&gt;&#123;</span><br><span class="line">    // 逻辑代码</span><br><span class="line">    写流量分析的逻辑代码</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">uniCrazyRouter.afterEach((to, from)=&gt;&#123;</span><br><span class="line">    // 逻辑代码</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">uniCrazyRouter[&apos;on&apos;+&apos;Error&apos;]((to, from)=&gt;&#123;</span><br><span class="line">    // 逻辑代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 在main.js入口文件引入配置的路由</span><br><span class="line">import &apos;./router&apos; // 引入路由</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ul><li><p>html模板文件代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">       &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">       &lt;title&gt;</span><br><span class="line">           &lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">       &lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var coverSupport = &apos;CSS&apos; in window &amp;&amp; typeof CSS.supports === &apos;function&apos; &amp;&amp; (CSS.supports(&apos;top: env(a)&apos;) || CSS.supports(&apos;top: constant(a)&apos;))</span><br><span class="line">document.write(&apos;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&apos; + (coverSupport ? &apos;, viewport-fit=cover&apos; : &apos;&apos;) + &apos;&quot; /&gt;&apos;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 自定义模板中引入这个css link,解决页面错乱问题 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= BASE_URL %&gt;static/index.&lt;%= VUE_APP_INDEX_CSS_HASH %&gt;.css&quot; /&gt;</span><br><span class="line">&lt;!-- 引入api --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">      (function(w, d, s, q, i) &#123;</span><br><span class="line">        w[q] = w[q] || [];</span><br><span class="line">        var f = d.getElementsByTagName(s)[0],j = d.createElement(s);</span><br><span class="line">        j.async = true;</span><br><span class="line">        j.id = &apos;beacon-aplus&apos;;</span><br><span class="line">        j.src = &apos;https://alidt.alicdn.com/alilog/mlog/aplus_cloud.js&apos;;</span><br><span class="line">        f.parentNode.insertBefore(j, f);</span><br><span class="line">      &#125;)(window, document, &apos;script&apos;, &apos;aplus_queue&apos;);</span><br><span class="line">    </span><br><span class="line">      aplus_queue.push(&#123;</span><br><span class="line">        action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">        arguments: [&apos;aplus-rhost-v&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">      &#125;);</span><br><span class="line">      aplus_queue.push(&#123;</span><br><span class="line">        action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">        arguments: [&apos;aplus-rhost-g&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      var u = navigator.userAgent</span><br><span class="line">      var isAndroid = u.indexOf(&apos;Android&apos;) &gt; -1</span><br><span class="line">      var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)</span><br><span class="line">    </span><br><span class="line">      aplus_queue.push(&#123;</span><br><span class="line">        action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">        arguments: [&apos;appId&apos;, isAndroid ? &apos;28302650&apos; : isIOS ? &apos;28328447&apos; : &apos;47130293&apos;]</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 稳定性监控 埋点 --&gt;</span><br><span class="line">&lt;script src=&apos;https://wpk-gate.zjzwfw.gov.cn/static/wpk-jssdk.1.0.2/wpkReporter.js&apos; crossorigin=&apos;true&apos;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">        const config = &#123;</span><br><span class="line">          bid: &apos;*********&apos;,</span><br><span class="line">          signkey: &apos;1234567890abcdef&apos;,</span><br><span class="line">          gateway: &apos;https://wpk-gate.zjzwfw.gov.cn&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">        const wpk = new wpkReporter(config);</span><br><span class="line">        wpk.installAll();</span><br><span class="line">        window._wpk = wpk;</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        console.error(&apos;WpkReporter init fail&apos;, err);</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">       &lt;noscript&gt;</span><br><span class="line">           &lt;strong&gt;Please enable JavaScript to continue.&lt;/strong&gt;</span><br><span class="line">       &lt;/noscript&gt;</span><br><span class="line">       &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.bootcss.com/vConsole/3.3.0/vconsole.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 初始化</span><br><span class="line">    // var vConsole = new VConsole();</span><br><span class="line">    // console.log(&apos;Hello world&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>路由配置代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line">* @description 流量分析埋点</span><br><span class="line">* @author 大梦</span><br><span class="line">*/</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import uniCrazyRouter from &quot;uni-crazy-router&quot;</span><br><span class="line">Vue.use(uniCrazyRouter)</span><br><span class="line">import &#123; allPages &#125; from &apos;../common/index.js&apos; //所有页面的router对象（路径和路径名）</span><br><span class="line"></span><br><span class="line">//添加埋点 - 单页应用路由切换后</span><br><span class="line">uniCrazyRouter.beforeEach((to, from ,next)=&gt;&#123;</span><br><span class="line">let nextRoute = allPages.find(v=&gt;&#123;return v.path==to.url&#125;)</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">arguments: [&apos;_hold&apos;, &apos;BLOCK&apos;]</span><br><span class="line">  &#125;);</span><br><span class="line">// 1.添加基础埋点</span><br><span class="line">try&#123;</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;aplus-waiting&apos;, &apos;MAN&apos;]</span><br><span class="line">&#125;);</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">&apos;action&apos;:&apos;aplus.sendPV&apos;,</span><br><span class="line">&apos;arguments&apos;:[&#123;</span><br><span class="line">is_auto: false</span><br><span class="line">&#125;, &#123;</span><br><span class="line">// 当前你的应用信息，此两行按应用实际参数修改，不可自定义。</span><br><span class="line">bid: &apos;*********&apos;,</span><br><span class="line">sapp_id: &apos;*********&apos;,</span><br><span class="line">sapp_name: &apos;*********&apos;,</span><br><span class="line">page_url: to.url,</span><br><span class="line">page_id: nextRoute.path, // 唯一性</span><br><span class="line">page_name: nextRoute.navigationBarTitleText</span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br><span class="line">&#125; catch(err) &#123;</span><br><span class="line">console.log(&apos;sendPV init fail in policyDetailPage&apos;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2.添加用户信息埋点 （做浙政钉埋点，必须是钉钉用户的真实信息）</span><br><span class="line">let accountId = uni.getStorageSync(&apos;accountId&apos;)</span><br><span class="line">let nickNameCn = uni.getStorageSync(&apos;nickNameCn&apos;)</span><br><span class="line">// console.log(nickNameCn,accountId) </span><br><span class="line">// 如采集用户信息是异步行为需要先执行这个BLOCK埋点</span><br><span class="line">try&#123;</span><br><span class="line">// 设置会员昵称</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_nick&quot;, nickNameCn]</span><br><span class="line">&#125;);</span><br><span class="line">// 设置会员ID</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_id&quot;, accountId]</span><br><span class="line">&#125;);</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_dev_id&quot;, &quot;yourDeviceId&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">&#125; catch(err) &#123;</span><br><span class="line">console.log(&apos;usermessage&apos;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">arguments: [&apos;_hold&apos;, &apos;START&apos;]</span><br><span class="line">&#125;);</span><br><span class="line">   next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>参考文档和开发手册<br><a href="https://gitee.com/Chensanr/daily-code/blob/master/js-basis/%E6%B5%99%E6%94%BF%E9%92%89h5&amp;%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%94%E7%94%A8%E9%87%87%E9%9B%86%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C.pdf" target="_blank" rel="noopener">浙政钉h5&amp;小程序应用采集开发手册</a><br><a href="https://gitee.com/Chensanr/daily-code/blob/master/js-basis/%E6%B5%99%E6%94%BF%E9%92%892.0%E5%BA%94%E7%94%A8%E9%87%87%E9%9B%86%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E.docx" target="_blank" rel="noopener">浙政钉2.0应用采集通用代码及相关说明</a></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>小程序和微信公众号的登录逻辑有点相似，具体可以查看官方API.<br>小程序文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信</a><br>uni-app文档：<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">uni-app</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> login </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javaScript 继承</title>
      <link href="/2019/06/27/js%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/06/27/js%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>javaScript继承</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a><br>深入了解javaScript的原型以及原型链，有利于深入理解js的内部机制。</p><h2 id="ES5继承"><a href="#ES5继承" class="headerlink" title="ES5继承"></a>ES5继承</h2><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><ul><li><p>构造函数、原型对象和实例之间的关系<br>所有函数都是Function构造函数的实例（自定义的构造函数和函数方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function F()&#123;&#125; //构造函数</span><br><span class="line">var f = new F();//实例</span><br><span class="line">F.prototype //原型对象</span><br><span class="line"></span><br><span class="line">// 构造器</span><br><span class="line">F.prototype.constructor === F; // true</span><br><span class="line">F.__proto__ === Function.prototype; // true</span><br><span class="line">Function.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br><span class="line"></span><br><span class="line">// 实例</span><br><span class="line">f.__proto__ === F.prototype; // true</span><br><span class="line">F.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br></pre></td></tr></table></figure></li><li><p>本质：<br>  子构造函数的原型指向父构造函数的实例对象</p></li><li>所有构造函数定义的时候都会默认创建一个原型对象，（即默认原型）所有函数的默认原型 都是Object的实例，所以可以调用Object.prototype的方法。后面介绍的继承方式都是改变构造函数的默认原型。</li><li>每个对象都有一个<strong>proto</strong>的属性，用于指向实例的原型对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function F()&#123;&#125;;</span><br><span class="line">let f = new F();</span><br><span class="line">console.log(f.__proto__)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">constructor:F</span><br><span class="line">__proto__:&#123;</span><br><span class="line">    constructor:Object</span><br><span class="line">&#125;</span><br><span class="line">//</span><br></pre></td></tr></table></figure></li></ul><h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123; </span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Child(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*主*/</span><br><span class="line">//子构造函数的原型指向父构造函数的实例</span><br><span class="line">Child.prototype = new Parent(&apos;father&apos;);</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure><h4 id="类式继承（属性）"><a href="#类式继承（属性）" class="headerlink" title="类式继承（属性）"></a>类式继承（属性）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123; </span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.doSomthing = function() &#123;</span><br><span class="line">    console.log(&apos;parent do something!&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);/*主*/</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;);</span><br><span class="line">child.sayName();      </span><br><span class="line">child.doSomthing();</span><br></pre></td></tr></table></figure><h4 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123; </span><br><span class="line">    this.parentName = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.doSomething = function() &#123;</span><br><span class="line">    console.log(&apos;parent do something!&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);/*2*/</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">/*1*/</span><br><span class="line">Child.prototype = new Parent();      </span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;);</span><br><span class="line">child.sayName();       // child name: son</span><br><span class="line">child.doSomething();</span><br></pre></td></tr></table></figure><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123;</span><br><span class="line">    this.parentName = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);  </span><br><span class="line">    this.name = name;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function create(proto) &#123;//区别：用一个 F 空的构造函数去取代执行了 Parent 这个构造函数，减少两次创建父构造函数调用</span><br><span class="line">    function F()&#123;&#125;</span><br><span class="line">    F.prototype = proto;</span><br><span class="line">    return new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = create(Parent.prototype);/*主*/</span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line">var parent = new Parent(&apos;father&apos;);</span><br><span class="line">parent.sayName();    // parent name: father</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;, &apos;father&apos;);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure><p>如上可看出，我们手动创建了一个 create 函数，但Object.create()函数原理就是上面create方法，所以可以把代码改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123;</span><br><span class="line">    this.parentName = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);  </span><br><span class="line">    this.name = name;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function inheritPrototype(Parent, Child) &#123;</span><br><span class="line">    Child.prototype = Object.create(Parent.prototype);   //修改部分</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Parent, Child);</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var parent = new Parent(&apos;father&apos;);</span><br><span class="line">parent.sayName();      // parent name: father</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;, &apos;father&apos;);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure></p><p>以上为es5的继承部分，实现的是实例原型链部分。</p><h2 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Parent&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    static sayHello()&#123;//构造函数的方法(挂在构造函数上)</span><br><span class="line">        console.log(&apos;hello&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    sayName()&#123;//实例方法(挂在原型上)</span><br><span class="line">        console.log(&apos;my name is &apos; + this.name);</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Child extends Parent&#123;</span><br><span class="line">    constructor(name, age)&#123;</span><br><span class="line">        super(name); // --&gt;对向 Parent.call(this, parentName);</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    sayAge()&#123;</span><br><span class="line">        console.log(&apos;my age is &apos; + this.age);</span><br><span class="line">        return this.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let parent = new Parent(&apos;Parent&apos;);</span><br><span class="line">let child = new Child(&apos;Child&apos;, 18);</span><br><span class="line">console.log(&apos;parent: &apos;, parent); // parent:  Parent &#123;name: &quot;Parent&quot;&#125;</span><br><span class="line"></span><br><span class="line">Parent.sayHello(); // hello</span><br><span class="line">parent.sayName(); // my name is Parent</span><br><span class="line">console.log(&apos;child: &apos;, child); // child:  Child &#123;name: &quot;Child&quot;, age: 18&#125;</span><br><span class="line"></span><br><span class="line">Child.sayHello(); // hello  子构造函数继承了父构造函数的方法</span><br><span class="line">child.sayName(); // my name is Child</span><br><span class="line">child.sayAge(); // my age is 18</span><br></pre></td></tr></table></figure><p>这段代码里有两条原型链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1、构造器原型链</span><br><span class="line">Child.__proto__ === Parent; // true</span><br><span class="line"></span><br><span class="line">Parent.__proto__ === Function.prototype; // true</span><br><span class="line">Function.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br><span class="line">// 2、实例原型链</span><br><span class="line">child.__proto__ === Child.prototype; // true</span><br><span class="line"></span><br><span class="line">Child.prototype.__proto__ === Parent.prototype; // true</span><br><span class="line">Parent.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br></pre></td></tr></table></figure></p><p>以上是es6的继承部分，实现了除实例原型链部分外 还有构造器原型链部分。</p><p>ES6 extends 继承，主要就是：<br>1.把子类构造函数(Child)的原型(<strong>proto</strong>)指向了父类构造函数(Parent)，<br>2.把子类实例child的原型对象(Child.prototype) 的原型(<strong>proto</strong>)指向了父类parent的原型对象(Parent.prototype)。<br>3.子类构造函数Child继承了父类构造函数Preant的里的属性。使用super调用的(ES5则用call或者apply调用传参)。<br>其中2，3其实就是实现es5中寄生组合式继承。</p><h3 id="ES6的extends做了哪些操作"><a href="#ES6的extends做了哪些操作" class="headerlink" title="ES6的extends做了哪些操作"></a>ES6的extends做了哪些操作</h3><p>1.new、Object.create和Object.setPrototypeOf可以设置<strong>proto</strong><br>    new出来的实例的<strong>proto</strong>指向构造函数的prototype，这就是new做的事情。<br>    Object.create 是ES5的，该方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。<br>    Object.setPrototypeOf 是ES6的，设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或 null。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object.setPrototypeOf = function (obj, proto) &#123;</span><br><span class="line">    obj.__proto__ = proto;</span><br><span class="line">    return obj; </span><br><span class="line">&#125;</span><br><span class="line">比如es6中实现继承的过程中</span><br><span class="line">Child.prototype.__proto__ = Parent.prototype;</span><br><span class="line">Child.__proto__ = Parent;</span><br><span class="line">即可调用此方法实现</span><br><span class="line">Object.setPrototypeOf（Child，Parent）</span><br><span class="line">Object.setPrototypeOf（Child.prototype，Parent.prototype）</span><br></pre></td></tr></table></figure></code></pre><p>2.ES6的extends<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// ES5 实现ES6 extends的例子</span><br><span class="line">function Parent(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.sayHello = function()&#123;</span><br><span class="line">    console.log(&apos;hello&apos;);</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function()&#123;</span><br><span class="line">    console.log(&apos;my name is &apos; + this.name);</span><br><span class="line">    return this.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(name, age)&#123;</span><br><span class="line">    // 相当于super</span><br><span class="line">    Parent.call(this, name);</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">// new</span><br><span class="line">function object()&#123;</span><br><span class="line">    function F() &#123;&#125;</span><br><span class="line">    F.prototype = proto;</span><br><span class="line">    return new F();</span><br><span class="line">&#125;</span><br><span class="line">function _inherits(Child, Parent)&#123;</span><br><span class="line">    // Object.create</span><br><span class="line">    Child.prototype = Object.create(Parent.prototype);</span><br><span class="line">    // __proto__</span><br><span class="line">    // Child.prototype.__proto__ = Parent.prototype;</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">    // ES6</span><br><span class="line">    // Object.setPrototypeOf(Child, Parent);</span><br><span class="line">    // __proto__</span><br><span class="line">    Child.__proto__ = Parent;//es6实现构造器原型链继承的方式，子构造函数可以调用父构造函数的静态方法</span><br><span class="line">&#125;</span><br><span class="line">_inherits(Child,  Parent);</span><br><span class="line">Child.prototype.sayAge = function()&#123;</span><br><span class="line">    console.log(&apos;my age is &apos; + this.age);</span><br><span class="line">    return this.age;</span><br><span class="line">&#125;</span><br><span class="line">var parent = new Parent(&apos;Parent&apos;);</span><br><span class="line">var child = new Child(&apos;Child&apos;, 18);</span><br><span class="line">console.log(&apos;parent: &apos;, parent); // parent:  Parent &#123;name: &quot;Parent&quot;&#125;</span><br><span class="line">Parent.sayHello(); // hello</span><br><span class="line">parent.sayName(); // my name is Parent</span><br><span class="line">console.log(&apos;child: &apos;, child); // child:  Child &#123;name: &quot;Child&quot;, age: 18&#125;</span><br><span class="line">Child.sayHello(); // hello</span><br><span class="line">child.sayName(); // my name is Child</span><br><span class="line">child.sayAge(); // my age is 18</span><br></pre></td></tr></table></figure></p><h2 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h2><pre><code>两者都实现了实例原型链继承但是ES6实现了构造器原型链继承，既Child.__proto__ = Parent;</code></pre><p>参考文章：<br>    <a href="https://zhuanlan.zhihu.com/p/25578222" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25578222</a><br>    <a href="https://zhuanlan.zhihu.com/p/57336944" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/57336944</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise使用</title>
      <link href="/2019/05/10/promise/"/>
      <url>/2019/05/10/promise/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Promise使用</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="Promise构造函数"><a href="#Promise构造函数" class="headerlink" title="Promise构造函数"></a>Promise构造函数</h2><p>Promise就是ES6原生提供的一个对象，用来传递异步操作的消息。<br>它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>new Promise( function(resolve, reject) {…} /<em> executor </em>/  );</p><ul><li>executor是带有 resolve 和 reject 两个参数的函数，resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回所建promise实例对象前被调用）。</li><li>executor 内部通常会执行一些异步操作，一旦异步操作执行完毕(可能成功/失败)，要么调用resolve函数来将promise状态改成fulfilled，要么调用reject 函数将promise的状态改为rejected。</li><li>调用resolve和reject能将分别将promise实例的状态变成fulfilled和rejected，只有状态变成已完成（即fulfilled和rejected之一），才能触发状态的回调（then,catch）。</li></ul><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>一个 Promise有以下几种状态:</p><pre><code>pending: 初始状态，既不是成功，也不是失败状态。fulfilled: 意味着操作成功完成。rejected: 意味着操作失败。</code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ol><li><p>Promise.all(iterable) // 所有的完成<br>返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败（既若参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果）。</p><p>参数iterable：<br>一个可迭代对象，如 Array 或 String。</p><p>返回值：<br>参数是一个空的可迭代对象，则返回一个已完成（already resolved）状态的 Promise。<br>参数不包含任何 promise，则返回一个异步完成（asynchronously resolved） Promise。<br>返回一个处理中（pending）的Promise。则返回的 promise 完成或失败的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var p = Promise.all([1,2,3]);</span><br><span class="line">var p2 = Promise.all([1,2,3, Promise.resolve(444)]);</span><br><span class="line">var p3 = Promise.all([1,2,3, Promise.reject(555)]);</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(p);</span><br><span class="line">    console.log(p2);</span><br><span class="line">    console.log(p3);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Promise &#123; &lt;state&gt;: &quot;fulfilled&quot;, &lt;value&gt;: Array[3] &#125;</span><br><span class="line">// Promise &#123; &lt;state&gt;: &quot;fulfilled&quot;, &lt;value&gt;: Array[4] &#125;</span><br><span class="line">// Promise &#123; &lt;state&gt;: &quot;rejected&quot;, &lt;reason&gt;: 555 &#125; //失败</span><br></pre></td></tr></table></figure></li><li><p>Promise.race(iterable) // 竞速，完成一个即可<br>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。<br>谁第一个变成已完成状态，则返回的Promise对象将以这个第一个状态已完成的状态作为他的状态结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var promise1 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 500, &apos;one&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var promise2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 100, &apos;two&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var promise3 = new Promise(function(resolve, reject) &#123; </span><br><span class="line">    setTimeout(reject, 100, &quot;six&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([promise1, promise2]).then(function(value) &#123;</span><br><span class="line">console.log(value);</span><br><span class="line">// Both resolve, but promise2 is faster</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// logs</span><br><span class="line">&quot;two&quot; promise2先完成</span><br><span class="line"></span><br><span class="line">Promise.race([promise1, promise3]).then(function(value) &#123;</span><br><span class="line">// 未被调用             </span><br><span class="line">&#125;, function(reason) &#123;</span><br><span class="line">console.log(reason); // &quot;six&quot;</span><br><span class="line">// p6 更快，所以它失败了</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Promise.reject(reason)<br>返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise.reject(new Error(&quot;fail&quot;)).then(function(result) &#123;</span><br><span class="line">// 未被调用</span><br><span class="line">&#125;, function(error) &#123;</span><br><span class="line">console.log(error); // stacktrace</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Promise.resolve(value)<br>返回一个以给定值解析后的Promise 对象。但如果这个值是个thenable（即带有then方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态（指resolved/rejected/pending/settled）；如果传入的value本身就是promise对象，则该对象作为Promise.resolve方法的返回值返回；否则以该值为成功状态返回promise对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(&quot;Success&quot;).then(function(value) &#123;</span><br><span class="line">console.log(value); // &quot;Success&quot;</span><br><span class="line">&#125;, function(value) &#123;</span><br><span class="line">// 不会被调用</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ol><li><p>then()<br> 添加解决(fulfillment)和拒绝(rejection)回调到当前 promise, 返回一个新的 promise.</p><p> 语法：<br> p.then(onFulfilled, onRejected)或<br> p.then(function(value) {<br> // fulfillment<br> }, function(reason) {<br> // rejection<br> });<br> 当Promise变成接受状态（fulfillment）时，参数onFulfilled作为回调函数被调用<br> 当Promise变成拒绝状态（rejection ）时，参数onRejected作为回调函数被调用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var promise1 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">resolve(&apos;Success!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(function(value) &#123;</span><br><span class="line">console.log(value);</span><br><span class="line">// expected output: &quot;Success!&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 链式调用：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(&quot;foo&quot;)</span><br><span class="line">.then(function(string) &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        string += &apos;bar&apos;;</span><br><span class="line">        resolve(string);</span><br><span class="line">    &#125;, 1);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">// 2. 接收 &quot;foobar&quot;, 放入一个异步函数中处理该字符串</span><br><span class="line">.then(function(string) &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">    string += &apos;baz&apos;;</span><br><span class="line">    console.log(string+&apos;1&apos;);</span><br><span class="line">    &#125;, 1)</span><br><span class="line">    return string;</span><br><span class="line">&#125;)</span><br><span class="line">// 字符串实际上是由上一个回调函数之前的那块异步代码处理的。</span><br><span class="line">.then(function(string) &#123;</span><br><span class="line">    console.log(&quot;Last Then:  oops... didn&apos;t bother to instantiate and return &quot; +</span><br><span class="line">                &quot;a promise in the prior then so the sequence may be a bit &quot; +</span><br><span class="line">                &quot;surprising&quot;);</span><br><span class="line"></span><br><span class="line">    // 注意 `string` 这时不会存在 &apos;baz&apos;。</span><br><span class="line">    // 因为这是发生在我们通过setTimeout模拟的异步函数中。</span><br><span class="line">    console.log(string+&apos;2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//logs</span><br><span class="line">Last Then:  oops... didn&apos;t bother to instantiate and return a promise in the prior then so the sequence may be a bit surprising</span><br><span class="line">foobar2</span><br><span class="line">foobarbaz1</span><br></pre></td></tr></table></figure></li><li><p>catch()<br> 返回一个Promise，并且处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var p1 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">resolve(&apos;Success&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(function(value) &#123;</span><br><span class="line">console.log(value); // &quot;Success!&quot;</span><br><span class="line">&#125;).catch(function(e) &#123;</span><br><span class="line">console.log(e); // &quot;oh, no!&quot; //失败调用</span><br><span class="line">&#125;).then(function()&#123;</span><br><span class="line">console.log(&apos;after a catch the chain is restored&apos;);</span><br><span class="line">&#125;, function () &#123;</span><br><span class="line">console.log(&apos;Not fired due to the catch&apos;);//失败调用</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//logs</span><br><span class="line">Success</span><br><span class="line">after a catch the chain is restored</span><br></pre></td></tr></table></figure></li><li><p>finally()<br> 添加一个事件处理回调于当前promise对象，并且在原promise对象解析完毕后，返回一个新的promise对象。<br> 回调会在当前promise运行完毕后被调用，无论当前promise的状态是完成(fulfilled)还是失败(rejected)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(myRequest).then(function(response) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">.then(function(json) &#123; </span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(error) &#123; console.log(error); &#125;)</span><br><span class="line">.finally(function() &#123; isLoading = false; &#125;);//无论成功失败都会调用</span><br></pre></td></tr></table></figure></li></ol><h4 id="实例：红绿灯"><a href="#实例：红绿灯" class="headerlink" title="实例：红绿灯"></a>实例：红绿灯</h4><p>红灯三秒亮一次，绿灯一秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯？（用Promse实现）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var d = new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function red()&#123;</span><br><span class="line">    console.log(&apos;red&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function green()&#123;</span><br><span class="line">    console.log(&apos;green&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function yellow()&#123;</span><br><span class="line">    console.log(&apos;yellow&apos;);</span><br><span class="line">&#125;</span><br><span class="line">var tic = function(timer, cb)&#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            cb();</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, timer);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">var step = function(def) &#123;</span><br><span class="line">    def.then(function()&#123;</span><br><span class="line">        return tic(3000, red);</span><br><span class="line">    &#125;).then(function()&#123;</span><br><span class="line">        return tic(2000, green);</span><br><span class="line">    &#125;).then(function()&#123;</span><br><span class="line">        return tic(1000, yellow);</span><br><span class="line">    &#125;).then(function()&#123;</span><br><span class="line">        step(def);//循环调用</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step(d);</span><br></pre></td></tr></table></figure></p><h2 id="async和await的用法"><a href="#async和await的用法" class="headerlink" title="async和await的用法"></a>async和await的用法</h2><p>1.async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p><ul><li><p>async 函数返回的是一个 Promise 对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  如果在async函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。所以async函数可以使用then链处理这个返回的对象。如果 async 函数没有返回值，它会返回Promise.resolve(undefined)。</span><br><span class="line">  async function testAsync() &#123;</span><br><span class="line">    return &quot;hello async&quot;;</span><br><span class="line">&#125;</span><br><span class="line">  testAsync().then(v =&gt; &#123;</span><br><span class="line">    console.log(v);    // 输出 hello async</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>await  操作符用于等待一个 Promise 对象或者其它值（换句话说，就是没有特殊限定）。它只能在异步函数 async function 中使用。</p></li></ul><p>2.await 表达式会暂停当前 async function 的执行，等待 Promise 处理完成。</p><ul><li><p>若 Promise 正常处理(fulfilled)，其回调的resolve函数参数作为 await 表达式的值，继续执行 async function。</p></li><li><p>若 Promise 处理异常(rejected)，await 表达式会把 Promise 的异常原因抛出。</p></li><li><p>如果等待的不是 Promise 对象，则返回该值本身。</p></li></ul><p>3.async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。所以await 必须用在 async 函数中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function takeLongTime() &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">        //setTimeout(() =&gt; resolve(&quot;long_time_value&quot;), 1000);</span><br><span class="line">        //或者调用后台接口</span><br><span class="line">        findById(&#123; id &#125;).then(response =&gt; &#123;</span><br><span class="line">          const res = response.data</span><br><span class="line">          if (res.code == &apos;000000&apos;) &#123;</span><br><span class="line">            const data = res.data</span><br><span class="line">            resolve(true)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: response.mesg,</span><br><span class="line">              type: &apos;error&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function test() &#123;</span><br><span class="line">    const v = await takeLongTime();//await等待一个返回promise的函数 或者 可以直接等待一个primise对象</span><br><span class="line">    console.log(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(res=&gt;&#123;&#125;).catch();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>函数节流和防抖</title>
      <link href="/2019/04/15/debounAThro/"/>
      <url>/2019/04/15/debounAThro/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>节流和防抖</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实际开发过程中，由于事件频繁被触发，频繁执行DOM操作、资源加载等重行为，会导致浏览器崩溃等情况。<br>常见的事件：<br>    window对象的resize、scroll事件<br>    拖拽时的mousemove事件<br>    文字输入、自动完成的keyup事件<br>    …</p><h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h2><p>1.当调用动作过n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。<br>eg:如果有人进电梯（触发事件），那电梯将在10秒钟后出发（执行事件监听器），这时如果又有人进电梯了（在10秒内再次触发该事件），我们又得等10秒再出发（重新计时）。</p><p>2.应用场景：</p><pre><code>给提交按钮添加防抖，防止表单多次提交输入框连续输入只在用户停止后请求数据，用函数防抖能有效减少请求次数(实时搜索防抖)判断scroll是否滑到底部，滚动事件+函数防抖</code></pre><p>3.防抖是适合多次事件一次响应的情况</p><p>4.简单实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var debounce = function(idle, action)&#123;</span><br><span class="line">  var last</span><br><span class="line">  return function()&#123;</span><br><span class="line">    var ctx = this, args = arguments</span><br><span class="line">    clearTimeout(last)</span><br><span class="line">    last = setTimeout(function()&#123;</span><br><span class="line">        action.apply(ctx, args)</span><br><span class="line">    &#125;, idle)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.事例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//uniapp小程序实时搜索防抖</span><br><span class="line">search(res)&#123;</span><br><span class="line">        this.lastTimeStamp = res.timeStamp;</span><br><span class="line">        let _this = this;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">                if(_this.lastTimeStamp == res.timeStamp)&#123;</span><br><span class="line">                    _this.entName = res.detail.value;</span><br><span class="line">                    _this.getDataList();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,800)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h2><p>1.预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期。<br>eg:当 1 秒内连续播放 24 张以上的图片时，在人眼的视觉中就会形成一个连贯的动画，所以在电影的播放（以前是，现在不知道）中基本是以每秒 24 张的速度播放的。<br>    或者说 第一个人进电梯之后，开始计算时间10s，不管有没有人进入电梯，10s之后电梯出发，不会重新计时。</p><p>2.应用场景：</p><pre><code>DOM元素拖拽Canvas画笔功能游戏中的刷新率</code></pre><p>3.节流是适合大量事件按时间做平均分配触发</p><p>4.简单实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var throttle = function(delay, action)&#123;</span><br><span class="line">  var last = null;</span><br><span class="line">  return function()&#123;</span><br><span class="line">    var curr = +new Date()</span><br><span class="line">    if (curr - last &gt; delay|| !last)&#123;</span><br><span class="line">      action.apply(this, arguments)</span><br><span class="line">      last = curr </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总体来看，函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行</p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用echarts实现各种效果</title>
      <link href="/2019/03/12/echarts-Carousel/"/>
      <url>/2019/03/12/echarts-Carousel/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>用echarts实现各种效果</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司很多项目使用的都是echarts技术，托产品的福倒是学习了很多。下面是经常遇到的echarts需求，会不定期更新。</p><h2 id="echarts地图-实现地图联动轮播"><a href="#echarts地图-实现地图联动轮播" class="headerlink" title="echarts地图-实现地图联动轮播"></a>echarts地图-实现地图联动轮播</h2><p>公司接了一个湖州绿贷通项目，项目要求实现地图showTip轮播。项目以湖州市为例，如下图所示效果：<br><img src="/images/web/GIF.gif" alt="logo"></p><h3 id="先配置地图"><a href="#先配置地图" class="headerlink" title="先配置地图"></a>先配置地图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;main&quot; style=&quot;width: 600px;height:500px;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">this.geoEchart = echarts.init(document.getElementById(&apos;geoEchart&apos;));</span><br><span class="line">echarts.registerMap(&apos;330500&apos;, jsonRegions);   //jsonRegions为湖州市区域的地图json文件</span><br><span class="line">this.geoEchart.setOption(mapOption);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//1.地图初始配置项</span><br><span class="line">var mapOption =&#123;</span><br><span class="line">    tooltip : &#123;</span><br><span class="line">        show:true,</span><br><span class="line">        padding:0,</span><br><span class="line">        borderWidth:0,</span><br><span class="line">        trigger: &apos;item&apos;,</span><br><span class="line">        formatter: function (p) &#123;</span><br><span class="line">            var authCredit = p.data.datas; //authCredit为后台获取的数据</span><br><span class="line">            var divs = &apos;&lt;div class=&quot;tooltip&quot; style=&quot;background-color: transparent;&quot;&gt;&apos; +</span><br><span class="line">                &apos;&lt;div class=&quot;credit flxc&quot;&gt;&apos; +</span><br><span class="line">                    &apos;&lt;div title=&quot;&apos;+toHtmlStr(authCredit.creditCompanyName,&apos;无&apos;)+&apos;&quot;&gt;&apos;+toHtmlStr(authCredit.creditCompanyName,&apos;无&apos;)+&apos;&lt;/div&gt;&apos; +</span><br><span class="line">                    &apos;&lt;div&gt;&apos;+toHtmlStr(authCredit.creditBankName,&apos;&apos;)+&apos;&lt;/div&gt;&apos; +</span><br><span class="line">                    &apos;&lt;div&gt;&lt;span&gt;&apos;+toHtmlStr(authCredit.creditLoanAmount,&apos;&apos;)+&apos;&lt;/span&gt;&lt;span&gt;&amp;nbsp;万元&lt;/span&gt;&lt;/div&gt;&apos; +</span><br><span class="line">                    &apos;&lt;/div&gt;&apos; +</span><br><span class="line">                &apos;&lt;div class=&quot;company flxc&quot;&gt;&apos; +</span><br><span class="line">                    &apos;&lt;div title=&quot;&apos;+toHtmlStr(authCredit.authCompanyName,&apos;无&apos;)+&apos;&quot;&gt;&apos;+toHtmlStr(authCredit.authCompanyName,&apos;无&apos;)+&apos;&lt;/div&gt;&apos; +</span><br><span class="line">                    &apos;&lt;div&gt;最新注册&lt;/div&gt;&lt;div&gt;地点：&apos;+toHtmlStr(authCredit.county,&apos;&apos;)+&apos;&lt;/div&gt;&apos; +</span><br><span class="line">                    &apos;&lt;/div&gt;&apos; +</span><br><span class="line">                &apos;&lt;/div&gt;&apos;</span><br><span class="line">            return divs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//2.设置后期地图配置项</span><br><span class="line">that.geoEchart.setOption(&#123;</span><br><span class="line">    series:[</span><br><span class="line">        &#123;</span><br><span class="line">            name:&apos;test&apos;,</span><br><span class="line">            itemStyle:&#123;</span><br><span class="line">                normal:&#123;</span><br><span class="line">                    areaColor:&apos;rgba(0,143,255,1)&apos;,</span><br><span class="line">                    borderColor:&apos;#00F5FF&apos;,</span><br><span class="line">                    borderWidth:1.4,</span><br><span class="line">                    borderType:&apos;solid&apos;,</span><br><span class="line">                    opacity:0.7,</span><br><span class="line">                &#125;,</span><br><span class="line">                emphasis:&#123;</span><br><span class="line">                    areaColor:&apos;rgba(0,240,255,0.9)&apos;,</span><br><span class="line">                    borderColor:&apos;#00F5FF&apos;,</span><br><span class="line">                    borderWidth:1.4,</span><br><span class="line">                    borderType:&apos;solid&apos;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            type:&apos;map&apos;,</span><br><span class="line">            map:&apos;330500&apos;,//湖州代码</span><br><span class="line">            data:temp,  //设置后台数据 传给formatter 的p.data</span><br><span class="line">            label:&#123;</span><br><span class="line">                normal:&#123;</span><br><span class="line">                    show:true,</span><br><span class="line">                    color:&apos;#fff&apos;,</span><br><span class="line">                    fontSize:16</span><br><span class="line">                &#125;,</span><br><span class="line">                emphasis:&#123;</span><br><span class="line">                    show:true,</span><br><span class="line">                    color:&apos;#fff&apos;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;);</span><br><span class="line">//3.轮播</span><br><span class="line"> this.autohover();</span><br></pre></td></tr></table></figure><h3 id="轮播方法"><a href="#轮播方法" class="headerlink" title="轮播方法"></a>轮播方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">自动轮播showTip的代码</span><br><span class="line"></span><br><span class="line">autohover:function(data)&#123;</span><br><span class="line">        var that =this;</span><br><span class="line">        that.count = 0;</span><br><span class="line">        that.timeTicket = null;</span><br><span class="line">        that.dataLength = 5;//此处设置的是需要轮播的次数</span><br><span class="line">        that.timeTicket &amp;&amp; clearInterval(that.timeTicket);</span><br><span class="line"></span><br><span class="line">        //默认选中第一项</span><br><span class="line">        function defaultSelect() &#123;</span><br><span class="line">            that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                type: &apos;showTip&apos;,</span><br><span class="line">                seriesIndex: 0,</span><br><span class="line">                dataIndex: 0</span><br><span class="line">            &#125;);</span><br><span class="line">            that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                type:&apos;mapSelect&apos;,</span><br><span class="line">                seriesIndex: 0,</span><br><span class="line">                dataIndex:0</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        //10s 轮播一项</span><br><span class="line">        that.timeTicket = setInterval(function() &#123;</span><br><span class="line">            that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                type: &apos;highlight&apos;,</span><br><span class="line">                seriesIndex: 0,</span><br><span class="line">                dataIndex:  (that.count) % that.dataLength</span><br><span class="line">            &#125;);</span><br><span class="line">            that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                type: &apos;showTip&apos;,</span><br><span class="line">                seriesIndex: 0,</span><br><span class="line">                dataIndex: (that.count) % that.dataLength</span><br><span class="line">            &#125;);</span><br><span class="line">            that.count++;</span><br><span class="line">        &#125;, 10000);</span><br><span class="line">        //hover时 清除轮播 showTip被选中元素</span><br><span class="line">        this.geoEchart.on(&apos;mouseover&apos;, function(params) &#123;</span><br><span class="line">            clearInterval(that.timeTicket);</span><br><span class="line">            that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                type: &apos;highlight&apos;,</span><br><span class="line">                seriesIndex: 0,</span><br><span class="line">                dataIndex: params.dataIndex</span><br><span class="line">            &#125;);</span><br><span class="line">            that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                type: &apos;showTip&apos;,</span><br><span class="line">                seriesIndex: 0,</span><br><span class="line">                dataIndex: params.dataIndex,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        //leave时 清除被选中的（包括默认） 重新轮播</span><br><span class="line">        this.geoEchart.on(&apos;mouseout&apos;, function(params) &#123;</span><br><span class="line">            that.timeTicket &amp;&amp; clearInterval(that.timeTicket);</span><br><span class="line">            that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                type:&apos;mapUnSelect&apos;,</span><br><span class="line">                seriesIndex: 0,</span><br><span class="line">                dataIndex:params.dataIndex</span><br><span class="line">            &#125;);</span><br><span class="line">            that.timeTicket = setInterval(function() &#123;</span><br><span class="line">                that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                    type: &apos;highlight&apos;,</span><br><span class="line">                    seriesIndex: 0,</span><br><span class="line">                    dataIndex: (that.count) % that.dataLength</span><br><span class="line">                &#125;);</span><br><span class="line">                that.geoEchart.dispatchAction(&#123;</span><br><span class="line">                    type: &apos;showTip&apos;,</span><br><span class="line">                    seriesIndex: 0,</span><br><span class="line">                    dataIndex: (that.count) % that.dataLength</span><br><span class="line">                &#125;);</span><br><span class="line">                that.count++;</span><br><span class="line">            &#125;, 10000);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="echarts柱状图-实现不同柱体渐变色"><a href="#echarts柱状图-实现不同柱体渐变色" class="headerlink" title="echarts柱状图-实现不同柱体渐变色"></a>echarts柱状图-实现不同柱体渐变色</h2><p>不同柱状体之间有不同的渐变色，实现效果如下：<br><img src="/images/other/hexo/green.png" alt=""></p><h3 id="先定义变量把柱状体的渐变色放进去"><a href="#先定义变量把柱状体的渐变色放进去" class="headerlink" title="先定义变量把柱状体的渐变色放进去"></a>先定义变量把柱状体的渐变色放进去</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var series1Colors = [new echarts.graphic.LinearGradient(</span><br><span class="line">    0, 0, 0, 1,</span><br><span class="line">    [</span><br><span class="line">        &#123;offset: 0, color: &apos;#00C3FF&apos;&#125;,</span><br><span class="line">        &#123;offset: 1, color: &apos;rgba(0, 195, 255, 0.5)&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">), new echarts.graphic.LinearGradient(</span><br><span class="line">    0, 0, 0, 1,</span><br><span class="line">    [</span><br><span class="line">        &#123;offset: 0, color: &apos;#0066FF&apos;&#125;,</span><br><span class="line">        &#123;offset: 1, color: &apos;rgba(0, 102, 255, 0.6)&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">), new echarts.graphic.LinearGradient(</span><br><span class="line">    0, 0, 0, 1,</span><br><span class="line">    [</span><br><span class="line">        &#123;offset: 0, color: &apos;#FF911C&apos;&#125;,</span><br><span class="line">        &#123;offset: 1, color: &apos;rgba(255, 145, 28, 0.5)&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">), new echarts.graphic.LinearGradient(</span><br><span class="line">    0, 0, 0, 1,</span><br><span class="line">    [</span><br><span class="line">        &#123;offset: 0, color: &apos;#F15887&apos;&#125;,</span><br><span class="line">        &#123;offset: 1, color: &apos;rgba(241, 88, 135, 0.5)&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">), new echarts.graphic.LinearGradient(</span><br><span class="line">    0, 0, 0, 1,</span><br><span class="line">    [</span><br><span class="line">        &#123;offset: 0, color: &apos;#5EEB8D&apos;&#125;,</span><br><span class="line">        &#123;offset: 1, color: &apos;rgba(0, 255, 218, 0.5)&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">), new echarts.graphic.LinearGradient(</span><br><span class="line">    0, 0, 0, 1,</span><br><span class="line">    [</span><br><span class="line">        &#123;offset: 0, color: &apos;#FFDD00&apos;&#125;,</span><br><span class="line">        &#123;offset: 1, color: &apos;rgba(255, 221, 0, 0.5)&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">)];</span><br></pre></td></tr></table></figure><h3 id="柱状图配置"><a href="#柱状图配置" class="headerlink" title="柱状图配置"></a>柱状图配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">this.barChart.setOption(&#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: [] //x轴中的六个区域</span><br><span class="line">    &#125;,</span><br><span class="line">    series:[&#123;</span><br><span class="line">        type:&apos;bar&apos;,</span><br><span class="line">        data : temp.map(function (v,i) &#123;  //temp是每个x轴对应的数据</span><br><span class="line">            return &#123;</span><br><span class="line">                value: v || 0,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                    normal:&#123;</span><br><span class="line">                        barBorderRadius: false,</span><br><span class="line">                        color:series1Colors[i%6]  //对区域个数取余 获取对应渐变色</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                label:&#123;</span><br><span class="line">                    show:true,</span><br><span class="line">                    position:&apos;top&apos;,</span><br><span class="line">                    formatter: &apos;&#123;c&#125; 家&apos;,</span><br><span class="line">                    textStyle:&#123;</span><br><span class="line">                        color:&apos;#53F5FF&apos;,</span><br><span class="line">                        fontSize:16</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="echarts地图"><a href="#echarts地图" class="headerlink" title="echarts地图"></a>echarts地图</h2><h2 id="echarts地图-百度地图"><a href="#echarts地图-百度地图" class="headerlink" title="echarts地图+百度地图"></a>echarts地图+百度地图</h2>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器输入url之后发生了什么?</title>
      <link href="/2019/02/23/url-opeation/"/>
      <url>/2019/02/23/url-opeation/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>浏览器输入url之后发生了什么?</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为前端开发人员，这个问题在面试时候碰到的概率大概为80%，为了不一知半解的回答，我还是掏出了我的珍藏版大学课本，重新学习了一下基础知识，再站在大佬们的肩上做出总结。</p><p>从输入url到页面展示大概经过下面这些过程：</p><ul><li>DNS域名解析</li><li>建立TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP响应</li><li>关闭TCP连接</li><li>浏览器解析渲染页面</li></ul><p>比如我们在浏览器地址栏中输入<strong><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></strong>（如下图），那么在你还没有按“enter”之前,浏览器会从历史记录、书签或缓存中查找地址，如果找到了，会从缓存中调出页面显示出来。</p><p><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181109165814.png" alt=""></p><h2 id="步骤一：DNS域名解析"><a href="#步骤一：DNS域名解析" class="headerlink" title="步骤一：DNS域名解析"></a>步骤一：DNS域名解析</h2><h3 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h3><p>在讲解DNS域名解析这个过程之前，我们需要了解一下几个专业知识：<br><strong>URL</strong>:(Uniform Resource Locator)统一资源定位符，是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。</p><p><strong>IP地址</strong>：(Internet Protocol Address),网际协议地址,一种在internet上某一台计算机或计算机组的名称，是分配给网上上使用网际协议（英语：Internet Protocol, IP）的设备的数字标签。常见的IP地址分为IPv4与IPv6两大类，但是也有其他不常用的小分类。</p><p>每个IP可唯一标识一台主机，但是IP地址是一个32位的数字，为了便于记忆，我们通常把按每字节(8位)划分，然后用10进制表示出来，即我们通常说的点分十进制（在IPV6的中采用的是冒号分十六进制）。<br>比如192.168.144.1用二进制表示就是：11000000 10101000 10010000 00000001</p><p><strong>域名</strong>：(Domain Name)，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。<br>以<strong><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></strong>为例，http是通信使用的协议，baidu.com是域名，www是提供服务的机器的名字（计算机名），计算机名+域名才是主机名，即<strong><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong>是主机名（hostname）。</p><p><strong>DNS</strong>：(Domain Name System),因特网上域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p><p><strong>Hosts文件</strong>:系统文件，将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。<br>*Hosts文件配置的映射是静态的，如果网络上的计算机更改了请及时更新IP地址，否则将不能访问。</p><h3 id="DNS域名解析过程"><a href="#DNS域名解析过程" class="headerlink" title="DNS域名解析过程"></a>DNS域名解析过程</h3><p>浏览器查找域名的IP地址过程如下（输入url，按了enter之后的）：</p><ol><li><p>一般而言，一开始会在浏览器的缓存里面查找是否有该域名对应的IP地址，如果有，则直接返回该IP地址；如果没有，则查找本地的Hosts文件中是否有，如果有，则返回对应的IP地址；如果没有，则查找路由器缓存中是否有对应的IP地址，如果有，则返回(浏览器缓存-&gt; 本地Hosts文件-&gt;路由器缓存)；</p></li><li><p>如果在浏览器缓存中、hosts文件中、路由器缓存中都没有找到ip地址，浏览器会发出一个 DNS请求到本地DNS服务器（本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信等）；DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是以递归方式进行查询（<strong>递归查询</strong>）。如果没有，本地DNS服务器还要向DNS根服务器进行查询。</p></li><li><p>根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。</p></li><li><p>本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。（<strong>迭代查询</strong>）</p></li><li><p>最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。</p></li></ol><p>借下面大佬图直观的告诉你整个解析过程：<a href="https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">来源</a><br><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181112144850.png" alt=""></p><h3 id="DNS查询的两种方式：递归查询和迭代查询"><a href="#DNS查询的两种方式：递归查询和迭代查询" class="headerlink" title="DNS查询的两种方式：递归查询和迭代查询"></a>DNS查询的两种方式：递归查询和迭代查询</h3><p>当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式：</p><ol><li><p>递归查询<br>局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。<br>最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。<br>借下面大佬图直观的告诉你：<a href="https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">来源</a><br><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181112150451.png" alt=""><br>比如DNS域名解析过程中的客户端向本地DNS服务器发出查询请求就属于递归查询，本地客户端向本地DNS server发送请求,本地DNS server自己没有再一级一级往下查询，知道查询结果出来之后，本地DNS server再向客户端返回请求结果。也就是说客户端不用自己去查。</p></li><li><p>迭代查询<br>局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。<br>也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。<br>借下面大佬图直观的告诉你：<a href="https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">来源</a><br><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181112150455.png" alt=""><br>比如本地DNS server与根DNS服务器、域服务器、解析域服务器之间就属于迭代查询。需要本地DNS server自己去查。</p></li></ol><h2 id="步骤二：建立TCP连接"><a href="#步骤二：建立TCP连接" class="headerlink" title="步骤二：建立TCP连接"></a>步骤二：建立TCP连接</h2><p>拿到IP地址后，客户端浏览器会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序80端口发起TCP的连接请求。<br>这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。</p><h3 id="知识详解"><a href="#知识详解" class="headerlink" title="知识详解"></a>知识详解</h3><p><strong>协议</strong>：协议就是计算机与计算机之间通过网络通信时，事先达成的一种 “约定”。这种“约定”使不同厂商的设备、不同的CPU以及不同操作系统组成的计算机之间，只要遵循相同的协议就能够实现通信。</p><p><strong>TCP/IP协议</strong>：TCP/IP协议是用于因特网 (Internet) 的通信协议。TCP/IP 通信协议是对计算机必须遵守的规则的描述，只有遵守这些规则，计算机之间才能进行通信。</p><p>TCP/IP是基于TCP和IP这两个最初的协议之上的不同的通信协议的大集合:<br>如图：<a href="https://zhuanlan.zhihu.com/p/33889997" target="_blank" rel="noopener">来源</a><br><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181112153048.png" alt=""></p><p><strong>TCP/IP五层模型的协议</strong>:应用层(HTTP)、传输层(TCP/UDP)、网络层(IP)、数据链路层、物理层</p><p><strong>TCP数据报的结构</strong>: <a href="https://zhuanlan.zhihu.com/p/33889997" target="_blank" rel="noopener">来源</a><br><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181112154139.png" alt=""><br>其中标志位在第四行中：共有六个，URG、ACK、PSH、RST、SYN、FIN。</p><p>  序号：Seq（Sequence Number）序号占32位，用来标识从计算机A发送到计算机B的数据包的序号，计算机发送数据时对此进行标记。<br>  确认号：Ack（Acknowledge Number）确认号占32位，客户端和服务器端都可以发送，Ack = Seq + 1。<br>  标志位：每个标志位占用1Bit，共有6个，具体含义如下：</p><ul><li>URG：紧急指针（urgent pointer）有效；</li><li>ACK：确认序号有效；</li><li>PSH：接收方应该尽快将这个报文交给应用层；</li><li>RST：重置连接；</li><li>SYN：建立一个新连接；</li><li>FIN：断开一个连接。</li></ul><p>详细的知识点可看<a href="https://zhuanlan.zhihu.com/p/33889997" target="_blank" rel="noopener">TCP/IP协议</a></p><h3 id="三次握手建立TCP连接"><a href="#三次握手建立TCP连接" class="headerlink" title="三次握手建立TCP连接"></a>三次握手建立TCP连接</h3><p><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181112161148.png" alt="三次握手"><br>如上图，可看到三次握手的详细过程：<br>客户端调用 socket() 函数创建套接字后，因为没有建立连接，所以套接字处于CLOSED状态；服务器端调用 listen() 函数后，套接字进入LISTEN状态，开始监听客户端请求。<br>这个时候，客户端开始发起请求：</p><ul><li><p>第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；</p></li><li><p>第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态；</p></li><li><p>第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。</p></li></ul><h3 id="为什么需要三次握手？"><a href="#为什么需要三次握手？" class="headerlink" title="为什么需要三次握手？"></a>为什么需要三次握手？</h3><p>根据书本上来讲，三次握手的目的是为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。<br>“已失效的连接请求报文段”什么情况下会产生：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。<br>    假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。</p><h2 id="步骤三：发送HTTP请求"><a href="#步骤三：发送HTTP请求" class="headerlink" title="步骤三：发送HTTP请求"></a>步骤三：发送HTTP请求</h2><p>与服务器建立TCP安全连接后就可以进行HTTP请求了，发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议发送到服务器指定端口。</p><p>HTTP请求报文由三部分构成：请求行、请求头、请求正文</p><p><strong>请求行</strong>：请求方法 URI协议 版本<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET/sample.jsp HTTP/1.1</span><br></pre></td></tr></table></figure></p><p>  常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。<br>  GET和POST有什么区别？每个人有每个人的理解，可以去看看<a href="https://sunshinevvv.coding.me/blog/2017/02/09/HttpGETv.s.POST/" target="_blank" rel="noopener">来自大佬的透析</a>。</p><p><strong>请求头</strong>：(Request Header)，包含许多有关的客户端环境和请求正文的有用信息.常用的Accept,Accept-charset.Content-Type……<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept:image/gif.image/jpeg.*/*</span><br><span class="line">Accept-Language:zh-cn</span><br><span class="line">Connection:Keep-Alive</span><br><span class="line">Host:localhost127.0.1</span><br><span class="line">User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)</span><br><span class="line">Accept-Encoding:gzip,deflate...</span><br></pre></td></tr></table></figure></p><p>  如下是一个来自百度的HTTP请求以及响应报文：<a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">来源</a><br>  <img src="/images/web/wechat/3739029528-57d55e6ce8b6c_articlex.png" alt=""></p><p><strong>请求正文</strong>: 请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息.<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=chensan&amp;password=chen</span><br></pre></td></tr></table></figure></p><p>建议看看阮一峰老师的博客：<a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP协议</a></p><h2 id="步骤四：服务器处理请求并返回HTTP响应"><a href="#步骤四：服务器处理请求并返回HTTP响应" class="headerlink" title="步骤四：服务器处理请求并返回HTTP响应"></a>步骤四：服务器处理请求并返回HTTP响应</h2><h3 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h3><p>此部分涉及后端部分知识，大家可自行查找资料。<br>后端从在固定的端口接收到TCP报文后，会对TCP连接进行处理然后解析HTTP报文，并按报文格式进一步封装成HTTP Request对象，供上层使用。<br>可看<a href="http://www.cnblogs.com/dengzz/p/5544122.html" target="_blank" rel="noopener">浅谈一个网页打开的全过程</a>了解这个过程</p><h3 id="返回HTTP响应"><a href="#返回HTTP响应" class="headerlink" title="返回HTTP响应"></a>返回HTTP响应</h3><p>HTTP响应报文由三部分构成: 状态行, 响应头和响应正文。</p><p><strong>状态行</strong>：协议版本、数字形式的状态码、及相应的状态描述，各部分用空格分隔开。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK \r\n</span><br></pre></td></tr></table></figure></p><p>状态码：状态码由三位数字组成，第一个数字表示响应的类别，有五种可能取值。</p><p>以下是五种可能情况和常见的状态码：</p><ul><li><p>1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 Continue</span><br><span class="line">101 Switching Protocols</span><br></pre></td></tr></table></figure></li><li><p>2xx：成功状态码，表示服务器已成功接收到请求并进行处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200 OK 表示客户端请求成功</span><br><span class="line">204 No Content 成功，但不返回任何实体的主体部分</span><br></pre></td></tr></table></figure></li><li><p>3xx：重定向状态码，表示服务器要求客户端重定向。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL</span><br><span class="line">302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源</span><br><span class="line">303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源</span><br><span class="line">304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存</span><br><span class="line"></span><br><span class="line">301和302有什么区别？</span><br></pre></td></tr></table></figure></li><li><p>4xx：客户端错误状态码，表示客户端的请求有非法内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解</span><br><span class="line">401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用</span><br><span class="line">403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因</span><br><span class="line">404 Not Found 请求的资源不存在，例如，输入了错误的URL</span><br></pre></td></tr></table></figure></li><li><p>5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求</span><br><span class="line">503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</span><br></pre></td></tr></table></figure></li></ul><p><strong>响应头</strong>：由关键字/值对组成，每行一对，关键字和值用英文冒号”:”分隔，典型的响应头请参考：<br>  <img src="/images/web/wechat/776370-20170322193336611-2098719977.png" alt=""></p><p><strong>响应正文</strong>：包含我们需要的具体信息，比如cookie，html,image，后端返回的请求数据等等。</p><h2 id="步骤五：关闭TCP连接"><a href="#步骤五：关闭TCP连接" class="headerlink" title="步骤五：关闭TCP连接"></a>步骤五：关闭TCP连接</h2><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181112161152.png" alt="四次挥手"><br>如上图，可看到四次挥手的整个过程：</p><ul><li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</li><li>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与- SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</li><li>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</li><li>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</li></ul><h3 id="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"><a href="#为什么建立连接是三次握手，而关闭连接却是四次挥手呢？" class="headerlink" title="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"></a>为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</h3><p>因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p><h2 id="步骤六：浏览器解析渲染页面"><a href="#步骤六：浏览器解析渲染页面" class="headerlink" title="步骤六：浏览器解析渲染页面"></a>步骤六：浏览器解析渲染页面</h2><p>  浏览器解析渲染页面的过程包括以下几个步骤：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 使用 HTML 创建文档对象模型（DOM）</span><br><span class="line">- 使用 CSS 创建 CSS 对象模型（CSSOM）</span><br><span class="line">- 基于 DOM 和 CSSOM 执行脚本（Scripts）</span><br><span class="line">- 合并 DOM 和 CSSOM 形成渲染树（Render Tree）</span><br><span class="line">- 使用渲染树布局（Layout）所有元素</span><br><span class="line">- 渲染（Paint）所有元素</span><br></pre></td></tr></table></figure></p><p>  具体请移步本站<a href="https://chenjing123456.github.io/2018/11/07/html%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/" target="_blank" rel="noopener">渲染页面</a><br>  大佬博客<a href="http://jinlong.github.io/2017/05/08/optimising-the-front-end-for-the-browser/" target="_blank" rel="noopener">浏览器前端优化</a>,详细介绍每一步以及优化方法。</p><h2 id="结论：web优化"><a href="#结论：web优化" class="headerlink" title="结论：web优化"></a>结论：web优化</h2><p>  <img src="/images/web/wechat/v2-b9d0250140e36347b315379e3cc6e631_b.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>整理了一周多的资料，属于站在巨人的肩膀上写的。如有问题大家互相交流。其中参考了很多的文献和别人的文章，有一些文章不记得了。如下是一些参考链接：<br>三次握手:<a href="https://www.jianshu.com/p/6fcbff0d6598" target="_blank" rel="noopener">https://www.jianshu.com/p/6fcbff0d6598</a><br>四次握手:<a href="https://www.jianshu.com/p/d91ca626e69c" target="_blank" rel="noopener">https://www.jianshu.com/p/d91ca626e69c</a><br>从输入url到页面展示到底发生了什么:<a href="https://www.jianshu.com/p/23b388f8e5aa" target="_blank" rel="noopener">https://www.jianshu.com/p/23b388f8e5aa</a><br>从输入url到页面展示到底发生了什么:<a href="https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">链接地址</a><br>从输入URL到页面加载发生了什么:<a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a><br>浅谈一个网页打开的全过程:<a href="http://www.cnblogs.com/dengzz/p/5544122.html" target="_blank" rel="noopener">http://www.cnblogs.com/dengzz/p/5544122.html</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搞定Elist语法检测，让世界清静</title>
      <link href="/2019/01/02/elist/"/>
      <url>/2019/01/02/elist/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Elist语法</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a><br>最近在学习renrenfast Vue 项目，把代码clone下来运行的时候，一直报ESlint语法检测里的警告，令人头大。为了耳根清净，特意去学习了一下ESlint的规则配置。<br>使用vue-cli创建的项目默认情况下它的elist配置：</p><ul><li>代码末尾不能加分号</li><li>代码中不能存在多行空行 </li><li>代码中不能存在声明了但未使用的变量</li><li>tab键不能使用，必须换成两个空格 </li></ul><p>事实上，在我们写代码的过程中各自有各自的代码习惯和风格，所以学习语法规范elist制定自己喜欢的检测风格必不可少，当然你没有强迫症的话也是无所谓的。</p><h2 id="关闭elist"><a href="#关闭elist" class="headerlink" title="关闭elist"></a>关闭elist</h2><p>关闭vue-cli脚手架,就是把 build/webpack.base.conf.js 配置文件中的eslint rules注释掉即可。<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      // &#123;</span><br><span class="line">      //   test: /\.(js|vue)$/,</span><br><span class="line">      //   loader: &apos;eslint-loader&apos;,</span><br><span class="line">      //   enforce: &apos;pre&apos;,</span><br><span class="line">      //   include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)],</span><br><span class="line">      //   options: &#123;</span><br><span class="line">      //     formatter: require(&apos;eslint-friendly-formatter&apos;)</span><br><span class="line">      //   &#125;</span><br><span class="line">      // &#125;,</span><br><span class="line">      </span><br><span class="line">      ...</span><br><span class="line">     ]</span><br><span class="line">     ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>若是要保留eslint的语法检测，就在项目根目录里创建一个文件名以 .eslintrc.* 为名的配置文件。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>如下附上我的配置：其中 rules 就是配置规则的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  root: true,</span><br><span class="line">  parser: &apos;babel-eslint&apos;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: &apos;module&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  // https://github.com/standard/standard/blob/master/docs/RULES-en.md</span><br><span class="line">  extends: &apos;standard&apos;,</span><br><span class="line">  // required to lint *.vue files</span><br><span class="line">  plugins: [</span><br><span class="line">    &apos;html&apos;</span><br><span class="line">  ],</span><br><span class="line">  // add your custom rules here</span><br><span class="line">  rules: &#123;</span><br><span class="line">    // allow async-await</span><br><span class="line">    &apos;generator-star-spacing&apos;: &apos;off&apos;,</span><br><span class="line">    // allow debugger during development</span><br><span class="line">    &apos;no-debugger&apos;: process.env.NODE_ENV === &apos;production&apos; ? &apos;error&apos; : &apos;off&apos;,</span><br><span class="line">    &quot;no-unused-vars&quot;: [2, &#123; </span><br><span class="line">      // 允许声明未使用变量</span><br><span class="line">      &quot;vars&quot;: &quot;local&quot;,</span><br><span class="line">      // 参数不检查</span><br><span class="line">      &quot;args&quot;: &quot;none&quot; </span><br><span class="line">    &#125;],</span><br><span class="line">    // 关闭语句强制分号结尾</span><br><span class="line">    &quot;semi&quot;: [0],</span><br><span class="line">    //空行最多不能超过100行</span><br><span class="line">    &quot;no-multiple-empty-lines&quot;: [0, &#123;&quot;max&quot;: 100&#125;],</span><br><span class="line">    //关闭禁止混用tab和空格</span><br><span class="line">    &quot;no-mixed-spaces-and-tabs&quot;: [0],</span><br><span class="line">    &apos;arrow-parens&apos;: 0,</span><br><span class="line">    &quot;no-trailing-spaces&quot;: 0,//一行结束后面有空格</span><br><span class="line">    &quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的</span><br><span class="line">    &quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格</span><br><span class="line">    &quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],//对象字面量中冒号的前后空格</span><br><span class="line">    &quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格</span><br><span class="line">    &quot;comma-spacing&quot;: 0,//逗号前后的空格</span><br><span class="line">    &quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格</span><br><span class="line">    &quot;no-unused-vars&quot;:0,</span><br><span class="line">    &apos;keyword-spacing&apos;:0,</span><br><span class="line">    &quot;eqeqeq&quot;: 0,//必须使用全等</span><br><span class="line">    // &quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格</span><br><span class="line">    &quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块&#123;前面要不要有空格</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置参数值"><a href="#配置参数值" class="headerlink" title="配置参数值"></a>配置参数值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;off&quot;或者0    //关闭规则关闭</span><br><span class="line">&quot;warn&quot;或者1    //在打开的规则作为警告（不影响退出代码）</span><br><span class="line">&quot;error&quot;或者2    //把规则作为一个错误（退出代码触发时为1）</span><br></pre></td></tr></table></figure><h3 id="常见规则列表"><a href="#常见规则列表" class="headerlink" title="常见规则列表"></a>常见规则列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">&quot;no-alert&quot;: 0,//禁止使用alert confirm prompt</span><br><span class="line">&quot;no-array-constructor&quot;: 2,//禁止使用数组构造器</span><br><span class="line">&quot;no-bitwise&quot;: 0,//禁止使用按位运算符</span><br><span class="line">&quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee</span><br><span class="line">&quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名</span><br><span class="line">&quot;no-class-assign&quot;: 2,//禁止给类赋值</span><br><span class="line">&quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句</span><br><span class="line">&quot;no-console&quot;: 2,//禁止使用console</span><br><span class="line">&quot;no-const-assign&quot;: 2,//禁止修改const声明的变量</span><br><span class="line">&quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1)</span><br><span class="line">&quot;no-continue&quot;: 0,//禁止使用continue</span><br><span class="line">&quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符</span><br><span class="line">&quot;no-debugger&quot;: 2,//禁止使用debugger</span><br><span class="line">&quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符</span><br><span class="line">&quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/</span><br><span class="line">&quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span><br><span class="line">&quot;no-dupe-args&quot;: 2,//函数参数不能重复</span><br><span class="line">&quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复</span><br><span class="line">&quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句</span><br><span class="line">&quot;no-empty&quot;: 2,//块语句中的内容不能为空</span><br><span class="line">&quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空</span><br><span class="line">&quot;no-empty-label&quot;: 2,//禁止使用空label</span><br><span class="line">&quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符</span><br><span class="line">&quot;no-eval&quot;: 1,//禁止使用eval</span><br><span class="line">&quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值</span><br><span class="line">&quot;no-extend-native&quot;: 2,//禁止扩展native对象</span><br><span class="line">&quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定</span><br><span class="line">&quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换</span><br><span class="line">&quot;no-extra-parens&quot;: 2,//禁止非必要的括号</span><br><span class="line">&quot;no-extra-semi&quot;: 2,//禁止多余的冒号</span><br><span class="line">&quot;no-fallthrough&quot;: 1,//禁止switch穿透</span><br><span class="line">&quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3.</span><br><span class="line">&quot;no-func-assign&quot;: 2,//禁止重复的函数声明</span><br><span class="line">&quot;no-implicit-coercion&quot;: 1,//禁止隐式转换</span><br><span class="line">&quot;no-implied-eval&quot;: 2,//禁止使用隐式eval</span><br><span class="line">&quot;no-inline-comments&quot;: 0,//禁止行内备注</span><br><span class="line">&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数）</span><br><span class="line">&quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式</span><br><span class="line">&quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量</span><br><span class="line">&quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格</span><br><span class="line">&quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性</span><br><span class="line">&quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同</span><br><span class="line">&quot;no-labels&quot;: 2,//禁止标签声明</span><br><span class="line">&quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块</span><br><span class="line">&quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句</span><br><span class="line">&quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span><br><span class="line">&quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型</span><br><span class="line">&quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格</span><br><span class="line">&quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格</span><br><span class="line">&quot;no-multi-spaces&quot;: 1,//不能用多余的空格</span><br><span class="line">&quot;no-multi-str&quot;: 2,//字符串不能用\换行</span><br><span class="line">&quot;no-multiple-empty-lines&quot;: [1, &#123;&quot;max&quot;: 2&#125;],//空行最多不能超过2行</span><br><span class="line">&quot;no-native-reassign&quot;: 2,//不能重写native对象</span><br><span class="line">&quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有!</span><br><span class="line">&quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算</span><br><span class="line">&quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值</span><br><span class="line">&quot;no-new-func&quot;: 1,//禁止使用new Function</span><br><span class="line">&quot;no-new-object&quot;: 2,//禁止使用new Object()</span><br><span class="line">&quot;no-new-require&quot;: 2,//禁止使用new require</span><br><span class="line">&quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number</span><br><span class="line">&quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON()</span><br><span class="line">&quot;no-octal&quot;: 2,//禁止使用八进制数字</span><br><span class="line">&quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列</span><br><span class="line">&quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值</span><br><span class="line">&quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接</span><br><span class="line">&quot;no-plusplus&quot;: 0,//禁止使用++，--</span><br><span class="line">&quot;no-process-env&quot;: 0,//禁止使用process.env</span><br><span class="line">&quot;no-process-exit&quot;: 0,//禁止使用process.exit()</span><br><span class="line">&quot;no-proto&quot;: 2,//禁止使用__proto__属性</span><br><span class="line">&quot;no-redeclare&quot;: 2,//禁止重复声明变量</span><br><span class="line">&quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/</span><br><span class="line">&quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错</span><br><span class="line">&quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式</span><br><span class="line">&quot;no-script-url&quot;: 0,//禁止使用javascript:void(0)</span><br><span class="line">&quot;no-self-compare&quot;: 2,//不能比较自身</span><br><span class="line">&quot;no-sequences&quot;: 0,//禁止使用逗号运算符</span><br><span class="line">&quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span><br><span class="line">&quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用</span><br><span class="line">&quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格</span><br><span class="line">&quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2]</span><br><span class="line">&quot;no-sync&quot;: 0,//nodejs 禁止同步方法</span><br><span class="line">&quot;no-ternary&quot;: 0,//禁止使用三目运算符</span><br><span class="line">&quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格</span><br><span class="line">&quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super</span><br><span class="line">&quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;;</span><br><span class="line">&quot;no-undef&quot;: 1,//不能有未定义的变量</span><br><span class="line">&quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined</span><br><span class="line">&quot;no-undefined&quot;: 2,//不能使用undefined</span><br><span class="line">&quot;no-unexpected-multiline&quot;: 2,//避免多行表达式</span><br><span class="line">&quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾</span><br><span class="line">&quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span><br><span class="line">&quot;no-unreachable&quot;: 2,//不能有无法执行的代码</span><br><span class="line">&quot;no-unused-expressions&quot;: 2,//禁止无用的表达式</span><br><span class="line">&quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;],//不能有声明后未被使用的变量或参数</span><br><span class="line">&quot;no-use-before-define&quot;: 2,//未定义前不能使用</span><br><span class="line">&quot;no-useless-call&quot;: 2,//禁止不必要的call和apply</span><br><span class="line">&quot;no-void&quot;: 2,//禁用void操作符</span><br><span class="line">&quot;no-var&quot;: 0,//禁用var，用let和const代替</span><br><span class="line">&quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;],//不能有警告备注</span><br><span class="line">&quot;no-with&quot;: 2,//禁用with</span><br><span class="line"></span><br><span class="line">&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格</span><br><span class="line">&quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来</span><br><span class="line">&quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号</span><br><span class="line">&quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter</span><br><span class="line">&quot;block-scoped-var&quot;: 0,//块语句中使用var</span><br><span class="line">&quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格</span><br><span class="line">&quot;callback-return&quot;: 1,//避免多次调用回调什么的</span><br><span class="line">&quot;camelcase&quot;: 2,//强制驼峰法命名</span><br><span class="line">&quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号</span><br><span class="line">&quot;comma-spacing&quot;: 0,//逗号前后的空格</span><br><span class="line">&quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾</span><br><span class="line">&quot;complexity&quot;: [0, 11],//循环复杂度</span><br><span class="line">&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的</span><br><span class="line">&quot;consistent-return&quot;: 0,//return 后面是否允许省略</span><br><span class="line">&quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名</span><br><span class="line">&quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super</span><br><span class="line">&quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if()&#123;&#125; 中的&#123;&#125;</span><br><span class="line">&quot;default-case&quot;: 2,//switch语句最后必须有default</span><br><span class="line">&quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾</span><br><span class="line">&quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;],//避免不必要的方括号</span><br><span class="line">&quot;eol-last&quot;: 0,//文件以单一的换行符结束</span><br><span class="line">&quot;eqeqeq&quot;: 2,//必须使用全等</span><br><span class="line">&quot;func-names&quot;: 0,//函数表达式必须有名字</span><br><span class="line">&quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式</span><br><span class="line">&quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格</span><br><span class="line">&quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤</span><br><span class="line">&quot;handle-callback-err&quot;: 0,//nodejs 处理错误</span><br><span class="line">&quot;id-length&quot;: 0,//变量名长度</span><br><span class="line">&quot;indent&quot;: [2, 4],//缩进风格</span><br><span class="line">&quot;init-declarations&quot;: 0,//声明时必须赋初值</span><br><span class="line">&quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],//对象字面量中冒号的前后空格</span><br><span class="line">&quot;lines-around-comment&quot;: 0,//行前/行后备注</span><br><span class="line">&quot;max-depth&quot;: [0, 4],//嵌套块深度</span><br><span class="line">&quot;max-len&quot;: [0, 80, 4],//字符串最大长度</span><br><span class="line">&quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度</span><br><span class="line">&quot;max-params&quot;: [0, 3],//函数最多只能有3个参数</span><br><span class="line">&quot;max-statements&quot;: [0, 10],//函数内最多有几个声明</span><br><span class="line">&quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span><br><span class="line">&quot;new-parens&quot;: 2,//new时必须加小括号</span><br><span class="line">&quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行</span><br><span class="line">&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格</span><br><span class="line">&quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法</span><br><span class="line">&quot;one-var&quot;: 1,//连续声明</span><br><span class="line">&quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的</span><br><span class="line">&quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首</span><br><span class="line">&quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行</span><br><span class="line">&quot;prefer-const&quot;: 0,//首选const</span><br><span class="line">&quot;prefer-spread&quot;: 0,//首选展开运算</span><br><span class="line">&quot;prefer-reflect&quot;: 0,//首选Reflect的方法</span><br><span class="line">&quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &apos;&apos;</span><br><span class="line">&quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号</span><br><span class="line">&quot;radix&quot;: 2,//parseInt必须指定第二个参数</span><br><span class="line">&quot;id-match&quot;: 0,//命名检测</span><br><span class="line">&quot;require-yield&quot;: 0,//生成器函数必须有yield</span><br><span class="line">&quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾</span><br><span class="line">&quot;semi-spacing&quot;: [0, &#123;&quot;before&quot;: false, &quot;after&quot;: true&#125;],//分号前后空格</span><br><span class="line">&quot;sort-vars&quot;: 0,//变量声明时排序</span><br><span class="line">&quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格</span><br><span class="line">&quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块&#123;前面要不要有空格</span><br><span class="line">&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格</span><br><span class="line">&quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格</span><br><span class="line">&quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格</span><br><span class="line">&quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格</span><br><span class="line">&quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],//一元运算符的前/后要不要加空格</span><br><span class="line">&quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的</span><br><span class="line">&quot;strict&quot;: 2,//使用严格模式</span><br><span class="line">&quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN()</span><br><span class="line">&quot;valid-jsdoc&quot;: 0,//jsdoc规则</span><br><span class="line">&quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值</span><br><span class="line">&quot;vars-on-top&quot;: 2,//var必须放在作用域顶部</span><br><span class="line">&quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格</span><br><span class="line">&quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来</span><br><span class="line">&quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件</span><br></pre></td></tr></table></figure><p>示例：我们模块化项目的elist</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  root: true,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: &apos;babel-eslint&apos;,</span><br><span class="line">    sourceType: &apos;module&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: true,</span><br><span class="line">    node: true,</span><br><span class="line">    es6: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [&apos;plugin:vue/essential&apos;, &apos;eslint:recommended&apos;],</span><br><span class="line"></span><br><span class="line">  // add your custom rules here</span><br><span class="line">  //it is base on https://github.com/vuejs/eslint-config-vue</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &quot;vue/max-attributes-per-line&quot;: [2, &#123;</span><br><span class="line">      &quot;singleline&quot;: 10,</span><br><span class="line">      &quot;multiline&quot;: &#123;</span><br><span class="line">        &quot;max&quot;: 1,</span><br><span class="line">        &quot;allowFirstLine&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;vue/singleline-html-element-content-newline&quot;: &quot;off&quot;,</span><br><span class="line">    &quot;vue/multiline-html-element-content-newline&quot;:&quot;off&quot;,</span><br><span class="line">    &quot;vue/name-property-casing&quot;: [&quot;error&quot;, &quot;PascalCase&quot;],</span><br><span class="line">    &quot;vue/no-v-html&quot;: &quot;off&quot;,</span><br><span class="line">    &apos;accessor-pairs&apos;: 2,</span><br><span class="line">    &apos;arrow-spacing&apos;: [2, &#123;</span><br><span class="line">      &apos;before&apos;: true,</span><br><span class="line">      &apos;after&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;block-spacing&apos;: [2, &apos;always&apos;],</span><br><span class="line">    &apos;brace-style&apos;: [2, &apos;1tbs&apos;, &#123;</span><br><span class="line">      &apos;allowSingleLine&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;camelcase&apos;: [0, &#123;</span><br><span class="line">      &apos;properties&apos;: &apos;always&apos;</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;comma-dangle&apos;: [2, &apos;never&apos;],</span><br><span class="line">    &apos;comma-spacing&apos;: [2, &#123;</span><br><span class="line">      &apos;before&apos;: false,</span><br><span class="line">      &apos;after&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;comma-style&apos;: [2, &apos;last&apos;],</span><br><span class="line">    &apos;constructor-super&apos;: 2,</span><br><span class="line">    &apos;curly&apos;: [2, &apos;multi-line&apos;],</span><br><span class="line">    &apos;dot-location&apos;: [2, &apos;property&apos;],</span><br><span class="line">    &apos;eol-last&apos;: 2,</span><br><span class="line">    // &apos;eqeqeq&apos;: [&quot;error&quot;, &quot;always&quot;, &#123;&quot;null&quot;: &quot;ignore&quot;&#125;],</span><br><span class="line">    &apos;generator-star-spacing&apos;: [2, &#123;</span><br><span class="line">      &apos;before&apos;: true,</span><br><span class="line">      &apos;after&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;handle-callback-err&apos;: [2, &apos;^(err|error)$&apos;],</span><br><span class="line">    &apos;indent&apos;: [2, 2, &#123;</span><br><span class="line">      &apos;SwitchCase&apos;: 1</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;jsx-quotes&apos;: [2, &apos;prefer-single&apos;],</span><br><span class="line">    &apos;key-spacing&apos;: [2, &#123;</span><br><span class="line">      &apos;beforeColon&apos;: false,</span><br><span class="line">      &apos;afterColon&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;keyword-spacing&apos;: [2, &#123;</span><br><span class="line">      &apos;before&apos;: true,</span><br><span class="line">      &apos;after&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;new-cap&apos;: [2, &#123;</span><br><span class="line">      &apos;newIsCap&apos;: true,</span><br><span class="line">      &apos;capIsNew&apos;: false</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;new-parens&apos;: 2,</span><br><span class="line">    &apos;no-array-constructor&apos;: 2,</span><br><span class="line">    &apos;no-caller&apos;: 2,</span><br><span class="line">    &apos;no-console&apos;: &apos;off&apos;,</span><br><span class="line">    &apos;no-class-assign&apos;: 2,</span><br><span class="line">    &apos;no-cond-assign&apos;: 2,</span><br><span class="line">    &apos;no-const-assign&apos;: 2,</span><br><span class="line">    &apos;no-control-regex&apos;: 0,</span><br><span class="line">    &apos;no-delete-var&apos;: 2,</span><br><span class="line">    &apos;no-dupe-args&apos;: 2,</span><br><span class="line">    &apos;no-dupe-class-members&apos;: 2,</span><br><span class="line">    &apos;no-dupe-keys&apos;: 2,</span><br><span class="line">    &apos;no-duplicate-case&apos;: 2,</span><br><span class="line">    &apos;no-empty-character-class&apos;: 2,</span><br><span class="line">    &apos;no-empty-pattern&apos;: 2,</span><br><span class="line">    &apos;no-eval&apos;: 2,</span><br><span class="line">    &apos;no-ex-assign&apos;: 2,</span><br><span class="line">    &apos;no-extend-native&apos;: 2,</span><br><span class="line">    &apos;no-extra-bind&apos;: 2,</span><br><span class="line">    &apos;no-extra-boolean-cast&apos;: 2,</span><br><span class="line">    &apos;no-extra-parens&apos;: [2, &apos;functions&apos;],</span><br><span class="line">    &apos;no-fallthrough&apos;: 2,</span><br><span class="line">    &apos;no-floating-decimal&apos;: 2,</span><br><span class="line">    &apos;no-func-assign&apos;: 2,</span><br><span class="line">    &apos;no-implied-eval&apos;: 2,</span><br><span class="line">    &apos;no-inner-declarations&apos;: [2, &apos;functions&apos;],</span><br><span class="line">    &apos;no-invalid-regexp&apos;: 2,</span><br><span class="line">    &apos;no-irregular-whitespace&apos;: 2,</span><br><span class="line">    &apos;no-iterator&apos;: 2,</span><br><span class="line">    &apos;no-label-var&apos;: 2,</span><br><span class="line">    &apos;no-labels&apos;: [2, &#123;</span><br><span class="line">      &apos;allowLoop&apos;: false,</span><br><span class="line">      &apos;allowSwitch&apos;: false</span><br><span class="line">    &#125;],</span><br><span class="line">    // &apos;no-lone-blocks&apos;: 2,</span><br><span class="line">    &apos;no-mixed-spaces-and-tabs&apos;: 2,</span><br><span class="line">    // &apos;no-multi-spaces&apos;: 2,</span><br><span class="line">    &apos;no-multi-str&apos;: 2,</span><br><span class="line">    &apos;no-multiple-empty-lines&apos;: [2, &#123;</span><br><span class="line">      &apos;max&apos;: 1</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;no-native-reassign&apos;: 2,</span><br><span class="line">    &apos;no-negated-in-lhs&apos;: 2,</span><br><span class="line">    &apos;no-new-object&apos;: 2,</span><br><span class="line">    &apos;no-new-require&apos;: 2,</span><br><span class="line">    &apos;no-new-symbol&apos;: 2,</span><br><span class="line">    &apos;no-new-wrappers&apos;: 2,</span><br><span class="line">    &apos;no-obj-calls&apos;: 2,</span><br><span class="line">    &apos;no-octal&apos;: 2,</span><br><span class="line">    &apos;no-octal-escape&apos;: 2,</span><br><span class="line">    &apos;no-path-concat&apos;: 2,</span><br><span class="line">    &apos;no-proto&apos;: 2,</span><br><span class="line">    &apos;no-redeclare&apos;: 2,</span><br><span class="line">    &apos;no-regex-spaces&apos;: 2,</span><br><span class="line">    &apos;no-return-assign&apos;: [2, &apos;except-parens&apos;],</span><br><span class="line">    &quot;no-self-assign&quot;:0,</span><br><span class="line">    &apos;no-self-compare&apos;: 2,</span><br><span class="line">    &apos;no-sequences&apos;: 2,</span><br><span class="line">    &apos;no-shadow-restricted-names&apos;: 2,</span><br><span class="line">    &apos;no-spaced-func&apos;: 2,</span><br><span class="line">    &apos;no-sparse-arrays&apos;: 2,</span><br><span class="line">    &apos;no-this-before-super&apos;: 2,</span><br><span class="line">    &apos;no-throw-literal&apos;: 2,</span><br><span class="line">    &apos;no-trailing-spaces&apos;: 2,</span><br><span class="line">    &apos;no-undef&apos;: 2,</span><br><span class="line">    &apos;no-undef-init&apos;: 2,</span><br><span class="line">    &apos;no-unexpected-multiline&apos;: 2,</span><br><span class="line">    &apos;no-unmodified-loop-condition&apos;: 2,</span><br><span class="line">    &apos;no-unneeded-ternary&apos;: [2, &#123;</span><br><span class="line">      &apos;defaultAssignment&apos;: false</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;no-unreachable&apos;: 2,</span><br><span class="line">    &apos;no-unsafe-finally&apos;: 2,</span><br><span class="line">    &apos;no-unused-vars&apos;: 0,</span><br><span class="line">    &apos;no-useless-call&apos;: 2,</span><br><span class="line">    &apos;no-useless-computed-key&apos;: 2,</span><br><span class="line">    &apos;no-useless-constructor&apos;: 2,</span><br><span class="line">    &apos;no-useless-escape&apos;: 0,</span><br><span class="line">    &apos;no-whitespace-before-property&apos;: 2,</span><br><span class="line">    &apos;no-with&apos;: 2,</span><br><span class="line">    &apos;one-var&apos;: [2, &#123;</span><br><span class="line">      &apos;initialized&apos;: &apos;never&apos;</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;operator-linebreak&apos;: [2, &apos;after&apos;, &#123;</span><br><span class="line">      &apos;overrides&apos;: &#123;</span><br><span class="line">        &apos;?&apos;: &apos;before&apos;,</span><br><span class="line">        &apos;:&apos;: &apos;before&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;padded-blocks&apos;: [2, &apos;never&apos;],</span><br><span class="line">    &apos;quotes&apos;: [2, &apos;single&apos;, &#123;</span><br><span class="line">      &apos;avoidEscape&apos;: true,</span><br><span class="line">      &apos;allowTemplateLiterals&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;semi&apos;: [2, &apos;never&apos;],</span><br><span class="line">    &apos;semi-spacing&apos;: [2, &#123;</span><br><span class="line">      &apos;before&apos;: false,</span><br><span class="line">      &apos;after&apos;: true</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;space-before-blocks&apos;: [2, &apos;always&apos;],</span><br><span class="line">    &apos;space-before-function-paren&apos;: [2, &apos;never&apos;],</span><br><span class="line">    &apos;space-in-parens&apos;: [2, &apos;never&apos;],</span><br><span class="line">    &apos;space-infix-ops&apos;: 2,</span><br><span class="line">    &apos;space-unary-ops&apos;: [2, &#123;</span><br><span class="line">      &apos;words&apos;: true,</span><br><span class="line">      &apos;nonwords&apos;: false</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;spaced-comment&apos;: [2, &apos;always&apos;, &#123;</span><br><span class="line">      &apos;markers&apos;: [&apos;global&apos;, &apos;globals&apos;, &apos;eslint&apos;, &apos;eslint-disable&apos;, &apos;*package&apos;, &apos;!&apos;, &apos;,&apos;]</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;template-curly-spacing&apos;: [2, &apos;never&apos;],</span><br><span class="line">    &apos;use-isnan&apos;: 2,</span><br><span class="line">    &apos;valid-typeof&apos;: 2,</span><br><span class="line">    &apos;wrap-iife&apos;: [2, &apos;any&apos;],</span><br><span class="line">    &apos;yield-star-spacing&apos;: [2, &apos;both&apos;],</span><br><span class="line">    &apos;yoda&apos;: [2, &apos;never&apos;],</span><br><span class="line">    &apos;prefer-const&apos;: 0,</span><br><span class="line">    &apos;no-debugger&apos;: process.env.NODE_ENV === &apos;production&apos; ? 2 : 0,</span><br><span class="line">    &apos;object-curly-spacing&apos;: [2, &apos;always&apos;, &#123;</span><br><span class="line">      objectsInObjects: false</span><br><span class="line">    &#125;],</span><br><span class="line">    &apos;array-bracket-spacing&apos;: [2, &apos;never&apos;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://segmentfault.com/a/1190000008742240" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008742240</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> elist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elist </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue项目中登录时记住密码的功能实现</title>
      <link href="/2018/12/24/%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/12/24/%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>vue记住密码</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a><br>在项目登录过程中往往需要实现记住密码的功能，将账号和密码保存到本地浏览器，下次登陆自动显示到表单内。使用户可以在规定时间内不需要输入用户名和密码直接登录。</p><p>登录页如图：<br><img src="/images/vue/10.png" alt="目录"><br>点击记住密码时，下次登录用户名和密码会自动填写。</p><h2 id="WebStorage和cookie"><a href="#WebStorage和cookie" class="headerlink" title="WebStorage和cookie"></a>WebStorage和cookie</h2><h3 id="WebStorage和cookie-1"><a href="#WebStorage和cookie-1" class="headerlink" title="WebStorage和cookie"></a>WebStorage和cookie</h3><p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br>但是Cookie也是不可以或缺的,Cookie的作用是与服务器进行交互,作为HTTP规范的一部分而存在 ;而Web Storage仅仅是为了在本地“存储”数据而生.</p><p>WebStorage的好处：<br>1)减少网络流量：一旦数据保存在本地后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要地来回传递；</p><p>2)快速显示数据：性能好，从本地读数据比通过网络从服务器获得数据快得多，本地数据可以即时获得。再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示；</p><p>3)临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage非常方便。</p><h3 id="web-storage下的两种类型："><a href="#web-storage下的两种类型：" class="headerlink" title="web storage下的两种类型："></a>web storage下的两种类型：</h3><p>WebStorage是HTML5中本地存储的解决方案之一，在HTML5引入WebStorage这个概念之前，浏览器兼容的本地存储方案就只有使用cookie。<br>WebStorage提供两种类型的API：localStorage和sessionStorage，其中，localStorage在本地永久性存储数据，除非显式将其删除或清空，sessionStorage存储的数据只在会话期间有效，关闭浏览器则自动删除。</p><h3 id="sessionStorage-、localStorage-和-cookie三者异同："><a href="#sessionStorage-、localStorage-和-cookie三者异同：" class="headerlink" title="sessionStorage 、localStorage 和 cookie三者异同："></a>sessionStorage 、localStorage 和 cookie三者异同：</h3><p>共同点：都是保存在浏览器端，且同源的。</p><p>区别：</p><p>1) cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下；</p><p>2)存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大；</p><p>3)数据有效期不同。sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭；</p><p>4)作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的；</p><p>5)WebStorage支持事件通知机制，可以将数据更新的通知发送给监听者；</p><p>6)WebStorage 的 api 接口使用更方便。</p><h3 id="localStorage的API"><a href="#localStorage的API" class="headerlink" title="localStorage的API"></a>localStorage的API</h3><p>1)setItem存储value<br>用途：将value存储到key字段<br>用法：.setItem( key, value)<br>代码示例：<br>localStorage.setItem(“site”, “js8.in”);</p><p>2)getItem获取value<br>用途：获取指定key本地存储的值<br>用法：.getItem(key)<br>代码示例：<br>var site = localStorage.getItem(“site”);</p><p>3)removeItem删除key<br>用途：删除指定key本地存储的值<br>用法：.removeItem(key)<br>代码示例：<br>localStorage.removeItem(“site”);</p><p>4)clear清除所有的key/value<br>用途：清除所有的key/value<br>用法：.clear()</p><h2 id="cookie和localStorage两种方式"><a href="#cookie和localStorage两种方式" class="headerlink" title="cookie和localStorage两种方式"></a>cookie和localStorage两种方式</h2><p>在login.vue登录页面html部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form ref=&quot;dataForm&quot; :model=&quot;dataForm&quot; :rules=&quot;dataRule&quot;  @keyup.enter.native=&quot;dataFormSubmit()&quot;&gt;</span><br><span class="line">    &lt;el-form-item prop=&quot;userName&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;dataForm.userName&quot; placeholder=&quot;用户名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">    &lt;el-input type=&quot;password&quot; v-model=&quot;dataForm.password&quot; placeholder=&quot;密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item prop=&quot;captcha&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;dataForm.captcha&quot; placeholder=&quot;验证码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;div class=&quot;login_captcha&quot; @click=&quot;getCaptcha()&quot;&gt;</span><br><span class="line">        &lt;img width=&quot;61px&quot; height=&quot;22px&quot; :src=&quot;captchaPath&quot; @click=&quot;getCaptcha()&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;div class=&quot;login-rememb&quot;&gt;</span><br><span class="line">    &lt;div @click=&quot;isRemeber&quot;&gt;</span><br><span class="line">        &lt;img v-if=&quot;ischecked == 0&quot; src=&quot;~@/assets/img/checkbox_unselected.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;img v-if=&quot;ischecked == 1&quot; src=&quot;~@/assets/img/checkbox_selected.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;login-rememb-text&quot;&gt;</span><br><span class="line">        记住密码</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;login-btn-sub&quot; @click=&quot;dataFormSubmit()&quot;&gt;</span><br><span class="line">    &lt;div&gt;登录&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure></p><h2 id="把数据保存到cookie里"><a href="#把数据保存到cookie里" class="headerlink" title="把数据保存到cookie里"></a>把数据保存到cookie里</h2><p>1.进入登录页面时，先获取cookie里的数据，如果有数据则自动填充到表单内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//页面加载调用获取cookie值</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.getCookie()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>2.在登录时，判断是否需要记住密码，如果是则设置cookie值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(this.ischecked==1)&#123;</span><br><span class="line">    //判断是否选中记住密码，选中则设置cookie</span><br><span class="line">    //传入账号名，密码，和保存天数3个参数</span><br><span class="line">      this.setCookie(name,pass,7);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>在login.vue登录页面script部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">  let Base64 = require(&apos;js-base64&apos;).Base64</span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        dataForm: &#123;</span><br><span class="line">          userName: &apos;&apos;,</span><br><span class="line">          password: &apos;&apos;,</span><br><span class="line">          uuid: &apos;&apos;,</span><br><span class="line">          captcha: &apos;&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        dataRule: &#123;</span><br><span class="line">          userName: [</span><br><span class="line">            &#123; required: true, message: &apos;帐号不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">          ],</span><br><span class="line">          password: [</span><br><span class="line">            &#123; required: true, message: &apos;密码不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">          ],</span><br><span class="line">          captcha: [</span><br><span class="line">            &#123; required: true, message: &apos;验证码不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ischecked: 0,</span><br><span class="line">        captchaPath: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      isRemeber()&#123;</span><br><span class="line">        if(this.ischecked == 0)&#123;</span><br><span class="line">          this.ischecked = 1</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.ischecked = 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 提交表单</span><br><span class="line">      dataFormSubmit () &#123;</span><br><span class="line">        this.$refs[&apos;dataForm&apos;].validate((valid) =&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line"></span><br><span class="line">            if(this.ischecked==1)&#123;</span><br><span class="line">              //判断是否选中记住密码，选中则设置cookie</span><br><span class="line">              //传入账号名，密码，和保存天数3个参数</span><br><span class="line">                this.setCookie(name,pass,7);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //axios请求登录接口</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    </span><br><span class="line">    //设置cookie</span><br><span class="line">    setCookie(c_name,c_pwd,exdays) &#123;</span><br><span class="line">        var exdate=new Date();//获取时间</span><br><span class="line">        exdate.setTime(exdate.getTime() + 24*60*60*1000*exdays);//保存的天数</span><br><span class="line">        //字符串拼接cookie</span><br><span class="line">        window.document.cookie=&quot;userName&quot;+ &quot;=&quot; +c_name+&quot;;path=/;expires=&quot;+exdate.toGMTString();</span><br><span class="line">        window.document.cookie=&quot;userPwd&quot;+&quot;=&quot;+c_pwd+&quot;;path=/;expires=&quot;+exdate.toGMTString();</span><br><span class="line">    &#125;,</span><br><span class="line">    //读取cookie</span><br><span class="line">    getCookie:function () &#123;</span><br><span class="line">        if (document.cookie.length&gt;0) &#123;</span><br><span class="line">        var arr=document.cookie.split(&apos;; &apos;);//这里显示的格式需要切割一下自己可输出看下</span><br><span class="line">        for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            var arr2=arr[i].split(&apos;=&apos;);//再次切割</span><br><span class="line">            //判断查找相对应的值</span><br><span class="line">            if(arr2[0]==&apos;userName&apos;)&#123;</span><br><span class="line">                this.ruleForm.userName=arr2[1];//保存到保存数据的地方</span><br><span class="line">            &#125;else if(arr2[0]==&apos;userPwd&apos;)&#123;</span><br><span class="line">                this.ruleForm.password=arr2[1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //清除cookie</span><br><span class="line">    clearCookie:function () &#123;</span><br><span class="line">        this.setCookie(&quot;&quot;,&quot;&quot;,-1);//修改2值都为空，天数为负1天就好了</span><br><span class="line">    &#125;,</span><br><span class="line">    //页面加载调用获取cookie值</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.getCookie()</span><br><span class="line">        this.getCaptcha()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="vue-cookie包"><a href="#vue-cookie包" class="headerlink" title="vue-cookie包"></a>vue-cookie包</h3><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cookie --save</span><br></pre></td></tr></table></figure></p><p>在main.js中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import VueCookie from &apos;vue-cookie&apos;  </span><br><span class="line">Vue.use(VueCookie)</span><br></pre></td></tr></table></figure></p><p>在login.vue登录页面script部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">let Base64 = require(&apos;js-base64&apos;).Base64</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      dataForm: &#123;</span><br><span class="line">        userName: &apos;&apos;,</span><br><span class="line">        password: &apos;&apos;,</span><br><span class="line">        uuid: &apos;&apos;,</span><br><span class="line">        captcha: &apos;&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      dataRule: &#123;</span><br><span class="line">        userName: [</span><br><span class="line">          &#123; required: true, message: &apos;帐号不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line">          &#123; required: true, message: &apos;密码不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ],</span><br><span class="line">        captcha: [</span><br><span class="line">          &#123; required: true, message: &apos;验证码不能为空&apos;, trigger: &apos;blur&apos; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ischecked: 0,</span><br><span class="line">      captchaPath: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    this.getCaptcha()</span><br><span class="line">    this.getCookie() //页面加载调用获取cookie值</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    isRemeber()&#123;</span><br><span class="line">      if(this.ischecked == 0)&#123;</span><br><span class="line">        this.ischecked = 1</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.ischecked = 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 提交表单</span><br><span class="line">    dataFormSubmit () &#123;</span><br><span class="line">      this.$refs[&apos;dataForm&apos;].validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line"></span><br><span class="line">          if(this.ischecked==1)&#123;</span><br><span class="line">            //判断是否选中记住密码，选中则设置cookie</span><br><span class="line">            this.$cookie.set(&apos;userName&apos;,this.dataForm.userName)</span><br><span class="line">            this.$cookie.set(&apos;password&apos;,this.dataForm.password)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          //axios请求登录接口</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">  //页面加载调用获取cookie值</span><br><span class="line">    getCookie()&#123;</span><br><span class="line">      this.dataForm.userName = this.$cookie.get(&apos;userName&apos;)</span><br><span class="line">      this.dataForm.password = this.$cookie.get(&apos;password&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //清楚cookie值</span><br><span class="line">  clearCookie:function () &#123;</span><br><span class="line">      Vue.cookie.delete(&apos;userName&apos;)</span><br><span class="line">      Vue.cookie.delete(&apos;password&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如图所示：<br><img src="/images/vue/13.png" alt="目录"></p><h2 id="把数据保存在localStorage里"><a href="#把数据保存在localStorage里" class="headerlink" title="把数据保存在localStorage里"></a>把数据保存在localStorage里</h2><p>1.进入登录页面时，先获取本地localStorage里的数据，如果有数据则自动填充到表单内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//页面加载调用获取localStorage值</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getlocalStorage()</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>2.在登录时，判断是否需要记住密码，如果是则设置localStorage值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (this.ischecked==1) &#123;</span><br><span class="line">  _this.setlocalStorage(_this.ruleForm.username, _this.ruleForm.password)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  _this.clearlocalStorage()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在login.vue登录页面script部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 当刷新页面时候获取一下localStorage里存的值</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getlocalStorage()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 当记住密码的checbox选中时，像localStorage里存入一下用户输入的用户名和密码</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">      const _this = this</span><br><span class="line">      if (this.ischecked==1) &#123;</span><br><span class="line">        _this.setlocalStorage(_this.ruleForm.username, _this.ruleForm.password)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        _this.clearlocalStorage()</span><br><span class="line">      &#125;</span><br><span class="line">      //与后端请求代码，暂时还没有请求地址，先省略了</span><br><span class="line">      console.log(&apos;登陆成功&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //设置。像localStorage里存入从页面获取的用户名和密码</span><br><span class="line">    setlocalStorage(c_name, c_pwd) &#123;</span><br><span class="line">      localStorage.siteName = c_name</span><br><span class="line">      localStorage.sitePassword = c_pwd</span><br><span class="line">    &#125;,</span><br><span class="line">    //获取</span><br><span class="line">    getlocalStorage: function() &#123;</span><br><span class="line">      this.ruleForm.username = localStorage.getItem(localStorage.key(1)) //保存到保存数据的地方</span><br><span class="line">      this.ruleForm.password = localStorage.getItem(localStorage.key(2))</span><br><span class="line">    &#125;,</span><br><span class="line">    // 点击忘记密码，清空localStorage里的存储</span><br><span class="line">    clear: function() &#123;</span><br><span class="line">      this.setlocalStorage(&apos;&apos;, &apos;&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如图：<br><img src="/images/vue/12.png" alt="目录"></p><p>参考文章：<br>cookie:<a href="https://blog.csdn.net/qq_38903950/article/details/78274079" target="_blank" rel="noopener">https://blog.csdn.net/qq_38903950/article/details/78274079</a><br>localStorage:<a href="https://blog.csdn.net/hx_1199/article/details/80270783" target="_blank" rel="noopener">https://blog.csdn.net/hx_1199/article/details/80270783</a><br>webStorage:<a href="https://blog.csdn.net/yq_oxygen/article/details/51913582" target="_blank" rel="noopener">https://blog.csdn.net/yq_oxygen/article/details/51913582</a></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> login </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> cookie </tag>
            
            <tag> login </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>大梦谁先觉</title>
      <link href="/2018/11/27/personal/"/>
      <url>/2018/11/27/personal/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>八表同昏</p></blockquote><p><img src="/images/life/daily/default1.jpg" alt="目录"><a id="more"></a></p><p>  今年刚毕业，比起刚上大学时的激情，现在的生活可谓清淡小资。闲暇时候图书馆里蹭蹭网，码码代码，读一两本小说，典型的码农的生活。跟大家一样，也谈过一两次恋爱，大约是青春荷尔蒙作祟，而后经历了一年空窗。</p><p>  今年，估计觉得我年纪老了，家人和朋友就捉急我的恋爱情事，纷纷给我介绍，搞得我着急待嫁一样。作为一个CS学院的程序狗钉子户，不谈恋爱总是有缘由的。当你发现一个人的独处好过比两个人的生活时，那就完全没必要给自己添堵。</p><p>  以前，信奉合适就在一起。后来，发现合适里没有感情，合适最终会变成不适。父母眼里的合适是家境，朋友眼里的合适是三观，哥们眼里的合适是性情。但我希望能够有个人让你舒服自在如一个人一样。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>九思</title>
      <link href="/2018/10/27/life3/"/>
      <url>/2018/10/27/life3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>房东的猫不高冷<br>楼上的小哥哥很可爱</p></blockquote><p><img src="/images/life/daily/default.jpg" alt="目录"><a id="more"></a><br>95年刚毕业的软（工）妹，坐标杭州。</p><p>普通长相 普通身高 普通大学 普通薪资。</p><p>二十几年能坚持贯彻执行这种方针真的不是刻意为之。</p><p>跟50%的大多数一样，是他人眼中听话懂事的乖乖女。</p><p>所有能标榜在身上的标签都只能做到刚刚好标准百分的及格线。</p><p>家里长辈是人民教师，不早恋不打架不关注周边事宜潜心学习。</p><p>跟朋友租着不大不小的房子，敲敲代码打打游戏，早睡早起。</p><p>没有青春疼痛史，也没有后悔无期书，更没有惊人的天赋，</p><p>只有十年如一日的重复然后维持着刚刚好的生活。</p><p>即使石子掉进我这摊湖里最终依旧还是会归于平静，</p><p>当然庆幸目前出现的这些那些都是些可爱不失风度的小石子。</p><p>平稳的日子 平淡的生活 以及偶尔的小风波，</p><p>房东的猫不高冷，楼上的小哥哥很可爱。</p><p>都值得感恩。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端必须知道的知识点</title>
      <link href="/2018/10/25/base/"/>
      <url>/2018/10/25/base/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前端知识点</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a><br>无论你工作年限的长短，身为前端必须知道的几个知识点。</p><ol><li>DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">（1）创建新节点</span><br><span class="line">    createDocumentFragment()    //创建一个DOM片段</span><br><span class="line">    createElement()   //创建一个具体的元素</span><br><span class="line">    createTextNode()   //创建一个文本节点</span><br><span class="line">（2）添加、移除、替换、插入</span><br><span class="line">    appendChild()</span><br><span class="line">    removeChild()</span><br><span class="line">    replaceChild()</span><br><span class="line">    insertBefore()</span><br><span class="line">（3）查找</span><br><span class="line">    getElementsByTagName()    //通过标签名称</span><br><span class="line">    getElementsByName()    //通过元素的Name属性的值</span><br><span class="line">    getElementById()    //通过元素Id，唯一性</span><br></pre></td></tr></table></figure></li><li><p>事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(1)标准事件模型：在JavaScript中把标准事件模型的执行分为三个阶段，即捕获阶段-&gt;目标阶段-&gt;冒泡阶段。</span><br><span class="line">    在事件的传播过程中，事件先沿着document节点，一层一层的传播，知道遇到注册事件的目标节点，元素注册的事件函数开始运行，运行完毕则由沿着DOM树向上层传播，回到document节点则事件结束。</span><br><span class="line">    eg:</span><br><span class="line">    target.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        alert(&quot;我是button&quot;);</span><br><span class="line">    &#125;, true);</span><br><span class="line">    </span><br><span class="line">    addEventListener添加事件，removeEventListener() 用来移除事件;</span><br><span class="line">    可以使用Event的event对象的stopPropagation()方法来阻止事件冒泡；</span><br><span class="line">    使用preventDefault() 函数阻止元素的默认事件的执行，比如&lt;a&gt; 标签的链接跳转，submit的默认表单提交等。</span><br><span class="line"></span><br><span class="line">(2)IE事件模型：IE的事件机制没有捕获阶段，事件流是非标准的，只有目标阶段和冒泡阶段。</span><br><span class="line">    从注册事件的目标节点，元素注册的事件函数开始运行，运行完毕则由沿着DOM树向上层传播，回到document节点则事件结束。</span><br><span class="line">    eg:</span><br><span class="line">    target.attachEvent(&apos;onclick&apos;,function()&#123;</span><br><span class="line">        alert(&quot;我是button&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    attachEvent IE事件的添加函数，detachEvent() 事件的移除函数；</span><br><span class="line">    以使用Event的event对象的属性 e.cancelBubble = true;来阻止事件冒泡</span><br><span class="line">    e.returnValue = false;阻止元素的默认事件的执行</span><br><span class="line"></span><br><span class="line">    另外还有比较早期的HTML事件模型，DOM 0级事件模型和DOM 2级事件模型</span><br></pre></td></tr></table></figure><ol start="4"><li><p>XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。</p><p> 查看本站博客的<a href="https://chenjing123456.github.io/2018/11/13/XHR/" target="_blank" rel="noopener">XMLHttpRequest详解</a></p></li><li><p>严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li><p>浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>JSON —— 作用、用途、设计结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。</span><br><span class="line">JSON建构于两种结构：</span><br><span class="line">“名称/值”对的集合（A collection of name/value </span><br><span class="line">pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表</span><br><span class="line">（hash table），有键列表（keyed list），或者关联数组 （associative array）。 </span><br><span class="line">值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人人开源-动态菜单路由</title>
      <link href="/2018/10/15/renren-fast-dynamicMenuRoutes/"/>
      <url>/2018/10/15/renren-fast-dynamicMenuRoutes/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>人人开源动态路由</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a><br>人人开源是轻量级的 Spring Boot 快速开发平台，实现前后端分离，通过 token 进行数据交互。而renren-fast-vue基于vue、element-ui构建开发，实现renren-fast后台管理前端功能，提供一套更优的前端解决方案。本文就一步步解析renren-fast-vue来了解实现动态菜单路由的过程。</p><p>如果想要了解更多：</p><ul><li><a href="https://www.renren.io/guide" target="_blank" rel="noopener">renren-fast开发文档</a></li><li><a href="https://github.com/daxiongYang/renren-fast-vue" target="_blank" rel="noopener">renren-fast-vue地址</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>  想要在本机启动项目，必须把项目克隆到本地<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/daxiongYang/renren-fast-vue</span><br></pre></td></tr></table></figure></p><p>  进入文件夹renren-fast-vue 安装依赖<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd renren-fast-vue</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>  整个项目的目录结构如下：<br>  <img src="/images/vue/renren-fast-main.png" alt="目录"></p><h2 id="解析动态菜单路由"><a href="#解析动态菜单路由" class="headerlink" title="解析动态菜单路由"></a>解析动态菜单路由</h2><ol><li><p>数据请求都是通过token来进行交互的，所以先获取token</p><ul><li>在登录页面，登录获取token<br><img src="/images/vue/1.png" alt="目录"></li><li>把token设置到请求头中<br><img src="/images/vue/2.png" alt="目录"></li><li>登陆成功进入main页面<br>主页面是上左右整体布局，右布局main-content是菜单路由跳转的显示内容区<br><img src="/images/vue/3.png" alt="目录"></li></ul></li><li><p>分析路由构成</p></li></ol><ul><li><p>路由分为全局路由和主入口路由。主入口路由{path:’/‘,children:动态菜单路由}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 一.全局路由(无需嵌套上左右整体布局)</span><br><span class="line">const globalRoutes = [</span><br><span class="line">&#123; path: &apos;/404&apos;, component: _import(&apos;common/404&apos;), name: &apos;404&apos;, meta: &#123; title: &apos;404未找到&apos; &#125; &#125;,</span><br><span class="line">&#123; path: &apos;/login&apos;, component: _import(&apos;common/login&apos;), name: &apos;login&apos;, meta: &#123; title: &apos;登录&apos; &#125; &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 二.主入口路由(需嵌套上左右整体布局)</span><br><span class="line">const mainRoutes = &#123;</span><br><span class="line">path: &apos;/&apos;,</span><br><span class="line">component: _import(&apos;main&apos;),</span><br><span class="line">name: &apos;main&apos;,</span><br><span class="line">redirect: &#123; name: &apos;home&apos; &#125;, //重定向到home       /==&gt;/home</span><br><span class="line">meta: &#123; title: &apos;主入口整体布局&apos; &#125;,</span><br><span class="line">children: [</span><br><span class="line">    // 通过meta对象设置路由展示方式</span><br><span class="line">    // 1. isTab: 是否通过tab展示内容, true: 是, false: 否</span><br><span class="line">    // 2. iframeUrl: 是否通过iframe嵌套展示内容, &apos;以http[s]://开头&apos;: 是, &apos;&apos;: 否</span><br><span class="line">    // 提示: 如需要通过iframe嵌套展示内容, 但不通过tab打开, 请自行创建组件使用iframe处理!</span><br><span class="line">    &#123; path: &apos;/home&apos;, component: _import(&apos;common/home&apos;), name: &apos;home&apos;, meta: &#123; title: &apos;首页&apos; &#125; &#125;</span><br><span class="line">    //添加动态菜单路由</span><br><span class="line">],</span><br><span class="line">// 三.全局导航守卫 有token并正确则进入主页，失败进入登录页（初次使用时或token过期等时）</span><br><span class="line">beforeEnter (to, from, next) &#123; </span><br><span class="line">    let token = Vue.cookie.get(&apos;token&apos;)</span><br><span class="line">    if (!token || !/\S/.test(token)) &#123;</span><br><span class="line">    clearLoginInfo()</span><br><span class="line">    next(&#123; name: &apos;login&apos; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断当前路由类型 的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    /**</span><br><span class="line">* 判断当前路由类型, global: 全局路由, main: 主入口路由</span><br><span class="line">* 全局路由, 可以直接访问</span><br><span class="line">* @param &#123;*&#125; route 当前路由</span><br><span class="line">*/</span><br><span class="line">function fnCurrentRouteType (route) &#123;</span><br><span class="line">// console.log(route);</span><br><span class="line">var temp = []</span><br><span class="line">for (var i = 0; i &lt; globalRoutes.length; i++) &#123;</span><br><span class="line">    if (route.path === globalRoutes[i].path) &#123;</span><br><span class="line">    return &apos;global&apos;</span><br><span class="line">    &#125; else if (globalRoutes[i].children &amp;&amp; globalRoutes[i].children.length &gt;= 1) &#123;</span><br><span class="line">    temp = temp.concat(globalRoutes[i].children)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return temp.length &gt;= 1 ? fnCurrentRouteType(route, temp) : &apos;main&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加动态(菜单)路由 的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 添加动态(菜单)路由</span><br><span class="line">* @param &#123;*&#125; menuList 后台获取的菜单列表</span><br><span class="line">* @param &#123;*&#125; routes 递归创建的动态(菜单)路由</span><br><span class="line">*/</span><br><span class="line">function fnAddDynamicMenuRoutes (menuList = [], routes = []) &#123;</span><br><span class="line">var temp = []</span><br><span class="line">// console.log(menuList.length)</span><br><span class="line">for (var i = 0; i &lt; menuList.length; i++) &#123;</span><br><span class="line">    if (menuList[i].list &amp;&amp; menuList[i].list.length &gt;= 1) &#123;</span><br><span class="line">    temp = temp.concat(menuList[i].list)</span><br><span class="line">    &#125; else if (menuList[i].url &amp;&amp; /\S/.test(menuList[i].url)) &#123;</span><br><span class="line">    menuList[i].url = menuList[i].url.replace(/^\//, &apos;&apos;)</span><br><span class="line">    // console.log(menuList[i].url);</span><br><span class="line">    var route = &#123;</span><br><span class="line">        path: menuList[i].url.replace(&apos;/&apos;, &apos;-&apos;),</span><br><span class="line">        component: null,</span><br><span class="line">        name: menuList[i].url.replace(&apos;/&apos;, &apos;-&apos;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">        menuId: menuList[i].menuId,</span><br><span class="line">        title: menuList[i].name,</span><br><span class="line">        isDynamic: true,</span><br><span class="line">        isTab: false, </span><br><span class="line">        //isTab:true 显示上方的tab按钮</span><br><span class="line">        iframeUrl: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // url以http[s]://开头, 通过iframe展示</span><br><span class="line">    if (isURL(menuList[i].url)) &#123;</span><br><span class="line">        route[&apos;path&apos;] = `i-$&#123;menuList[i].menuId&#125;`</span><br><span class="line">        route[&apos;name&apos;] = `i-$&#123;menuList[i].menuId&#125;`</span><br><span class="line">        route[&apos;meta&apos;][&apos;iframeUrl&apos;] = menuList[i].url</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">        route[&apos;component&apos;] = _import(`modules/$&#123;menuList[i].url&#125;`) || null</span><br><span class="line">        &#125; catch (e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    routes.push(route)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (temp.length &gt;= 1) &#123; //表示menuList[i][j]项里面还有嵌套的菜单</span><br><span class="line">    fnAddDynamicMenuRoutes(temp, routes)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //当temp没有时 表示所有菜单都已经遍历过 结束递归</span><br><span class="line">    mainRoutes.name = &apos;main-dynamic&apos;</span><br><span class="line">    mainRoutes.children = routes</span><br><span class="line">    router.addRoutes([</span><br><span class="line">    mainRoutes,</span><br><span class="line">    &#123; path: &apos;*&apos;, redirect: &#123; name: &apos;404&apos; &#125; &#125;</span><br><span class="line">    ])</span><br><span class="line">    //动态菜单路由存到本地</span><br><span class="line">    sessionStorage.setItem(&apos;dynamicMenuRoutes&apos;, JSON.stringify(mainRoutes.children || &apos;[]&apos;)) </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>router构成<br>1.路由跳转前先判断是否已经添加过动态路由或者跳向全局路由，如果不是就需要添加动态路由。<br>2.添加动态路由</p><ul><li>请求菜单列表</li><li>调用添加路由方法，对获取到的菜单列表的每一项进行路由转化（递归调用的方式）。把转化后的routes对象存入mainRoutes主入口路由的children中，实现动态菜单路由。</li><li>把菜单列表和权限存入本地<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">const router = new Router(&#123;</span><br><span class="line">  mode: &apos;hash&apos;,</span><br><span class="line">  scrollBehavior: () =&gt; (&#123; y: 0 &#125;), //定位在最上面</span><br><span class="line">  isAddDynamicMenuRoutes: false, // 是否已经添加动态(菜单)路由</span><br><span class="line">  routes: globalRoutes.concat(mainRoutes) //把全局路由和主入口路由合并到router</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  //全局前置守卫</span><br><span class="line">  router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // 添加动态(菜单)路由</span><br><span class="line">  // 1. 已经添加 or 全局路由, 直接访问</span><br><span class="line">  // 2. 获取菜单列表, 添加并保存本地存储</span><br><span class="line">  if (router.options.isAddDynamicMenuRoutes || fnCurrentRouteType(to) === &apos;global&apos;) &#123;</span><br><span class="line">      next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      //一 .请求菜单列表</span><br><span class="line">      http(&#123;</span><br><span class="line">      url: http.adornUrl(&apos;/sys/menu/nav&apos;),</span><br><span class="line">      method: &apos;get&apos;,</span><br><span class="line">      params: http.adornParams()</span><br><span class="line">      &#125;).then((&#123;data&#125;) =&gt; &#123;</span><br><span class="line">      if (data &amp;&amp; data.code === 0) &#123;</span><br><span class="line">          // 二 .添加动态菜单路由到mainRoutes.children中</span><br><span class="line">          fnAddDynamicMenuRoutes(data.menuList)</span><br><span class="line">          router.options.isAddDynamicMenuRoutes = true</span><br><span class="line">          // 三 .把菜单列表和权限存入本地</span><br><span class="line">          sessionStorage.setItem(&apos;menuList&apos;, JSON.stringify(data.menuList || &apos;[]&apos;))</span><br><span class="line">          sessionStorage.setItem(&apos;permissions&apos;, JSON.stringify(data.permissions || &apos;[]&apos;))</span><br><span class="line">          next(&#123; ...to, replace: true &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          sessionStorage.setItem(&apos;menuList&apos;, &apos;[]&apos;)</span><br><span class="line">          sessionStorage.setItem(&apos;permissions&apos;, &apos;[]&apos;)</span><br><span class="line">          next()</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;).catch((e) =&gt; &#123;</span><br><span class="line">      console.log(`%c$&#123;e&#125; 请求菜单列表和权限失败，跳转至登录页！！`, &apos;color:blue&apos;)</span><br><span class="line">      router.push(&#123; name: &apos;login&apos; &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  export default router</span><br></pre></td></tr></table></figure></li></ul><p>生成的路由构成如下所示：<br>第一第二个是全局路由，第三个是动态生成的菜单路由<br><img src="/images/vue/4.png" alt="目录"></p></li></ul><h2 id="根据路由跳转"><a href="#根据路由跳转" class="headerlink" title="根据路由跳转"></a>根据路由跳转</h2><p>  在main-sidebar文件中 获取菜单列表menulist和动态菜单路由dynamicMenuRoutes<br>  <img src="/images/vue/8.png" alt="目录"><br>  在main-sidebar父组件中传递菜单列表中的项和动态菜单路由给子组件main-sidebar-sub-menu<br>  <img src="/images/vue/5.png" alt="目录"><br>  在子组件main-sidebar-sub-menu中，若传递过来的menu项有list并大于1则重新进入子组件的循环中<br>  <img src="/images/vue/6.png" alt="目录"><br>  没有则根据menu.id筛选出对应的动态菜单路由项，直接跳转至相应的路由<br>  <img src="/images/vue/7.png" alt="目录"></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
          <category> vue-router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XMLHttpRequest详解</title>
      <link href="/2018/10/07/XHR/"/>
      <url>/2018/10/07/XHR/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>XMLHttpRequest详解</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a><br>XMLHttpRequest 对象实例<strong>用于在后台与服务器交换数据</strong>。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>XMLHttpRequest：构造函数，是浏览器内置的函数，通过new关键字创建XHR对象实例，XHR对象可以同步或异步返回服务器响应。<br>尽管名为 XMLHttpRequest，它并不限于和 XML 文档一起使用：它可以接收任何形式的文本文档。<br>XMLHttpRequest 对象是名为 AJAX 的 Web 应用程序架构的一项关键功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg : var xmlhttp=new XMLHttpRequest();/var xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br></pre></td></tr></table></figure><h2 id="能做什么？"><a href="#能做什么？" class="headerlink" title="能做什么？"></a>能做什么？</h2><ul><li><p>在不重新加载页面的情况下更新网页</p></li><li><p>在页面已加载后从服务器请求数据</p></li><li><p>在页面已加载后从服务器接收数据</p></li><li><p>在后台向服务器发送数据</p></li></ul><h2 id="对象能调用的属性和方法"><a href="#对象能调用的属性和方法" class="headerlink" title="对象能调用的属性和方法"></a>对象能调用的属性和方法</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol><li><p>readyState：HTTP 请求的状态。<br> 当一个 XMLHttpRequest 初次创建时，<br> 这个属性的值从 0 开始，直到接收到完整的 HTTP 响应，这个值增加到 4。<br> readyState 的值不会递减，除非当一个请求在处理过程中的时候调用了 abort() 或 open() 方法。<br> 每次这个属性的值增加的时候，都会触发 onreadystatechange 事件句柄。</p><p> readyState的0-4取值代表什么意思：<br> <img src="/images/web/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181113103837.png" alt="redayState"></p></li><li><p>status：由服务器返回的 HTTP 状态代码<br> 如 200 表示成功，而 404 表示 “Not Found” 错误<br> 当 readyState 小于 3 的时候读取这一属性会导致一个异常</p></li><li><p>statusText：用名称而不是数字指定了请求的 HTTP 的状态代码<br> 比如状态码表示200时这个值就是’ok’<br> 404就是’Not Found’</p></li><li><p>responseText：服务器接收到的响应体（不包括头部），或者如果还没有接收到数据的话，就是空字符串。<br> 如果 readyState 小于 3，这个属性就是一个空字符串。<br> 当 readyState 为 3，这个属性返回目前已经接收的响应部分。<br> 如果 readyState 为 4，这个属性保存了完整的响应体。</p></li><li><p>responseXML：对请求的响应，解析为 XML 并作为 Document 对象返回。</p></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>onreadystatechange 每次 readyState 属性改变的时候调用的事件句柄函数。<br>当 readyState 为 3 时，它也可能调用多次。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li><p>abort()<br> 官方给出该方法是用来取消当前响应，关闭连接并且结束任何未决的网络活动。<br> 这个方法把 XMLHttpRequest 对象重置为 readyState 为 0 的状态，并且取消所有未决的网络活动。</p></li><li><p>setRequestHeader()<br> 向一个打开但未发送的请求设置或添加一个 HTTP 请求。<br> setRequestHeader()方法必须设置在  open()之后，send()之前。</p></li><li><p>getResponseHeader()<br> 返回指定的 HTTP 响应头部的值。</p><p> 语法：setRequestHeader(name, value)</p><pre><code>name 参数是要设置的头部的名称。这个参数不应该包括空白、冒号或换行。value 参数是头部的值。这个参数不应该包括换行。有些请求头部由 XMLHttpRequest 自动设置而不是由这个方法设置，以符合 HTTP 协议。</code></pre></li><li><p>open()<br> 初始化 HTTP 请求参数，例如 URL 和 HTTP 方法，但是并不发送请求。</p><p> 语法：open(method, url, async, username, password)</p><pre><code>method 参数是用于请求的 HTTP 方法。值包括 GET、POST 和 HEAD。url 参数是请求的主体。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。async 参数指示请求使用应该异步地执行。    如果这个参数是 false，请求是同步的，后续对 send() 的调用将阻塞，直到响应完全接收。    如果这个参数是 true 或省略，请求是异步的，且通常需要一个 onreadystatechange 事件句柄。username 和 password 参数可选，为 url 所需的授权提供认证资格。如果指定了，它们会覆盖 url 自己指定的任何资格。</code></pre></li><li><p>send()<br> 用来发送 HTTP 请求，使用传递给 open() 方法的参数，以及传递给该方法的可选请求体。<br> 如果请求是异步的（这是默认值），则此方法会在发送请求后立即返回。</p><p> 语法：send(body)</p><pre><code>如果通过调用 open() 指定的 HTTP 方法是 POST 或 PUT，body 参数指定了请求体，如果请求体不适必须的话，这个参数就为 null。    </code></pre></li></ol><h2 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h2><ul><li><p>所有现代浏览器 (IE7+、Firefox、Chrome、Safari 以及 Opera) 都内建了 XMLHttpRequest 对象。<br>  都可以使用XMLHttpRequest创建对象<br>  var xmlhttp=new XMLHttpRequest();</p></li><li><p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：<br>  xmlhttp=new ActiveXObject(“Microsoft.XMLHTTP”);</p></li><li><p>兼容写法：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line">if (window.XMLHttpRequest)&#123;</span><br><span class="line">    // code for all new browsers</span><br><span class="line">    xmlhttp=new XMLHttpRequest();</span><br><span class="line">&#125;else if (window.ActiveXObject)&#123;</span><br><span class="line">    // code for IE5 and IE6</span><br><span class="line">    xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="怎样完整地执行一次GET请求"><a href="#怎样完整地执行一次GET请求" class="headerlink" title="怎样完整地执行一次GET请求"></a>怎样完整地执行一次GET请求</h2><pre><code>1.创建XMLHttpRequest组建。2.设置回调函数。3.初始化XMLHttpRequest组建。4.发送请求。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var userName;    </span><br><span class="line">var passWord;    </span><br><span class="line">var xmlHttpRequest;    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//XmlHttpRequest对象    </span><br><span class="line">function createXmlHttpRequest()&#123;    </span><br><span class="line">    if(window.ActiveXObject)&#123; //如果是IE浏览器    </span><br><span class="line">        return new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);    </span><br><span class="line">    &#125;else if(window.XMLHttpRequest)&#123; //非IE浏览器    </span><br><span class="line">        return new XMLHttpRequest();    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line">function onLogin()&#123;    </span><br><span class="line">    userName = document.f1.username.value;    </span><br><span class="line">    passWord = document.f1.password.value;      </span><br><span class="line">        </span><br><span class="line">    var url = &quot;LoginServlet?username=&quot;+userName+&quot;&amp;password=&quot;+passWord+&quot;&quot;;       </span><br><span class="line">            </span><br><span class="line">    //1.创建XMLHttpRequest组建    </span><br><span class="line">    xmlHttpRequest = createXmlHttpRequest();    </span><br><span class="line">        </span><br><span class="line">    //2.设置回调函数    </span><br><span class="line">    xmlHttpRequest.onreadystatechange = zswFun;    </span><br><span class="line">        </span><br><span class="line">    //3.初始化XMLHttpRequest组建    </span><br><span class="line">    xmlHttpRequest.open(&quot;POST&quot;,url,true);    </span><br><span class="line">        </span><br><span class="line">    //4.发送请求    </span><br><span class="line">    xmlHttpRequest.send(null);      </span><br><span class="line">&#125;       </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//回调函数    </span><br><span class="line">function zswFun()&#123;    </span><br><span class="line">    if(xmlHttpRequest.readyState == 4 &amp;&amp; xmlHttpRequest.status == 200)&#123;    </span><br><span class="line">        var b = xmlHttpRequest.responseText;    </span><br><span class="line">        if(b == &quot;true&quot;)&#123;    </span><br><span class="line">            alert(&quot;登录成功！&quot;);    </span><br><span class="line">        &#125;else&#123;    </span><br><span class="line">            alert(&quot;登录失败！&quot;);    </span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="怎样检测错误"><a href="#怎样检测错误" class="headerlink" title="怎样检测错误"></a>怎样检测错误</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.w3school.com.cn/xml/xml_http.asp" target="_blank" rel="noopener">XML XMLHttpRequest</a><br><a href="http://www.w3school.com.cn/xmldom/dom_http.asp" target="_blank" rel="noopener">XML XMLHttpRequest</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN</a><br><a href="https://segmentfault.com/a/1190000004322487" target="_blank" rel="noopener">你真的会使用XMLHttpRequest吗?</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css基础</title>
      <link href="/2018/09/27/css%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/27/css%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>css基础</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p>1.CSS:层叠样式表(Cascading Style Sheets); 是一种修饰语言<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html   css        js</span><br><span class="line">脸     化妆技术    动画</span><br></pre></td></tr></table></figure></p><p>2.语法</p><ul><li><p>css声明(style属性)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性名:属性值;</span><br><span class="line">属性名:属性值;</span><br></pre></td></tr></table></figure></li><li><p>css声明块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">        属性名:属性值;</span><br><span class="line">        属性名:属性值;</span><br><span class="line">    &#125;</span><br><span class="line">css选择器</span><br><span class="line">    div&#123;</span><br><span class="line">        属性名:属性值;</span><br><span class="line">        属性名:属性值;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><p>3.margin  速记属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    margin:0px 0px 0px 0px;</span><br><span class="line">        上 右 下 左</span><br><span class="line">    margin:0 0;</span><br><span class="line">        上下  左右</span><br><span class="line">    margin:0 0 0;</span><br><span class="line">        上  左右  下</span><br><span class="line">    margin:0;</span><br><span class="line">        上下左右都是</span><br><span class="line"></span><br><span class="line">margin-top</span><br><span class="line">margin-bottom</span><br><span class="line">margin-left</span><br><span class="line">margin-right</span><br></pre></td></tr></table></figure></p><p>4.css样式表的位置</p><ul><li><p>内联样式表   style=”width:100px;”</p></li><li><p>内部样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        width:100px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>外部样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部css文件中</span><br><span class="line">引入css文件:</span><br><span class="line">    1.将css文件引入到html文件中,使用link标签的href属性.</span><br><span class="line">    2.将源css文件(common.css)引入到目标css文件(style.css)中,在目标css文件中写:@import url(&quot;common.css&quot;);</span><br></pre></td></tr></table></figure></li><li><p>三种样式表优先级: 遵循就近原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">link</span><br><span class="line">style</span><br><span class="line">div style=&quot;&quot;</span><br><span class="line"></span><br><span class="line">行内样式表&gt;内部样式表&gt;外部样式表</span><br><span class="line"></span><br><span class="line">style</span><br><span class="line">link</span><br><span class="line">    div style=&quot;&quot;</span><br><span class="line"></span><br><span class="line">行内样式表&gt;外部样式表&gt;内部样式表</span><br></pre></td></tr></table></figure></li></ul><p>5.浏览器加载页面的过程:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">加载html-解析html------------DOM--展示</span><br><span class="line">                |           |</span><br><span class="line">              加载css----解析css</span><br></pre></td></tr></table></figure><h2 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h2><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><p>color：前景色(元素内容的颜色)<br>background-color:背景色<br>width<br>height<br>margin:top right bottom left;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">top/bottom left/right;  </span><br><span class="line">top/bottom/left/right; </span><br><span class="line">0 auto ;水平居中  </span><br><span class="line">    div&#123;</span><br><span class="line">    margin:0 auto;让div居中</span><br><span class="line">    text-align:center; 让div的内容水平居中</span><br><span class="line">    line-height：div的高；垂直居中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>默认div占一行，高度由子元素撑起来，一般在div上设置宽度，在子元素设置高度</strong> </p><p>padding<br>background<br>background-color:背景颜色<br>border:width style color;</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><ol><li><p>float属性：none(默认，不浮动) left right</p></li><li><p>浮动的特点：<br> 1)脱离文档流，浮动一个元素，飘在原来位置的上面，并不是飘在页面的左上角，如果后面还有(不浮动)元素会顶上去。<br> <strong>浮动元素浮动之后的位置跟浮动元素浮动之前在文档流的位置有关。</strong><br> 2)同方向上的浮动，先浮动的在前面，后浮动的在后面。<br> 3)不同方向的浮动，左浮动找左浮动，右浮动找右浮动。</p></li><li>浮动中的左右边距问题：<br> 正常情况下，没有浮动，两个相邻元素的上下margin取较大者，<br> 如果两个元素都浮动，两个相邻元素的左右margin不共用，累加。</li><li><p>浮动对父元素的影响：<br>如果子元素都浮动的话，父级没有高度，跟父级同一级别的之后元素会上顶被覆盖；如果父级想有高度，父级使用overflow:hidden;就有高度，不影响布局.<br>如果只是想不影响之后的布局，在之后布局的元素内部。使用clear:both;父级来清除浮动，它是没有高度的。<br> （clear：both是同一级别的元素进行清除浮动）</p><p> eg:如果父元素包裹两个子元素，子元素都浮动，那么父元素没有高度，</p><pre><code>如果想让父元素有高度，使用overflow:hidden;那么不影响跟父元素同一级别的元素（后面元素）布局 div (parent)        overflow:hidden;    div  float:left    div  float:left    div  mormal      clear:both div (other) mormal 一般给父元素设置宽度，给子元素设置高度，父元素的高度由子元素撑起来，子元素的宽度就可以使用百分比   父元素宽度1000；子元素设置为30%；则子元素高度为300px；</code></pre></li></ol><p><strong>overflow:hidden和clear:both</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden;</span><br><span class="line">    如果子元素都浮动的话，父级没有高度，如果父级想有高度，父级使用overflow:hidden;就有高度，不影响布局</span><br><span class="line">        并且跟父级同一级别的元素（之后的布局元素）会保留自己所在文档流中     </span><br><span class="line">clear：both</span><br><span class="line">    如果子元素都浮动的话，父级没有高度，如果只是想不影响之后的布局，在之后布局的元素内部使用clear:both;来清除浮动。这样父级没有高度</span><br><span class="line">    并且是设置在同一级别的元素进行清除浮动</span><br></pre></td></tr></table></figure></p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><pre><code>选择器：选择符合条件的元素，元素选择出来之后。在css声明块中给样式</code></pre><ol><li><p>选择器种类</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">id选择器</span><br><span class="line">class选择器</span><br><span class="line">标签选择器</span><br><span class="line">普遍选择器</span><br><span class="line">子元素-后代-兄弟选择器</span><br><span class="line">    &gt;    儿子 </span><br><span class="line">    空格  后代（儿子和孙子）</span><br><span class="line">    +    后一个兄弟（紧跟其后的一个）</span><br><span class="line">    ～   在该元素之后的所有兄弟</span><br><span class="line"></span><br><span class="line">组合选择器（并集）div,.one 选中div和class为one的</span><br><span class="line">嵌套选择器(交集) div.one  选中class为one的div</span><br><span class="line">后代选择器      div .one  选中div下 calss为one的所以后代元素</span><br><span class="line">属性选择器 </span><br><span class="line">    div[attr]     有某个属性的标签</span><br><span class="line">    div[attr=&quot;value&quot;/value] 有某个属性名=属性值的标签</span><br><span class="line">    div[attr^=value] 选中属性名，并且属性值以什么开头的 &lt;div&gt; &lt;/div&gt;</span><br><span class="line">    div[attr$=value] 选中属性名，并且属性值以什么结尾的</span><br><span class="line">    div[attr*=value] 选中属性名，并且属性值包含什么</span><br><span class="line">    div[attr~=value] 选中属性名，并且有一个值为value 一般针对class</span><br><span class="line">    &lt;div class=&quot;one two three&quot;&gt;&lt;/div&gt;</span><br><span class="line">    div[attr~=two]</span><br><span class="line"></span><br><span class="line">伪类选择器</span><br><span class="line">    1. 子代选择器</span><br><span class="line">    不分类型的：</span><br><span class="line">        p:only-child 独生子p</span><br><span class="line">        p:first-child p元素作为第一个孩子的被选中</span><br><span class="line">        p:last-child p元素作为最后一个孩子的被选中</span><br><span class="line">        p:nth-child(n) p元素作为第几个孩子的被选中</span><br><span class="line">        p:nth-last-child(n) p元素作为倒数第几个孩子的被选中</span><br><span class="line">    分类型的：</span><br><span class="line">        后代:first-of-type 每个类型的第一个</span><br><span class="line">        后代:last-of-type 每个类型的最后一个</span><br><span class="line">        后代:nth-of-type(n) 每个类型的第几个</span><br><span class="line">        后代:nth--last-of-type(n) 每个类型的倒数第几个</span><br><span class="line">        括号的取值:</span><br><span class="line">            n 自然数</span><br><span class="line">            2n+1</span><br><span class="line">            odd 奇数</span><br><span class="line">            even 偶数</span><br><span class="line"></span><br><span class="line">    2. 状态选择器 达到某一特定情况下激发</span><br><span class="line">        a:link 未访问状态</span><br><span class="line">        :visited 已访问状态</span><br><span class="line">        :hover 鼠标悬停状态</span><br><span class="line">        :active 激活状态，点击时</span><br><span class="line"></span><br><span class="line">        form *:focus 聚焦状态</span><br><span class="line">            </span><br><span class="line">            *:disabled 禁用状态</span><br><span class="line">            *:enabled 不可用状态</span><br><span class="line">            </span><br><span class="line">            *:checked 单选或者多选的选中状态</span><br><span class="line">            *:default 单选或者多选的默认的选中状态</span><br><span class="line">            </span><br><span class="line">            *:valid 通过验证的状态</span><br><span class="line">            *:invalid 未通过验证的状态</span><br><span class="line"></span><br><span class="line">            *:required 必填选项</span><br><span class="line">            *:optional 非必填选项</span><br><span class="line">            </span><br><span class="line">            *:in-range 范围内</span><br><span class="line">            *:out-of-range 范围外</span><br><span class="line"></span><br><span class="line">伪元素选择器</span><br><span class="line">    ::before 在选中的元素前面添加内容</span><br><span class="line">    ::after 在选中的元素后面添加内容</span><br><span class="line">    ::first-letter 块级元素第一个字符</span><br><span class="line">    ::first-line 块级元素第一行</span><br><span class="line">    ::selection 选中的元素</span><br></pre></td></tr></table></figure></li><li><p>css选择器的优先级<br> 1)！important 修饰的最优先<br> 2) (层叠性)判断是否为直接选中或间接选中</p><pre><code>间接选中 遵循就近原则（看继承的元素离它的远近）直接选中 相同的选择器则后来者居上    不同选择器看权值        特性值 权值最大的优先            style属性内部样式 1000            id选择器 100            class选择器，属性选择器，伪类选择器 10            标签选择器，伪元素选择器   1            &gt; + ~ 空格   0        多个选择器叠加 选权值和最大的</code></pre><p> 3)权值和大小一样的就遵循 就近原则（ 后来者居上）</p></li><li><p>继承</p><ul><li>可继承属性 color   </li><li>不可继承属性 border<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将可继承变为不可继承，使用initial属性值</span><br><span class="line">将不可继承变为可继承，使用inherit属性值</span><br><span class="line">不进行设置 默认继承就继承，不继承就不继承,使用unset属性值</span><br><span class="line">border:inherit;/*继承*/</span><br><span class="line">color: initial;/*不继承*/</span><br><span class="line">color: unset;/*不进行设置 默认继承就继承，不继承就不继承*/</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><ol><li><p>文字样式<br> font-style 字体倾斜</p><pre><code>normal 正常italic 倾斜obolique 模拟倾斜</code></pre><p> font-weight 字体粗细</p><pre><code>normal 正常 400bold  加粗  700bolder lighter 比父元素粗或细100-900 数字</code></pre><p> font-size 字体大小，默认为16px</p><pre><code>浏览器默认的换算 16px=1em;一般会在页面开始的时候设置body的字体为 font-size:62.5%;如此整个页面的大小换算则为 1em=16px*62.5%=10px;</code></pre><p> font-family 字体家族</p><pre><code>serif 有衬线sans-serif 无衬线monospace 等宽 英文字母的等宽（unicode编码）cursive 草书fantasy 梦幻&quot;黑体&quot; &quot;宋体&quot;...</code></pre><p> font属性连写：   font:style weight size/line-height family</p></li><li><p>文本样式<br> text-decoration :none;<br>   属性连写和分开写在谷歌都不支持。</p><pre><code>text-decoration-line:线的位置（连写时不能省略）       underline(下划线)       overline 上划线       line-through 删除线text-decoration-style:线的类型（可省略）       solid 实线       dotted 点状线       double 双实线       dashed 虚线       wavy 波浪线text-decoration-color（可省略）text-decoration:line-through solid red;连写属性</code></pre><p> text-align 文本对齐方式</p><pre><code>rightleftcenterjustify 两端对齐 ？</code></pre><p> text-indent<br> text-transform</p><pre><code>none 默认uppercase 大写lowercase 小写capitalize 首字母大写full-width:等宽，中文和英文之间等宽</code></pre><p> text-shadow 文字阴影:水平方向偏移 垂直方向偏移 模糊距离 颜色;</p><pre><code>如果想写多个阴影，则用逗号隔开水平方向正值向右，负值向左</code></pre></li><li><p>列表<br> 默认样式 ：ul有一个上下margin 16px;有一个padding-left为40px；</p><pre><code>dl有一个上下margin 16px;没有padding-left；dd有margin-left 为40px;p 有上下margin为16px;</code></pre><p> list-style-type</p><pre><code>none 去掉disc 实心圆circle 空心圆square 方形decimal 数字decimal-leading-zero 小于10以下的数字前面加0lower-roman：小写罗马upper-roman:大写罗马</code></pre><p> list-style-image：url();</p><pre><code>注意位置，配合切片</code></pre><p> list-style-position</p><pre><code>inside 主框内outside 主框外</code></pre></li><li><p>鼠标的样式<br>cursor<br> default: 默认 箭头<br> auto:  自动<br> pointer:手型<br> crosshair 十字<br> move :手型 缩的<br> help : ?<br> wait:等待 转圈<br> 八个方向<br> url(路径),auto;  必须用逗号形式给一个备用的样式，当显示不出的时候就会使用后面的。</p></li><li><p>背景属性</p><ul><li>background-color</li><li>background-image:url();</li><li>background-position:水平 垂直;<br>关键字<br> 水平方向 left center right<br> 垂直方向 top center bottom<br>px<br> 可以为负值<br> 参考原点为元素左上角<br> 可以制作精灵图</li><li><p>background-size:背景图片的大小<br>正常情况下，背景图片的大小为图片的大小</p><p>取值：<br>   百分比 100% 100% 等比拉伸到这个元素的百分之多少 百分之百占满整个元素(推荐使用)<br>   px<br>   cover   等比拉伸，并且拉伸到 宽和高 都占满整个元素<br>   contain 等比拉伸，并且拉伸到 宽或高 占满整个元素</p></li><li><p>background-orgin:背景图片的原点<br>border-box  背景图片从border开始<br>padding-box 背景图片从padding开始 默认<br>content-box 背景图片从content开始</p></li><li><p>background-clip:图片裁剪的范围<br>border-box  背景图片从border结束 默认<br>padding-box 背景图片从padding结束<br>content-box  背景图片从content结束<br><strong>一般background-origin和background-clip一起使用，并且通常都设置成开始和结束是相同的地方</strong></p></li><li><p>background-attachment 将图片绑定到什么上<br>fixed 绑定到视口上,从body开始。 不随文档流的移动而移动，在视口位置固定不动<br>scroll 默认，绑定到某个元素上 ，这个元素的图片不会随着元素内容的移动而移动<br>local 绑定到元素内容上，这张背景图会随着元素内容的移动而移动</p><p>速记属性<br>书写连写 background:color url() position/size repeat;</p></li></ul></li><li><p>边框 border（速写属性）</p><ul><li>border-width 设置宽度</li><li>border-style 设置线条样式 :dotted dashed sloid double groove ridge outset inset</li><li>border-color 颜色</li><li>border-image:边框图片(连写属性)</li><li>border-image-source:url();</li><li>border-image-slice裁剪成九宫格:top  right bottom left</li><li><p>border-image-repeat:重复方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">round 自适应展示，会完整的一块展示（一般用的多）</span><br><span class="line">repeat 不会自适应展示 不会完整的展示</span><br><span class="line">stretch 中间拉伸，四个角保留不变。默认</span><br><span class="line">注意需要设置的是border：10px sloid;</span><br></pre></td></tr></table></figure></li><li><p>border-radius  圆角边框   值为px或者百分比   百分比超过50%就为圆   </p></li></ul></li><li><p>表格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">border-collapse 边框的合并和展示</span><br><span class="line">collapse合并</span><br><span class="line">separate不合并</span><br><span class="line">background 背景连写</span><br><span class="line">caption-side 标题的位置</span><br><span class="line">    top</span><br><span class="line">    bottom</span><br><span class="line">table-layout 布局方式</span><br><span class="line">    auto 自动识别，单元格的宽度由单元格的内容决定</span><br><span class="line">    fixed 固定  单元格的宽度由你自己设置的宽度决定，一般不用，内容多时会溢出</span><br></pre></td></tr></table></figure></li><li><p>其他样式</p><ul><li>outline(速记属性) outline:color style width;<br>外边框 不占用空间<br> outline-width<br> outline-style<br> outline-color<br>outline与border的区别<br>border占用空间，会影响盒子的大小<br>outline不占用空间，不会影响盒子的大小，一般在border之外的部分展示，不会影响下面的布局</li><li><p>display展现形式</p><p>行内元素最好不要直接过渡到块级元素，可以变成行内块级元素。也不要设置margin和padding.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline 行内展示 在一行显示，不可设置宽高</span><br><span class="line">block 块级展示 独占一行，可以设置宽高，不设置时默认浏览器的宽度</span><br><span class="line">inline-block 行内块级展示 在一行展示，并且可以设置宽高</span><br><span class="line">none  元素隐藏，不占据屏幕空间</span><br></pre></td></tr></table></figure></li><li><p>visibility可见性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hidden 不可见 但是占据屏幕宽度，要与display相比较</span><br><span class="line">visible 可见</span><br></pre></td></tr></table></figure></li><li><p>overflow超出处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hidden:当子元素有浮动的时候清除浮动；当子元素不浮动，但是元素内容超过父元素的时候，让超出的部分隐藏</span><br><span class="line">scroll 无论是否有溢出，都有滚动条</span><br><span class="line">auto 有溢出有滚动条，不溢出没滚动条</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li><p>w3c标准盒子模型 (box-sizing:content-box)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    width:100px;</span><br><span class="line">    height:100px;</span><br><span class="line">    border:10px;</span><br><span class="line">    margin:10px;</span><br><span class="line">    padding:10px;</span><br><span class="line">&#125;</span><br><span class="line"> 内容区宽度 100px </span><br><span class="line"> 盒子宽度（不包括margin）width+border*2+padding*2</span><br><span class="line"> 所占空间 width+border*2+padding*2+margin*2</span><br></pre></td></tr></table></figure></li><li><p>IE模型:width是包括padding border(box-sizing:border-box)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">     width:100px;</span><br><span class="line">     height:100px;</span><br><span class="line">     border:10px;</span><br><span class="line">     margin:10px;</span><br><span class="line">     padding:10px;</span><br><span class="line"> &#125;</span><br><span class="line"> 内容区宽度 width-2*padding-2*border</span><br><span class="line"> 盒子宽度 100px</span><br><span class="line"> 所占空间 width+margin*2</span><br></pre></td></tr></table></figure></li><li><p>box-sizing:盒子的大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border-box:设置的width是这个盒子的大小</span><br><span class="line">content-box:设置的width是盒子内容的大小</span><br></pre></td></tr></table></figure></li><li><p>盒子的大小和空间大小</p><ul><li>盒子的大小不包括margin</li><li>所占空间的大小包括margin</li></ul></li></ul><h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><ol><li>默认文档流：<br> 文档书写顺序就是页面展示顺序<br> 块级元素独占一行，行内元素与其他共享一行</li><li><p>改变默认文档流<br> (1) float 浮动<br> (2) display<br> (3) position 定位   </p><ul><li><p>static 默认定位（静态定位）,不定位</p></li><li><p>fixed 固定定位 固定在浏览器上  脱离文档流 不随文档流的滚动而滚动，后面的盒子往上会被覆盖</p></li><li><p>relative 相对定位 相对与原来位置 不脱离文档流 </p></li><li><p>absolute 绝对定位 相对与浏览器或者离它最近的祖先定位元素.</p><pre><code>如果没有祖先元素，那么相对于浏览器定位。如果有祖先元素但是祖先元素没有定位元素则依然相对于页面定位。如果有祖先元素并且祖先元素有定位元素，则相对于最近的祖先元素定位。                             </code></pre><p>  <strong>定位元素有一些特用属性left bottom right top</strong>      </p></li></ul><p>(4) display:flex;弹性盒子布局<br> <strong>盒子默认情况下是分行式布局（块级元素默认的），</strong>可以通过下面方法实现分列布局</p><ul><li><p>方法一：用column属性进行分栏式布局（在一行显示，分列）<br>   column-count:数字;(分为几列)  分栏<br>   column-rule:width style color;设置分割线<br>   column-gap:px;  设置栅栏，即分栏之间的间隔<br>   用这种方法设置的分栏布局是根据内容来分栏的，不是根据你设置的div来分栏</p></li><li><p>方法二：通过给父元素设置display:flex;属性来进行分栏布局，它是根据你设置的div进行内容分栏，而不是通过内容分栏。</p><ul><li><p>父元素 (容器)<br>1.display:flex;使它的子元素进行分栏布局<br>2.flex-diretion:方向</p><pre><code>row 显示在一行，从左开始（默认）row-reverse 显示在一行 从右开始 最前面的子元素在最右边column 显示在一列 从上开始（与传统文档流中的布局一致）column-reverse 显示在一列 从底下开始</code></pre><p>3.flex-wrap（当浏览器窗口缩小到一定程度时）会不会换行</p><pre><code>nowrap 默认 不自动换行，不管缩小到多大，依然是原来的分栏，不会有子元素换行wrap 自动换行(最好设置子元素最小宽度配合使用) 当缩小到子元素的最小宽度时，放不下则后面的元素就会换行显示，默认是从后面的元素开始换行，最后面的元素在最下面wrap-reverse 自动换行 但是最前面的子元素会先换行，则最后面的子元素反而在最上面</code></pre><p>4.连写属性：</p><pre><code>flex-flow:flex-diretion flex-wrap;flex-flow:row wrap;</code></pre><p>5.align-items 垂直对齐方式</p><pre><code>stretch 拉伸使整体对齐 默认flex-start 上对齐flex-end 下对齐center 垂直居中对齐 根据内容的高度来进行垂直居中</code></pre><p>6.justify-content 水平方向对齐</p><pre><code>flex-start 在开始位置对齐 默认是从左开始 左对齐flex-end 从结束位置对齐 默认是从右开始 右对齐。但是与右浮动不一样，它是整体的右对齐，盒子的位置不改变center 居中 所有子元素整体居中对齐space-between 子元素之间有空白space-around 子元素周围有空白 左跟右</code></pre></li><li>子元素(项目)<br>flex:数字 像素;<br>第一个属性值是指这个子元素所占得父元素总比例的比例 1 1 2<br>第二个属性值是最小宽度，用来设置这个子元素的最小的宽度，即指浏览器缩小到这个最小宽度时就不会再缩小了</li></ul></li></ul></li></ol><h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><ol><li><p>过渡 transition(需要人为触发的)</p><p> transition-property 控制哪个属性<br> transition-duration 执行时长<br> transition-delay 延迟时间<br> transition-timing-function 元素运动速度函数<br> 通常与hover,active一起使用触发</p><p> div{<br>   property;<br> }<br> div:hover{<br>   改变的property以及改变后属性值;<br>   transition-property:;<br>   transition-duration:;<br>   …<br> }</p></li></ol><ol start="2"><li><p>动画 animation（不需要人为的触发，自己就能运动）<br>速写：animation:name duration timing-function delay count direction;</p><p>animation-name:绑定一个动画名字</p><p>div{<br>   animation-name:动画名字;<br>   animation-duration<br>   animation-timing-function<br>   animation-delay<br>   animation-iteration-count<br>   animation-direction<br>}</p><p> 定义一个动画：</p><ol><li>@keyframes 动画名字{<pre><code>//动画帧from{    //开始帧的表现形式（css声明块）}to{    //结束帧}</code></pre> }</li><li><p>@keyframes animation-name{</p><pre><code>//动画帧0%{    //开始帧的表现形式（css声明块）}50%{    //中间一帧}...100%{    //结束帧}</code></pre><p> }</p><p>animation-duration:动画持续时间（s/ms）</p><p>animation-timing-function:动画执行的速度函数<br>ease:默认 先慢后快再慢<br>ease-in 先慢后快<br>ease-out 先快后慢<br>ease-in-out 先慢后快再慢<br>linear 线性 匀速</p><p>animation-delay 动画延迟执行时间<br>ms/s 默认立即执行<br>animation-iteration-count 动画执行次数<br>n<br>infinite 无限次</p><p>animation-direction 动画执行方向<br>normal 从第一帧执行到最后一帧<br>reverse 从最后一帧执行到第一帧<br>alternate 轮流执行 </p><pre><code>奇数次从第一帧执行到最后一帧偶数次从最后一帧执行到第一帧</code></pre><p>alternate-reverse 轮流执行</p><pre><code>奇数次从最后一帧执行到第一帧偶数次从第一帧执行到最后一帧</code></pre><p>animaton-play-state 播放状态<br>paused 暂停状态<br>running 播放  默认<br>animation-fill-mode 填充状态<br>none 默认状态 等待时间是最初设置的状态<br>forwards 在结束的时候是显示最后一帧<br>backwards 在延迟等待时间段用第一帧动画填充</p></li></ol></li><li><p>变形 transform<br>transform的属性<br>   translate(x,y) 移动<br>   scale(x,y) 放大或者缩小</p><pre><code>取值大于1的放大，属于0-1的缩小</code></pre><p>   rotate(deg) 旋转</p><pre><code>rotate()  z轴 旋转盘rotateX() x轴 单杠运动rotateY() y轴 钢管舞rotateZ() z轴 是面向自己的那个轴向（顺时针或逆时针）旋转连写：transform:rotateX() rotateY() rotateZ();</code></pre><p>   skew(deg) 倾斜</p><pre><code>skewX(deg) skewY(deg)</code></pre></li><li><p>布尔值的五种表示方法：<br>disabled<br>disabled=”disabled”<br>disabled=”true”<br>disabled=”1”<br>disabled=””</p></li><li><p>perspective:视角</p><ul><li>定义咱们用户的眼睛距离元素的位置。假设视角为1000px;当transform:translateZ(1000px);。我们就看不见了</li><li>给每个子元素的视角transform:perspective(500px);</li><li>舞台视角：父元素加视角perspective:500px;，子元素变成3d效果transform-style:preserve-3d;</li></ul></li></ol><h2 id="CSS兼容"><a href="#CSS兼容" class="headerlink" title="CSS兼容"></a>CSS兼容</h2><ol><li>媒体查询</li><li><p>媒体类型<br> all 所有设备<br> print 打印<br> screen 屏幕<br> speech 声音合成器</p></li><li><p>媒体特性<br> color<br> device-width/device-height 设备的宽高<br> width/height 窗口的宽高<br> min-<br> max-     (eg:min-width :992px;  max-width:1200px;)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">尺寸划分</span><br><span class="line">    超小屏 &lt;768px</span><br><span class="line">    小屏 768-992px </span><br><span class="line">    中屏 992-1200px</span><br><span class="line">    大屏 &gt;1200px</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符<br> and并且<br> not除了<br> only 只有</p></li><li><p>媒体查询模块</p></li><li>媒体查询类型</li><li><p>css样式</p><ul><li><p>超小屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:768px)&#123;</span><br><span class="line">    div&#123;</span><br><span class="line">        background:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:768px) and (max-width:992px)&#123;</span><br><span class="line">    div&#123;</span><br><span class="line">        background:red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:992px) and (max-width:1200px)&#123;</span><br><span class="line">    div&#123;</span><br><span class="line">        background:red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>大屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:1200px)&#123;</span><br><span class="line">    div&#123;</span><br><span class="line">        background:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>浏览器兼容</p><ul><li>img图片底部有空隙 去除img的间距可以设置图片为display:block;或者将父元素的font-size:0;</li><li>a标签里嵌套一个img，在IE浏览器中会出现一个蓝色边框，去掉边框 a img{border:none;}</li><li>IE6以下浮动的块级元素又有横向margin，就会出现双倍边距的问题。 用display:inline-block;</li></ul></li><li><p>浏览器的兼容性<br> -moz-  火狐firefox<br> -o-  opera 欧朋<br> -ms- IE浏览器（IE9）<br> -webkit-  safari chrome</p></li></ol>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS基础 </tag>
            
            <tag> CSS笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>让div占满整个屏幕的方法</title>
      <link href="/2018/09/25/div%E5%8D%A0%E5%B1%8F/"/>
      <url>/2018/09/25/div%E5%8D%A0%E5%B1%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>div占满整个屏幕</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a><br>在开发过程中我们经常碰到页面占满整个浏览器屏幕或者背景图片填满整个屏幕的需求，它实际有两种实现方式。</p><h2 id="设置html-body的宽高"><a href="#设置html-body的宽高" class="headerlink" title="设置html,body的宽高"></a>设置html,body的宽高</h2><p>使用百分比设置html,body的宽高，html和body本身没有高度，它们的高度由子元素撑起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">html,body&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置定位"><a href="#设置定位" class="headerlink" title="设置定位"></a>设置定位</h2><p>介绍：css中定位元素position有五种属性：<br>    static:默认值，没有定位<br>　　absolute:绝对定位，相对于父级元素进行定位<br>　　relative:相对定位<br>　　fixed:固定定位,相对于浏览器窗口进行定位<br>　　inherit:从父元素继承定位信息　　</p><p>使用absolute/fixed可以实现窗口自适应：</p><p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;         </span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">    width:100%;            </span><br><span class="line">    height: 100%;            </span><br><span class="line">    position: absolute/fixed;</span><br><span class="line">    top:0;left:0;(可写可不写，默认)</span><br><span class="line">    background: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0    </span><br><span class="line">&#125;</span><br><span class="line">div&#123;         </span><br><span class="line">    position: absolute/fixed;</span><br><span class="line">    top:0;</span><br><span class="line">    left:0;</span><br><span class="line">    right:0;</span><br><span class="line">    bottom:0;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">    background: yellow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="给网站设置背景图"><a href="#给网站设置背景图" class="headerlink" title="给网站设置背景图"></a>给网站设置背景图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#login &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    overflow: hidden;</span><br><span class="line"></span><br><span class="line">    background-color: rgba(38, 50, 56, .6);</span><br><span class="line">    background-image: url(~@/assets/img/login_bg.png);</span><br><span class="line">    background-size: 100% 100%;</span><br><span class="line">    background-position: center center;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Hexo + Github Pages搭建个人博客</title>
      <link href="/2018/09/17/hexo+github/"/>
      <url>/2018/09/17/hexo+github/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从零开始搭建博客</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a></p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>Github对于学计算机的应该不陌生，Github Pages是用户编写的、托管在github上的静态网页。在github上新建仓库名为<strong>用户名.github.io</strong>的仓库，<!-- more -->进行一系列的配置，我们就可以通过<strong>用户名.github.io</strong>访问你的博客。而Hexo是一个快速，简单和强大的博客框架，它支持Markdown等多种方式编写博客。(博客搭建全程使用的是windows系统)<br>如果是小白白的话，可以花时间了解一下下面几点：</p><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git</a></li><li><a href="https://github.com/" target="_blank" rel="noopener">Github</a></li><li><a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a></li><li><a href="http://www.markdown.cn/" target="_blank" rel="noopener">Markdown</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>  要想使用hexo，系统中必须支持Nodejs和Git使用。</p><ol><li><p><strong>Node</strong>的安装：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安装教程</a></p><p>安装完成之后，打开命令行工具:快捷键win+d,再输入cmd<br>在命令行输入下列命令检测是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p><strong>Git</strong>安装以及配置</p><ul><li>安装Git：<a href="http://git-scm.com/download/" target="_blank" rel="noopener">下载地址(官方)</a></li><li>配置Git：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">相关地址</a><br>安装完Git应该做的第一件事情就是设置用户名称和邮件地址。每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      git config --global user.name &quot;username&quot; x</span><br><span class="line">      git config --global user.email &quot;username@example.com&quot; </span><br><span class="line">      (注：上面的username表示你的用户名;username@example.com表示你的邮箱)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Github</strong>和Git<br>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。那么为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法：</p><p>(1) 检测电脑上是否有SSH keys。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    cd ~/.ssh 或 cd .ssh (当前路径在c盘)</span><br><span class="line"></span><br><span class="line">    如果提示：No such file or directory 说明你是第一次使用git。</span><br></pre></td></tr></table></figure><p>(2) 如果没有SSH key，则生成新的SSH key。如果有则直接进入第三步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    输入命令： ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br><span class="line"></span><br><span class="line">    出现结果：</span><br><span class="line">    Generating public/private rsa key pair.</span><br><span class="line">    Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br><span class="line"></span><br><span class="line">Enter后会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话则表示你提交项目时则不用输入密码。</span><br></pre></td></tr></table></figure><p>(3) 添加SSH Key到GitHub。<br>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.打开本地C:\Users\Administrator\.ssh\id_rsa.pub文件。(本地密匙文件)</span><br><span class="line"></span><br><span class="line">2.登陆你的github账户,点击右上角的 Account Settings—-&gt;SSH Public keys —-&gt; add another public keys</span><br><span class="line"></span><br><span class="line">3.把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了</span><br></pre></td></tr></table></figure></li><li><p><strong>Hexo</strong>的安装和使用：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官方文档</a></p><ul><li><p>Hexo的安装：在安装之前，必须检查电脑中是否已经安装下列应用程序：Node Git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>使用Hexo建站<br>安装完Hexo后，在你喜欢的文件夹内（例如D：\Hexo）或者新建文件夹内，点击鼠标右键选择Git bash，输入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>上面的命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>两步之后我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span><br><span class="line">hexo server  启动本地web服务，用于博客的预览</span><br></pre></td></tr></table></figure><p>当然这个博客目前只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p></li></ul></li></ol><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>在上面我们已经成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p><ul><li>在Github创建仓库,仓库名为username.github.io (username是你的账户名)</li><li><p>在本地博客源文件夹中配置仓库地址：</p><p>源文件夹中有一个站点配置文件_config.yml。找到deploy并编辑它为下列所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git  对应仓库的SSH地址（可以在GitHub对应的仓库中复制）  </span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line">注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下(表示你的主题配置文件)</span><br></pre></td></tr></table></figure><p>为了能够使Hexo部署到GitHub上，需要安装一个插件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后，执行下列指令即可完成部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy 部署</span><br></pre></td></tr></table></figure></li></ul><h2 id="Hexo基本使用"><a href="#Hexo基本使用" class="headerlink" title="Hexo基本使用"></a>Hexo基本使用</h2><h3 id="启用Next主题"><a href="#启用Next主题" class="headerlink" title="启用Next主题"></a>启用Next主题</h3><p>安装Next主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>启用主题，找到站点配置文件中的theme字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><p>启动项目,打开localhost:4000/看到如下图所示表示启用成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p><img src="/images/other/hexo/115.png" alt="目录"></p><h3 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h3><p>  常用命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面(比如标签页，分类页等等，默认情况下主页面是存在的，在sourse/_posts下，新建页面则会在sourse文件夹下生成新的文件夹)</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure></p><p>  常用复合命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g #生成加部署</span><br><span class="line">hexo s -g #预览加部署</span><br></pre></td></tr></table></figure></p><p>具体的使用配置请参考Next使用文档：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a><br>想要打造自己的个性化博客网站请参考本站：<a href="https://chenjing123456.github.io/2018/10/15/personal/" target="_blank" rel="noopener">Hexo + next主题的个性化配置</a></p><h1 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h1><p>本文的主题个性化配置是基于Next主题进行的，项目目录下主要有两个配置文件。<br>站点配置文件：项目根目录(例如blog)的_config.yml   主题配置文件:blog/themes/next/_config.yml</p><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p>实现效果如下：<br><img src="/images/other/hexo/1.png" alt="目录"><br>具体实现方法：<br>1.切换到项目目录,安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed;</span><br></pre></td></tr></table></figure></p><p>2.找到站点配置文件 进行如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure></p><p>3.找到主题配置文件 进行如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></p><p>4.配置完之后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><p>重新生成一次，在./public 文件夹中可以看到 atom.xml 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p><h2 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h2><p>实现效果如下图：<br><img src="/images/other/hexo/zhiding.png" alt=""></p><p>1.安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></p><p>2.在需要置顶的博文的Front-matter中加上top: true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: Hexo + next主题的个性化配置 </span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>3.要想让博文加上置顶标志，则需要进入theme/next/layout/＿macro/post.swig文件，找到 class=”post-meta”的div.添加如下字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125; </span><br><span class="line">&lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;&lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="桃心点击效果"><a href="#桃心点击效果" class="headerlink" title="桃心点击效果"></a>桃心点击效果</h2><p>实现效果如下：点击任何一个地方都会出现桃心<br><img src="/images/other/hexo/2.gif" alt="目录"><br>具体实现方法：<br>1.在网址栏输入如下地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</span><br></pre></td></tr></table></figure></p><p>2.复制里面的代码新建一个love.js文件放到路径/themes/next/source/js/src下。<br>3.然后打开\themes\next\layout\ _layout.swig文件，在最后一行插入如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>实现效果如下：<br><img src="/images/other/hexo/g20.gif" alt="目录"><br>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：<br><img src="/images/other/hexo/18.png" alt="目录"><br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">            if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">                alert(&apos;密码错误！&apos;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后在文章上写成类似这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo + Github Pages搭建个人博客</span><br><span class="line">comments: true #是否可评论</span><br><span class="line">copyright: true</span><br><span class="line">password: 填写你设置的密码</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">categories:</span><br><span class="line">  - 学习杂烩</span><br><span class="line">  - Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="侧边栏友情链接"><a href="#侧边栏友情链接" class="headerlink" title="侧边栏友情链接"></a>侧边栏友情链接</h2><p>实现效果如下：<br><img src="/images/other/hexo/114.png" alt="目录"><br>具体实现方法：<br>打开主题配置文件找到links ,修改成这样就行了(links里面写你想要的链接):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">links_title: 推荐阅读</span><br><span class="line"># links_layout: inline</span><br><span class="line">links_layout: block</span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line">  张鑫旭: http://www.zhangxinxu.com/</span><br><span class="line">  阮一峰: http://www.ruanyifeng.com/blog/</span><br><span class="line">  大前端: http://www.daqianduan.com/</span><br><span class="line">  w3cplus: http://www.w3cplus.com/</span><br></pre></td></tr></table></figure></p><h2 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h2><p>实现效果如下：<br><img src="/images/other/hexo/10.png" alt="目录"><br>具体实现方法：<br>1.切换到根目录下，然后运行如下代码，安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p><p>2.在/themes/next/layout/_partials/footer.swig文件尾部加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="修改作者头像并旋转"><a href="#修改作者头像并旋转" class="headerlink" title="修改作者头像并旋转"></a>修改作者头像并旋转</h2><p>实现效果如下：<br><img src="/images/other/hexo/9.gif" alt="目录"><br>具体实现方法：<br>打开\themes\next\source\css\ _common\components\sidebar\sidebar-author.styl，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在网站底部加上访问量"><a href="#在网站底部加上访问量" class="headerlink" title="在网站底部加上访问量"></a>在网站底部加上访问量</h2><p>实现效果如下：<br><img src="/images/other/hexo/11.png" alt="目录"><br>具体实现方法：<br>1.打开\themes\next\layout\ _partials\footer.swig文件,在第一行加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原址：&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">更换域名后：&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>2.然后在你想要放的位置放上如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;&amp;nbsp;&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">或者是：</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  &lt;i class=&quot;fa fa-&#123;&#123; theme.footer.icon &#125;&#125;&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p>在这里有两中不同计算方式的统计代码：<br>pv的方式，如上面的第一个span，表示单个用户连续点击n篇文章，记录n次访问量<br>uv的方式，如上面的第二个span，表示单个用户连续点击n篇文章，只记录1次访客数</p><h2 id="添加网易云跟帖-来比力"><a href="#添加网易云跟帖-来比力" class="headerlink" title="添加网易云跟帖(来比力)"></a>添加网易云跟帖(来比力)</h2><p>实现效果如下：<br><img src="/images/other/hexo/15.png" alt="目录"><br>具体实现方法：<br>1.注册来比力账号：来必力官网地址 <a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a><br>2.安装:点击上方的安装，选择免费的city版本。<br><img src="/images/other/hexo/16.png" alt="目录"><br>3.并点击现在安装，出现如下界面。<br><img src="/images/other/hexo/17.png" alt="目录"><br>复制其中的uid字段。<br>4.打开主题目录下的blog/themes/next/_config.yml配置文件，定位到livere_uid字段，粘贴上刚刚复制的UID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="line">livere_uid: your uid</span><br></pre></td></tr></table></figure></p><h2 id="DaoVoice在线联系功能"><a href="#DaoVoice在线联系功能" class="headerlink" title="DaoVoice在线联系功能"></a>DaoVoice在线联系功能</h2><p>实现效果如下：<br><img src="/images/other/hexo/19.png" alt="目录"><br>具体实现方法：<br>1.首先在 <a href="http://dashboard.daovoice.io" target="_blank" rel="noopener">daovoice</a> 注册账号,邀请码是0f81ff2f，注册完成后会得到一个 app_id :<br><img src="/images/other/hexo/20.png" alt="目录"><br>2.记下这个 app_id的值，然后打开/themes/next/layout/_partials/head.swig,写下如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>添加成功后代码如下图所示：<br><img src="/images/other/hexo/21.png" alt="目录"><br>3.打开主题配置文件，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure></p><p>重新 hexo g ，hexo s 就能看到效果了。</p><p>4.安装成功后可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式<br><img src="/images/other/hexo/22.png" alt="目录"></p><h2 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h2><p>实现效果如下：<br><img src="/images/other/hexo/111.png" alt="目录"><br>具体实现方法：<br>打开\themes\next\source\css\ _custom\custom.styl,向里面加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p>实现效果如下：<br><img src="/images/other/hexo/4.gif" alt="目录"><br>具体实现方法：<br>修改文件 themes\next\source\css\ _common\components\post\post.styl，在末尾添加如下css样式，：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选中等a标签样式由你自己选择</span><br><span class="line">.post-body a&#123;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #ccc;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: rgb(135,218,255);</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid rgb(135,218,255);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h2><p>实现效果如下：<br><img src="/images/other/hexo/13.png" alt="目录"><br>具体实现方法：<br>1.在目录 next/layout/_macro/下添加 my-copyright.swig：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&quot;&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!--&lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;--&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;本文由 SanrChen 原创，采用&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;保留署名-非商业性使用-禁止演绎 4.0-国际许可协议&lt;/a&gt; 转载请保留以上声明信息。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class="line">    clipboard.on(&apos;success&apos;, $(function()&#123;</span><br><span class="line">      $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &apos;复制成功&apos;,   </span><br><span class="line">          html: false,</span><br><span class="line">          timer: 500,   </span><br><span class="line">          showConfirmButton: false</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>2.在目录next/source/css/_common/components/post/下添加my-post-copyright.styl：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto;</span><br><span class="line">  padding: 0.7em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #67A1BB;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.修改next/layout/_macro/post.swig，在如下代码所示的后面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if (theme.alipay or theme.wechatpay or theme.bitcoin) and not is_index %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;% include &apos;reward.swig&apos; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>添加这一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &apos;my-copyright.swig&apos; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>添加成功后代码如下图所示：<br><img src="/images/other/hexo/14.png" alt="目录"><br>4.修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure></p><p>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo + next主题的个性化配置 </span><br><span class="line">copyright: true</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">categories:</span><br><span class="line">  - 学习杂烩</span><br><span class="line">  - Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>另外，如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">copyright:</span><br><span class="line">---</span><br><span class="line">这样每次hexo new &quot;你的内容&quot;之后，生成的md文件会自动把copyright:加到里面去</span><br></pre></td></tr></table></figure></p><p>另外还有一种方式：<br>直接在主题配置页找到字段post_copyright<br>  修改字段enable: true即可</p><h2 id="侧边栏社交链接和图标设置"><a href="#侧边栏社交链接和图标设置" class="headerlink" title="侧边栏社交链接和图标设置"></a>侧边栏社交链接和图标设置</h2><p>更改主题配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> social:</span><br><span class="line">    GitHub: https://github.com/your-user-name || github</span><br><span class="line">    简书: https://www.jianshu.com/your-user-name || book</span><br><span class="line">    掘金: https://juejin.im/your-user-name || drupal</span><br><span class="line"> social_icons:</span><br><span class="line">    enable: true</span><br><span class="line">    icons_only: false</span><br><span class="line">    transition: false</span><br><span class="line">把图标的名字添加到social里面，用 || 隔开，就可以正常使用了</span><br></pre></td></tr></table></figure></p><h2 id="修改文章底部的标签的-符号"><a href="#修改文章底部的标签的-符号" class="headerlink" title="修改文章底部的标签的#符号"></a>修改文章底部的标签的#符号</h2><p>实现效果如下：<br><img src="/images/other/hexo/5.png" alt="目录"><br>具体实现方法：<br>修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p><p>添加成功后代码如下图所示：<br><img src="/images/other/hexo/6.png" alt="目录"></p><h2 id="打赏以及修改打赏字体不闪动"><a href="#打赏以及修改打赏字体不闪动" class="headerlink" title="打赏以及修改打赏字体不闪动"></a>打赏以及修改打赏字体不闪动</h2><p>实现效果如下：<br><img src="/images/other/hexo/113.png" alt="目录"><br>具体实现方法：<br>1.找到主题配置文件，在其最后添加打赏的配置信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: 图片链接或图片相对路径</span><br><span class="line">alipay: 图片链接或图片相对路径</span><br></pre></td></tr></table></figure></p><p>2.修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中wechat:hover和alipay:hover，如下：<br><img src="/images/other/hexo/112.png" alt="目录"></p><h2 id="添加文章阅读时长，字数统计"><a href="#添加文章阅读时长，字数统计" class="headerlink" title="添加文章阅读时长，字数统计"></a>添加文章阅读时长，字数统计</h2><p>实现效果如下：<br><img src="/images/other/hexo/12.png" alt="目录"><br>具体实现方法：<br>1.在根目录下安装 hexo-wordcount,运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p><p>2.在主题配置文件中进行如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure></p><h2 id="在每篇文章末尾统一添加“结束”标记"><a href="#在每篇文章末尾统一添加“结束”标记" class="headerlink" title="在每篇文章末尾统一添加“结束”标记"></a>在每篇文章末尾统一添加“结束”标记</h2><p>实现效果如下：<br><img src="/images/other/hexo/8.png" alt="目录"><br>具体实现方法：<br>1.在路径 \themes\next\layout\ _macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #666;font-size:14px;&quot;&gt;-------------进度条到了&amp;nbsp;&lt;i class=&quot;fa fa-paw&quot; style=&quot;color:rgb(90,85,85)&quot;&gt;&lt;/i&gt;&amp;nbsp;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>2.打开\themes\next\layout\ _macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>添加成功后代码如下图所示：<br><img src="/images/other/hexo/7.png" alt="目录"><br>3.打开主题配置文件（_config.yml),在末尾添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></p><p>完成之后，在每篇文章之后都会添加如上效果图的样子。</p><h2 id="添加站点地图sitemap（百度和谷歌搜索）"><a href="#添加站点地图sitemap（百度和谷歌搜索）" class="headerlink" title="添加站点地图sitemap（百度和谷歌搜索）"></a>添加站点地图sitemap（百度和谷歌搜索）</h2><h2 id="添加首页踢足球动画"><a href="#添加首页踢足球动画" class="headerlink" title="添加首页踢足球动画"></a>添加首页踢足球动画</h2><p>源代码链接<a href="https://github.com/idhyt/hexo-theme-next" target="_blank" rel="noopener">https://github.com/idhyt/hexo-theme-next</a><br>1.主配置文件里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Some suprise plugs</span><br><span class="line">suprise:</span><br><span class="line">  ball: true # 踢皮球动画开关</span><br></pre></td></tr></table></figure></p><p>2.找到themes/next/layout/_layout.swig添加如下到你想给的首页位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if (theme.suprise.ball and is_home()) %&#125;</span><br><span class="line">    &#123;% include &apos;_partials/suprise/ball.swig&apos; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>3.找到themes/next/layout/_partials/suprise/ball.swig，添加进自己的博客</p><h1 id="可视化管理博客（hexo-admin）"><a href="#可视化管理博客（hexo-admin）" class="headerlink" title="可视化管理博客（hexo-admin）"></a>可视化管理博客（hexo-admin）</h1><p>出于管理博客的便利，可以安装hexo-admin插件来进行后台管理博客，可以直接在线编辑博文。他的作用就是在本地运行hexo使用hexo-admin编写文章。</p><p>1.安装使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin 安装</span><br><span class="line">hexo server -d 启动服务器</span><br><span class="line">打开 localhost:4000/admin/ 就可在线编辑博文</span><br></pre></td></tr></table></figure></p><p>2.密码保护 登录hexo-admin</p><p>在 <a href="http://localhost:4000/admin/" target="_blank" rel="noopener">http://localhost:4000/admin/</a> 打开setting选项，点击Setup authentification here输入用户名，密码，密钥，下面会自动生成配置文件，复制加在hexo根目录下的_config.yml中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: myfavoritename</span><br><span class="line">  password_hash: be121740bf988b2225a313fa1f107ca1</span><br><span class="line">  secret: a secret something</span><br><span class="line">  </span><br><span class="line">  提示：密码栏最好是字符串，防止报错，亲试。</span><br></pre></td></tr></table></figure></p><p>3.发布文章 也可在deploy配置</p><p>在博客根目录下新建个目录admin_script，然后在目录中新建一个脚本hexo-g.sh，在脚本写上你的发布命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>然后在_config.yml中的admin下添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: myfavoritename</span><br><span class="line">  password_hash: be121740bf988b2225a313fa1f107ca1</span><br><span class="line">  secret: a secret something</span><br><span class="line">  deployCommand: ./admin_script/hexo-d.sh</span><br></pre></td></tr></table></figure></p><p>最后就是在后台的deploy点发布就行了，不过我一般是没有原因的喜欢敲命令发布。</p><p>4.Hexo Admin插入图片问题<br>由于hexo admin复制粘贴图片的时候会多两个斜杠，最简单的方式去掉就行，如果嫌麻烦可以改源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](//images/post.png/) 粘贴结果</span><br><span class="line"></span><br><span class="line">![](/images/post.png) 去除斜杠图片即可出现</span><br></pre></td></tr></table></figure><h1 id="GitHub-Pages域名绑定"><a href="#GitHub-Pages域名绑定" class="headerlink" title="GitHub Pages域名绑定"></a>GitHub Pages域名绑定</h1><p>1.注册域名，域名备案</p><p>2.域名解析<br>一张图说明，如果不懂可以去看一下阿里云域名解析的方式或者联系我。</p><p><img src="/images/other/hexo/hexo-git.png" alt="域名解析"></p><p>3.到github pages项目的设置setting中配置刚刚解析后的域名</p><p><img src="/images/other/hexo/hexo-git2.png" alt="域名解析"></p><p>接下来等待十分钟，你就可以通过配置好的域名访问你的博客了。</p><h1 id="gitee-pages部署"><a href="#gitee-pages部署" class="headerlink" title="gitee pages部署"></a>gitee pages部署</h1><p>已经有GitHub Pages 项目如何部署到码云的 Pages</p><p>1.从github搬到gitee详细文档: 具体看第三条方案，<a href="http://git.mydoc.io/?t=154714" target="_blank" rel="noopener">gitee pages配置文档</a></p><p>2.在_config.yml中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:                         ##部署git pages的配置</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    github: git@github.com:chenjing123456/chenjing123456.github.io.git</span><br><span class="line">    gitee: git@gitee.com:Chensanr/Chensanr.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>3.特别注意：</p><ul><li><p>gitee不会自动部署，所以在更新博文的时候（hexo d）后要自己去gitee项目的管理中更新实现部署。在服务中的gitee pages中有更新按钮。</p></li><li><p>自定义域名需要加钱,就没有重新解析域名。现在有两套，gitee加载比较快，github比较慢。都可以访问。<br>  gitee: <a href="https://chensanr.gitee.io">https://chensanr.gitee.io</a></p></li></ul><h1 id="参考的文章"><a href="#参考的文章" class="headerlink" title="参考的文章"></a>参考的文章</h1><p>基础的主题配置：<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a><br>来比力评论：<a href="https://blog.csdn.net/qwerty200696/article/details/78836421" target="_blank" rel="noopener">https://blog.csdn.net/qwerty200696/article/details/78836421</a><br>daovoice在线联系：<a href="http://www.shenzekun.cn/hexo的next主题个性化配置教程.html" target="_blank" rel="noopener">http://www.shenzekun.cn/hexo的next主题个性化配置教程.html</a></p>]]></content>
      
      <categories>
          
          <category> Other </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2018/09/01/dataStructure/"/>
      <url>/2018/09/01/dataStructure/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>数据结构与算法学习</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><p>书籍:<a href="http://reader.epubee.com/books/mobile/d2/d25b836dd3c5036939dc4e3cfab24dbe/text00000.html#nav_point_15" target="_blank" rel="noopener">数据结构和算法</a></p>]]></content>
      
      <categories>
          
          <category> Other </category>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javaScript算法</title>
      <link href="/2018/09/01/js%E7%AE%97%E6%B3%95/"/>
      <url>/2018/09/01/js%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>javaScript算法</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h2><h3 id="判断一个单词是否是回文？"><a href="#判断一个单词是否是回文？" class="headerlink" title="判断一个单词是否是回文？"></a>判断一个单词是否是回文？</h3><p>回文是指把相同的词汇或句子，在下文中调换位置或颠倒过来，产生首尾回环的情趣，叫做回文，也叫回环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function palindrom(str) &#123;  </span><br><span class="line">  return str == str.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不借助临时变量，进行两个整数的交换"><a href="#不借助临时变量，进行两个整数的交换" class="headerlink" title="不借助临时变量，进行两个整数的交换"></a>不借助临时变量，进行两个整数的交换</h3><p>方法1，算术运算（加减）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = x + y;</span><br><span class="line">y = x - y;</span><br><span class="line">x = x - y;</span><br></pre></td></tr></table></figure></p><p>方法2，ES6中数组解构赋值语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[y,x] = [x,y]</span><br></pre></td></tr></table></figure></p><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><h4 id="数组的splice方法-es5"><a href="#数组的splice方法-es5" class="headerlink" title="数组的splice方法 (es5)"></a>数组的splice方法 (es5)</h4><p>  /<em>循环，先排序，把前后元素对比，相同则通过splice剔除。</em>/<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var removeDuplicates = function(nums)&#123;</span><br><span class="line">  nums = nums.sort(); // 排序，使相同元素相邻</span><br><span class="line">  function loop(nums)&#123;</span><br><span class="line">    for(var i =0;i&lt;nums.length;i++)&#123;</span><br><span class="line">      if(nums[i]==nums[i+1])&#123;</span><br><span class="line">        nums = nums.splice(i,1);</span><br><span class="line">        loop(nums);</span><br><span class="line">        return ;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  loop(nums)</span><br><span class="line">  return nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  <strong>算法的时间复杂度</strong>：算法运行时间需求量的定义描述。操作数量的估算可以作为时间复杂度的估算（即运行的次数）。<br>  该方法的循环次数是n*n次，从时间复杂度来看不属于性能好的算法</p><h4 id="数组的filter方法-es5"><a href="#数组的filter方法-es5" class="headerlink" title="数组的filter方法 (es5)"></a>数组的filter方法 (es5)</h4><p>  /<em>定义一个对象用来存储数据，判断对象里是否存在数组项</em>/<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let unique = (arr) =&gt;&#123;</span><br><span class="line">  let cache = &#123;&#125;;</span><br><span class="line">  return arr.filter((item)=&gt;&#123;</span><br><span class="line">    return cache[item] ? false : (cache[item] = true)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Set构造函数-es6"><a href="#Set构造函数-es6" class="headerlink" title="Set构造函数 (es6)"></a>Set构造函数 (es6)</h4><ol><li><p>…语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...new Set([1,2,3,2,1])]</span><br></pre></td></tr></table></figure></li><li><p>Array.from()语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.from(new Set([1,2,3,2,1,4]))</span><br></pre></td></tr></table></figure></li><li><p>Set 的add()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var unique = function(nums)&#123;</span><br><span class="line">  var let = new Set();</span><br><span class="line">  for(var i = 0;i&lt;nums.length;i++)&#123;</span><br><span class="line">    set.add(nums[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  return [...set];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="生成指定长度随机字符串"><a href="#生成指定长度随机字符串" class="headerlink" title="生成指定长度随机字符串"></a>生成指定长度随机字符串</h3><p>使用Math.random()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function createRandomString(n)&#123;</span><br><span class="line">  var str = &apos;abcdefghijklmnopqrstuvwxyz0123456789&apos;;</span><br><span class="line">  var tmp = &apos;&apos;;</span><br><span class="line">  for(var i=0; i&lt;n; i++) &#123;</span><br><span class="line">    tmp += str.charAt(Math.round(Math.random()*str.length));</span><br><span class="line">  &#125;</span><br><span class="line">  return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="统计字符串中出现最多的字母"><a href="#统计字符串中出现最多的字母" class="headerlink" title="统计字符串中出现最多的字母"></a>统计字符串中出现最多的字母</h3><p>先遍历字符串中所有字母，统计字母以及对应显示的次数，最后是进行比较获取次数最大的字母。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取字符串中出现次数最多的字母</span><br><span class="line"> * @param &#123;String&#125; str</span><br><span class="line"> */</span><br><span class="line">function getMaxChar(str) &#123;</span><br><span class="line">    if (typeof str !== &apos;string&apos;) return // 判断参数是否为字符串</span><br><span class="line">    const obj = new Object() // 键为字母，值为次数</span><br><span class="line">    for (let i = 0; i &lt; str.length; i ++) &#123; // 遍历字符串每一个字母</span><br><span class="line">        let char = str.charAt(i) // 当前字母</span><br><span class="line">        obj[char] = obj[char] || 0 // 保证初始值为0</span><br><span class="line">        obj[char] ++ // 次数加1</span><br><span class="line">    &#125;</span><br><span class="line">    let maxChar // 存储字母</span><br><span class="line">    let maxNum = 0 // maxChar字母对应的次数</span><br><span class="line">    for(let key in obj) &#123; // 遍历obj</span><br><span class="line">        if (obj[key] &gt; maxNum) &#123;</span><br><span class="line">            maxChar = key // 比较后存储次数多的字母</span><br><span class="line">            maxNum = obj[key] // 以及它对应的次数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxChar // 返回结果</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let str = &apos;aabbbccdd&apos;</span><br><span class="line">getMaxChar(str))</span><br></pre></td></tr></table></figure></p><h3 id="数组中最大差值"><a href="#数组中最大差值" class="headerlink" title="数组中最大差值"></a>数组中最大差值</h3><p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getMaxProfit(arr)&#123;</span><br><span class="line">  var min = arr[0],</span><br><span class="line">      max = arr[0];</span><br><span class="line">  for(var i = 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">    if(arr[i] &lt; min) min = arr[i];</span><br><span class="line">    if(arr[i] &gt; max) max = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return max - min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getmaxprofit(arr)&#123;</span><br><span class="line">arr=arr.sort(function(a,b)&#123;</span><br><span class="line">    return a-b;</span><br><span class="line">  &#125;);</span><br><span class="line">var maxprofit=arr[len-1]-arr[0];</span><br><span class="line">return maxprofit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="阶乘-n-n-n-1"><a href="#阶乘-n-n-n-1" class="headerlink" title="阶乘 n! = n*(n-1)!"></a>阶乘 n! = n*(n-1)!</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function factorialize(num) &#123;</span><br><span class="line">  var result = 1;</span><br><span class="line">  if(num &lt; 0) return -1;</span><br><span class="line">  if(num == 0 || num == 1) return 1;</span><br><span class="line">  if(num &gt; 1) return num*factorialize(num-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成菲波那切数列"><a href="#生成菲波那切数列" class="headerlink" title="生成菲波那切数列"></a>生成菲波那切数列</h3><p>斐波那契数列：1、1、2、3、5、8、13、21、34、……<br>函数：使用公式f[n]=f[n-1]+f[n-2]，依次递归计算，递归结束条件是f[1]=1，f[2]=1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getfib(n)&#123;</span><br><span class="line">  if(n == 0) return 0;</span><br><span class="line">  if(n == 1) return 1;</span><br><span class="line">  if(n &gt; 1) return getfib(n-1) + getfib(n-2);</span><br><span class="line">&#125;</span><br><span class="line">function fibo(len)&#123;</span><br><span class="line">    var fibo = [];</span><br><span class="line">    for(var i = 0; i &lt; len; i++)&#123;</span><br><span class="line">      fibo.push(getfib(i));</span><br><span class="line">    &#125;</span><br><span class="line">    return fibo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>原理：数组里面的数据值会像气泡一样从数组的一端漂浮到另一端。假设正在将一组数字按照升序排列，那么较大的值会浮动到数组的右侧，而较小的值会浮动到数组的左侧。之所以会产生这种现象是因为算法会多次在数组中移动，比较相邻的数据，当左侧值大于右侧值时会将他们进行交换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(arr) &#123;  </span><br><span class="line">    for(var i = 0;i&lt;arr.length-1;i++) &#123;外层循环控制趟数</span><br><span class="line">        for(var j = 0;j&lt;arr.length-1-i;j++) &#123; 内层循环控制每趟需要交换的次数</span><br><span class="line">          if(arr[j]&gt;arr[j+1]) &#123;</span><br><span class="line">              let tem = arr[j];</span><br><span class="line">              arr[j] = arr[j+1];</span><br><span class="line">              arr[j+1] = tem;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">双层循环 n*n 效率慢</span><br></pre></td></tr></table></figure></p><h2 id="有多少小于当前数字的数字"><a href="#有多少小于当前数字的数字" class="headerlink" title="有多少小于当前数字的数字"></a>有多少小于当前数字的数字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * description 给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line"> //解题思路：</span><br><span class="line"> // 1.从小到大排序 - [1,2,3,4,5,6,7] 排序后的 index（index从0开始计算） 刚好可以表示为前面有几个； 3的index = 2，前面有两个；5的index = 4， 前面有四个；</span><br><span class="line"> // 2.循环原数组，将当前循环值 ‘cur’ 在 复制的数组中找 index，依次push进创建的空数组，返回数组得到最终答案；</span><br><span class="line"></span><br><span class="line">var smallerNumbersThanCurrent1 = function(nums) &#123;</span><br><span class="line">   </span><br><span class="line">    let copyNums = JSON.parse(JSON.stringify(nums));</span><br><span class="line">    copyNums.sort((a,b) =&gt; a-b);</span><br><span class="line"></span><br><span class="line">     return nums.reduce((pev,cur) =&gt; &#123;</span><br><span class="line">        const curIndex = copyNums.indexOf(cur);</span><br><span class="line">        if (curIndex !== -1) &#123;</span><br><span class="line">            pev.push(curIndex)</span><br><span class="line">        &#125;</span><br><span class="line">        return pev;</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">smallerNumbersThanCurrent([8,2,1,2,2,3])</span><br><span class="line">let arr1s = smallerNumbersThanCurrent1([8,2,1,2,2,3])</span><br></pre></td></tr></table></figure><h2 id="独一无二出现次数"><a href="#独一无二出现次数" class="headerlink" title="独一无二出现次数"></a>独一无二出现次数</h2><p>给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; arr</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var uniqueOccurrences = function(arr)&#123;</span><br><span class="line">  let mapObj = arr.reduce((pev,cur,index)=&gt;&#123;</span><br><span class="line">    pev[cur] ? pev[cur]++ : pev[cur] = 1</span><br><span class="line">    return pev</span><br><span class="line">  &#125;,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  let arrs = Object.values(mapObj)</span><br><span class="line">  return arrs.length === new Set(arrs).size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript（核心js） </tag>
            
            <tag> API标准库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML基础</title>
      <link href="/2018/08/27/html%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/27/html%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>HTML基础知识</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><ol><li>html(hypertext markup language)：超文本标记语言，“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。超文本标记语言的结构包括“头”部分（英语：Head）、和“主体”部分（英语：Body），其中“头”部提供关于网页的信息，“主体”部分提供网页的具体内容。</li><li>url:统一资源定位符（uniform resource locator）<ul><li>eg：<a href="http://www.baidu.com/index.html" target="_blank" rel="noopener">http://www.baidu.com/index.html</a>  网络协议：//域名或者主机名(IP地址)：端口号/资源</li><li>IP地址唯一标识一台主机</li></ul></li><li>html5是html的一个版本：标签必须小写和闭合</li><li><p>html元素：开始标签&lt;&gt; ，结束标签&lt; / &gt;。<br> 分类：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">块级元素    独占一行 可以设置宽高d</span><br><span class="line">行内元素    在一行显示</span><br><span class="line">空元素     &lt;img/&gt;</span><br><span class="line">替代元素   input</span><br><span class="line">(两种无意义的标签：span div)</span><br></pre></td></tr></table></figure></li><li><p>html 属性:<br> 语法：属性名= “属性值” 属性名= “属性值” ;<br> 多个属性用空格隔开 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table bgcolor=&quot;red&quot;&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure></li><li><p>html文件以.html或者.htm结尾</p></li><li>vscode快捷键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html:4t + tab键 快速生成html4.0传统版本文档</span><br><span class="line">html:4s + tab键 快速生成html4.0严格版本文档</span><br><span class="line">html:5 + tab键 快速生成html5 </span><br><span class="line">ctrl + enter 直接到下一行</span><br><span class="line">ctrl+shift+上下键 多行编辑</span><br></pre></td></tr></table></figure></li></ol><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><ol><li><p>表格 table</p><ul><li><p>table的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border </span><br><span class="line">cellspacing:单元格之间的间隙</span><br><span class="line">cellpadding:单元格内容与边框之间的间隙</span><br></pre></td></tr></table></figure></li><li><p>table内部元素：<br>caption:标题  valign 属性设置标题位置</p><p>colgroup:设置列的格式<br>  col:colgroup的子列表项 里面有span属性表示对几列进行设置</p><p>thead:表头<br>tbody:表体<br>tfoot:表尾<br>tr:行<br>th:标题单元格<br>td：单元格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性colspan:合并单元格(列)</span><br><span class="line">属性rowspan:合并行</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>h5新增<br>article 文章<br>aside 侧边栏<br>section 分区<br>nav 导航<br>header 头部<br>footer 脚部<br>address（行内元素） 地址<br>details和summary 详情和概要</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用来描述某个文档或文本的内容。summary用来给它设置标题</span><br><span class="line"></span><br><span class="line">当点击按钮时会出现内容，默认情况是不可见的。可用open属性改变默认为可见。</span><br></pre></td></tr></table></figure><p>fieldset和legend 将表单中相关元素进行分组，legend是给fieldset定义组名<br>figure和figcaption 图片分组</p></li><li><p>列表 ：ol ul dl   </p><ul><li>ol 有序列表：序号默认从1开始 start可设置开始的数字</li><li>ul 无序列表：默认圆点 </li><li>dl 自定义列表：dt 标题 dd 内容</li></ul></li><li><p>div</p></li></ol><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><ol><li><p>超链接 a<br> 属性：</p><ul><li>href 跳转的地址<br>  属性值：<pre><code>路径   绝对路径和相对路径锚点   #id名email  mailto:licy@qq.com空连接 javascript:void(0); </code></pre></li><li>target 打开链接页面的方式<br>  属性值：<pre><code>_self 默认，当前页面打开_blank 打开一个新页面显示_top _parent 父窗口打开</code></pre></li></ul></li><li><p>span：纯粹的行内元素</p></li><li><p>em:强调，斜体</p></li><li><p>strong:强调，加粗</p></li><li><p>b:加粗</p></li><li><p>i：斜体</p></li><li><p>ins:插入，样式为下划线</p></li><li><p>del:删除线，样式为中间线</p></li><li><p>u 删除线</p></li></ol><h1 id="H5新增元素"><a href="#H5新增元素" class="headerlink" title="H5新增元素"></a>H5新增元素</h1><h2 id="构建主体内容"><a href="#构建主体内容" class="headerlink" title="构建主体内容"></a>构建主体内容</h2><h3 id="article元素"><a href="#article元素" class="headerlink" title="article元素"></a>article元素</h3><p>article:常用于博客中的 一篇文章，论坛中的 一个帖子，或者浏览者的 一段评论等， 表示独立的内容区块，通常包含头部(header)和底部元素(footer)</p><h3 id="section元素"><a href="#section元素" class="headerlink" title="section元素"></a>section元素</h3><p>1.section:需要包含一个标题(hn)元素，一般不用包含头部和底部元素，通常为那些有标题的元素内容进行分段</p><p>2.section和article的区别</p><ul><li>article代表文档，页面或者应用程序中独立完整的可以被外部引用的内容，强调内容独立完整性。</li><li>section对页面上的内容进行分块处理，如对文章分段等，相邻的section应该是相关的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;article&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;潜行者的个人介绍&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;p&gt;潜行者2是一个中国人，是一个帅哥....dygfrUS日日女热死你葌UR好闺女UR给女方 UR个为还能出租或引入UR股女 &lt;/p&gt;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">        &lt;h2&gt;评论&lt;/h2&gt;</span><br><span class="line">        &lt;article&gt;</span><br><span class="line">            &lt;h3&gt;评论者：潜行者3&lt;/h3&gt;</span><br><span class="line">            &lt;p&gt;确实真的很帅&lt;/p&gt;</span><br><span class="line">        &lt;/article&gt;</span><br><span class="line">        &lt;article&gt;</span><br><span class="line">            &lt;h3&gt;评论者：潜行者4&lt;/h3&gt;</span><br><span class="line">            &lt;p&gt;今天吃药了吗&lt;/p&gt;</span><br><span class="line">        &lt;/article&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;footer&gt;江西潜水协会&lt;/footer&gt;</span><br><span class="line">&lt;/article&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="nav元素"><a href="#nav元素" class="headerlink" title="nav元素"></a>nav元素</h3><p>是一个可以用于页面导航的链接组，其中导航元素链接到当前页面的其他部分或者其他页面，不是所有的链接都要放到链接组，只需要主要的，基本的链接组放进nav里面即可。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;技术资料&lt;/h1&gt;</span><br><span class="line">&lt;!-- 链接到其他页面导航 --&gt;</span><br><span class="line">&lt;nav&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;博客&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&lt;article&gt;</span><br><span class="line">    &lt;header&gt;h5+css3&lt;/header&gt;</span><br><span class="line">    &lt;!-- 文章中的导航 --&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#h5&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#css3&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">        &lt;h2 id=&quot;h5&quot;&gt;h5&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;UR如翡翠城图书馆凝聚沪深国际经济哦 人头狗刘素华&lt;/p&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">        &lt;h2 id=&quot;css3&quot;&gt;css3&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;rsiycmkd关于日岁末放大镜看一个人回复奇偶的课程fig&lt;/p&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/article&gt;</span><br></pre></td></tr></table></figure><h3 id="aside元素"><a href="#aside元素" class="headerlink" title="aside元素"></a>aside元素</h3><p>用来表示当前页面或者其他页面的附属信息部分。可以包含当前页面或者主要内容相关的引用，侧边栏，广告，导航条以及其他类似的有别于主要内容的部分。</p><ul><li><p>作为主要内容的附属信息部分，包含在article中，其中的内容可以是与当前文章有关的参考资料和名词解释等。</p></li><li><p>作为页面或者站点全局的附属信息部分，在article之外使用，最典型的是侧边栏，其中可以有友情链接，博客中的其他文章列表，广告单元等。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 作为页面或者全局站点的附属信息 --&gt;</span><br><span class="line">&lt;aside&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">        &lt;h2&gt;友情链接&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;baidu&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;baidu&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;baidu&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">&lt;/aside&gt;</span><br></pre></td></tr></table></figure><h3 id="设计微格式"><a href="#设计微格式" class="headerlink" title="设计微格式"></a>设计微格式</h3><p>1.H5增加了一种新元素来无歧义的明确的对机器的日期和时间进行编码，这个元素是time元素。</p><p>2.time元素代表24小时中某个时刻(年月日时分秒)或者某个日期(年月日)，表示时刻时允许有时差。可以定义很多格式的时间。 </p><p>3.datatime属性中日期和时间之间要用T间隔，加字母Z表示UTC时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;time datetime=&quot;2012-11-13&quot;&gt;2012年11月13号&lt;/time&gt;</span><br><span class="line">&lt;time datetime=&quot;2012-11-13&quot;&gt;11月13号&lt;/time&gt;</span><br><span class="line">&lt;time datetime=&quot;2012-11-13&quot;&gt;我的生日&lt;/time&gt;</span><br><span class="line">&lt;time datetime=&quot;2012-11-13T20:00&quot;&gt;我的生日是晚上八点&lt;/time&gt;</span><br><span class="line">&lt;time datetime=&quot;2012-11-13T20:00Z&quot;&gt;我的生日是晚上八点&lt;/time&gt;</span><br><span class="line">&lt;time datetime=&quot;2012-11-13T20:00+9:00&quot;&gt;我的生日是晚上八点的美国时间&lt;/time&gt;</span><br></pre></td></tr></table></figure><p>4.添加发布日期(pubdate属性)</p><ul><li><p>pubdate属性是一个可选的布尔值属性，可用在article元素中time元素中，意思是time元素代表了文章或整个页面的发布日期。</p></li><li><p>由于time元素不仅仅表示发布时间，还可以表示其他用途的时间，如通知约会等，为了避免引擎误解发布日期，使用pubdate还可以显示告诉引擎文章哪个是正确的发布日期。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;article&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;谷歌董事长密令:每天关机一小时&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;发布日期&lt;time date=&quot;2012-5-20&quot; pubdate&gt;2012年5月20日&lt;/time&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;关于&lt;time date=&quot;2012-5-23&quot; pubdate&gt;2012年5月23日&lt;/time&gt;更正通知&lt;/p&gt;&lt;/header&gt;</span><br><span class="line">    &lt;p&gt;㒑rg89ah局融合女热加工费风湿热一个iOS人规划出嗨哟个人狙后入式恢复仍&lt;/p&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &lt;p&gt;http://www.github.com&lt;/p&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">&lt;/article&gt;</span><br></pre></td></tr></table></figure><h2 id="添加语义模块"><a href="#添加语义模块" class="headerlink" title="添加语义模块"></a>添加语义模块</h2><h3 id="标题块header"><a href="#标题块header" class="headerlink" title="标题块header"></a>标题块header</h3><p>具有引导和导航作用的结构元素，通常用来放置整个页面或者页面内的一个内容的区块标题。</p><h3 id="标题分组hgroup"><a href="#标题分组hgroup" class="headerlink" title="标题分组hgroup"></a>标题分组hgroup</h3><p>为标题及其子标题进行分组，通常与h1-h6联系</p><h3 id="脚注块footer"><a href="#脚注块footer" class="headerlink" title="脚注块footer"></a>脚注块footer</h3><p>内容块的注脚，如父级内容添加注释，或者给网页添加版权信息，脚注信息有多种形式，如作者，相关阅读链接及版权信息。</p><h3 id="联系信息addresss-行内元素"><a href="#联系信息addresss-行内元素" class="headerlink" title="联系信息addresss(行内元素)"></a>联系信息addresss(行内元素)</h3><p>在文档中定义联系信息包括文档作者，文档编辑者名称，电子邮箱，真实的地址电话号码</p><h1 id="H5表单（新增属性）"><a href="#H5表单（新增属性）" class="headerlink" title="H5表单（新增属性）"></a>H5表单（新增属性）</h1><h2 id="form元素"><a href="#form元素" class="headerlink" title="form元素"></a>form元素</h2><p>1.form元素的属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">action:提交表单数据到哪里</span><br><span class="line">              </span><br><span class="line">target：服务器返回页面的显示位置</span><br><span class="line">              </span><br><span class="line">method:表单数据提交的方式 </span><br><span class="line">      get:默认 数据在地址栏中，容易暴露，不安全</span><br><span class="line">      post:数据在请求体中，相对安全</span><br><span class="line">            怎么将项目部署到服务器上：</span><br><span class="line">                         </span><br><span class="line">                将项目复制到apache2/htdocs </span><br><span class="line">                         </span><br><span class="line">                启动服务器 cd ../bin  sudo ./apachectl -k start</span><br><span class="line">                         </span><br><span class="line">                访问项目 :在浏览器中输入http://192.168.159.200/index.html</span><br><span class="line">                         </span><br><span class="line">                查看请求体:F12 --&gt;NetWork--&gt;params(数据所在)</span><br><span class="line"></span><br><span class="line">name:表单名</span><br><span class="line"></span><br><span class="line">ectype:表示表单数据的编码方式</span><br><span class="line">                    一共有三种</span><br></pre></td></tr></table></figure><p>2.form控件</p><ul><li><p>input控件的属性</p><ul><li>name</li><li>value</li><li>maxlength</li><li>size</li><li>disabled</li><li>readonly</li><li><p>checked：radio和checkbox的默认选中</p></li><li><p>type属性取值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">原有的十种：</span><br><span class="line">   text 单行输入文本域</span><br><span class="line">   password 密码域</span><br><span class="line">   radio 单选框</span><br><span class="line">   checkbox 复选框</span><br><span class="line">   submit 提交按钮</span><br><span class="line">   reset 重置按钮</span><br><span class="line">   image 图片提交按钮</span><br><span class="line">   button 普通按钮</span><br><span class="line">   hidden 定义隐藏的字段</span><br><span class="line">   file 上传文件</span><br><span class="line"> </span><br><span class="line"> h5新增的type属性值</span><br><span class="line">   火狐不支持</span><br><span class="line">      * datepickers日期检出器类型(包含属性max,min,step,value) 火狐不支持</span><br><span class="line">    </span><br><span class="line">        + date类型 用于选取年月日的，选择一个具体日期</span><br><span class="line">        + time类型 用于选取时间的，具体到小时和分钟</span><br><span class="line">        + week类型 选取周年</span><br><span class="line">        + month 选取年月，选择具体月份</span><br><span class="line">        + datetime类型 选取时间，年月日，其中时间指UTC时间（Z）</span><br><span class="line">        + datetime-local类型：选取时间，年月日，其中时间指本地时间</span><br><span class="line"></span><br><span class="line">   火狐和谷歌都支持的：</span><br><span class="line">    - email类型 专门用于输入email的文本输入域，在提交表单时，会自动验证email的值，如果不是有效的值，则不会提交该表单</span><br><span class="line">    - url类型 提供用于输入url地址的这类特殊文本的文本框，</span><br><span class="line">    - number类型 提供用于输入数值的文本框，有min,max,step,value属性</span><br><span class="line">    - range类型 </span><br><span class="line"></span><br><span class="line">       - 提供用于输入包含一定范围内数字值的文本框，有min,max,step,value属性</span><br><span class="line">       - number和range都是数值的文本框，他们区别主要是在浏览器中的显示形式不一样，range显示为滑动条。</span><br><span class="line">    </span><br><span class="line">    - search类型 用于输入搜索关键字的文本框</span><br><span class="line">    - tel类型 用于专门用于输入电话号码的文本框，不限定于数字，不自动验证。</span><br><span class="line">    - color类型 专门用于用于设置颜色的文本框，可以快速打开拾色面板</span><br></pre></td></tr></table></figure></li></ul></li><li><p>button控件 默认在表单内部是可以提交的，（不放type属性时）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type属性：button  不可提交</span><br><span class="line">      submit</span><br><span class="line">      reset</span><br><span class="line">name</span><br><span class="line">value</span><br></pre></td></tr></table></figure></li><li><p>label控件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.把input标签放入label内:用来给input元素做标记</span><br><span class="line">    </span><br><span class="line">2.用for属性与input相关联</span><br><span class="line"></span><br><span class="line">    &lt;label for=&quot;id名&quot;&gt;&lt;/label&gt;</span><br><span class="line">    &lt;input id=&quot;id名&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>select控件  name属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selected：默认选中</span><br><span class="line">option  value属性</span><br><span class="line">optgroup：分组，用label属性设置组名</span><br><span class="line">   option</span><br></pre></td></tr></table></figure></li><li><p>textarea控件</p><pre><code>cols属性rows属性name属性wrap属性disabled</code></pre></li><li><p>fieldset元素和legend元素</p><pre><code>将表单中相关元素进行分组，legend是给fieldset定义组名</code></pre></li><li><p>新增属性details和summary元素</p><pre><code>* 用来描述某个文档或文本的内容。summary用来给它设置标题* 当点击按钮时会出现内容，默认情况是不可见的。可用open属性改变默认为可见。</code></pre></li><li><p>pregress 进度条 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value属性</span><br><span class="line">min属性</span><br><span class="line">max属性</span><br></pre></td></tr></table></figure></li><li><p>meter 磁盘容量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">min</span><br><span class="line">max</span><br><span class="line">low</span><br><span class="line">high</span><br><span class="line">optimum 最优值</span><br><span class="line">   如果optimum&lt;low 越低越好  value&lt;low,绿色； low&lt;=value&lt;=high 黄色；value&gt;high 红色</span><br><span class="line">   如果low&lt;optimum&lt;high 在中间最好 low&lt;=value&lt;=high为绿色 ；其他为黄色</span><br><span class="line">   如果optimum&gt;high 越高越好  value&lt;low 红色；low&lt;value&lt;high 黄色；value&gt;high 绿色</span><br></pre></td></tr></table></figure></li><li><p>output 用于在浏览器中显示计算结果或脚本输出(name属性)</p></li><li><p>datalist 数据列表,option与list相匹配使用,每一个option元素必须先设置value值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">与select的option的对比，</span><br><span class="line">    1.如果在option标签内部写了内容的话，点击之后，datalist显示的是value值，select那边显示的是option的value值</span><br><span class="line">    2.数据提交都提交的是option的value值</span><br><span class="line">    3.datalist与select在浏览器中的区别火狐只显示内容，谷歌上显示value跟内容</span><br></pre></td></tr></table></figure></li><li><p>keygen元素:密匙对生成器，能够使用户验证更为可靠</p></li></ul><h2 id="新增input-type属性值"><a href="#新增input-type属性值" class="headerlink" title="新增input-type属性值"></a>新增input-type属性值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">h5新增的type属性值</span><br><span class="line">         火狐不支持</span><br><span class="line">            * datepickers日期检出器类型(包含属性max,min,step,value) 火狐不支持</span><br><span class="line">    </span><br><span class="line">              + date类型 用于选取年月日的，选择一个具体日期</span><br><span class="line">              + time类型 用于选取时间的，具体到小时和分钟</span><br><span class="line">              + week类型 选取周年</span><br><span class="line">              + month 选取年月，选择具体月份</span><br><span class="line">              + datetime类型 选取时间，年月日，其中时间指UTC时间（Z）</span><br><span class="line">              + datetime-local类型：选取时间，年月日，其中时间指本地时间</span><br><span class="line"></span><br><span class="line">         火狐和谷歌都支持的：</span><br><span class="line">          - email类型 专门用于输入email的文本输入域，在提交表单时，会自动验证email的值，如果不是有效的值，则不会提交该表单</span><br><span class="line">          - url类型 提供用于输入url地址的这类特殊文本的文本框，</span><br><span class="line">          - number类型 提供用于输入数值的文本框，有min,max,step,value属性</span><br><span class="line">          - range类型 </span><br><span class="line"></span><br><span class="line">             - 提供用于输入包含一定范围内数字值的文本框，有min,max,step,value属性</span><br><span class="line">             - number和range都是数值的文本框，他们区别主要是在浏览器中的显示形式不一样，range显示为滑动条。</span><br><span class="line">          </span><br><span class="line">          - search类型 用于输入搜索关键字的文本框</span><br><span class="line">          - tel类型 用于专门用于输入电话号码的文本框，不限定于数字，不自动验证。</span><br><span class="line">          - color类型 专门用于用于设置颜色的文本框，可以快速打开拾色面板</span><br></pre></td></tr></table></figure><h2 id="新增input属性"><a href="#新增input属性" class="headerlink" title="新增input属性"></a>新增input属性</h2><p>1.form属性 写在表单控件中，将外部的表单控件包裹在表单内，值是form标签的值</p><p>2.其他<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">autocomplete属性 自动完成功能，属性值有on,off,空值三种</span><br><span class="line"></span><br><span class="line">height和width属性 只能用于image类型的提交按钮</span><br><span class="line"></span><br><span class="line">min,max和step属性 适用于datepickes,number,range</span><br><span class="line"></span><br><span class="line">novalidate  (true/false) 用于在提交表单时取消对整个表单的验证</span><br><span class="line"></span><br><span class="line">required 必填选项 规定用户输入的内容不能为空</span><br><span class="line"></span><br><span class="line">multiple属性 复选属性，file,select</span><br><span class="line"></span><br><span class="line">pattern 正则表达式 用于验证input类型输入框用户输入的内容是否与自定义的正则表达式相匹配</span><br><span class="line"></span><br><span class="line">autofocus 自动聚焦</span><br><span class="line"></span><br><span class="line">list属性 表示输入框所属的datalist,属性值为datalist的id</span><br><span class="line"></span><br><span class="line">placeholder 占位符，在输入框为空时显式出现，当获得焦点时会消失</span><br><span class="line">          与value值区别</span><br><span class="line">           1.显示上，placeholder是灰色的，value正常色</span><br><span class="line">           2.提交的时候，placeholder值不会提交，value值是会提交的</span><br><span class="line">           3.输入数据之后，placeholder的会消失，value值会先删掉再填写</span><br></pre></td></tr></table></figure></p><p>3.重写属性，写在提交按钮或提交图片上的，对原先表单的重写(reset submit image)<br>        formnovalidate 是否验证重写<br>        formtarget  目标路径<br>        formenctype 编码<br>        formmethod  提交方式<br>        formaction 提交地址</p><h2 id="其他h5新增元素"><a href="#其他h5新增元素" class="headerlink" title="其他h5新增元素"></a>其他h5新增元素</h2><ul><li>mark 高亮显示</li><li>cite    引用 显示样式是倾斜 通常把电影等标题放进里面</li><li>ol     start=”4”   reversed  反转或者倒序</li></ul><h2 id="canvas元素"><a href="#canvas元素" class="headerlink" title="canvas元素"></a>canvas元素</h2><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>* DOM是针对HTML和XML文档的一个API（应用程序编程接口）,DOM描绘了一个层次化的节点树，允许开发人员通过js操纵节点树，动态的添加，移除，修改页面的某一部分，实现局部更新。* DOM可以将任何HTML或XML文档描绘成一个由多层节点构成的结构。    节点分为几种不同的类型nodeType，每种类型分别表示文档中不同的信息或标记。    每个节点拥有各自的特点，数据和方法，另外也有与其他节点存在某种关系。    节点之间的关系构成了层次，所有页面标记则表现为一个以特定节点document为根节点的树形结构。* 我们一般不创建node节点，浏览器内存中会自动给我们加载节点对象，所以一般我们只需获取节点即可。* node的构造函数原型链：            Object            Node    (12种节点类型)Document(文档节点 nodeType 9)   Element(元素节点 nodeType 1)    TextNode(文本节点 nodeType 3)   Comment(注释节点 nodeType 8) Attribute(属性节点 2)    HTMLDocument            HTMLElement/...       document (根节点)           div* document节点对象映射一个页面,整个文档的父元素</code></pre><h2 id="详解节点的原型链"><a href="#详解节点的原型链" class="headerlink" title="详解节点的原型链"></a>详解节点的原型链</h2><h3 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h3><pre><code>1.js中所有的节点类型(12种)都继承自Node类型，Node.prototype中定义的属性和方法，所有的节点都可以使用2.属性(所有节点都可用)    1)nodeType:节点类型(12种)        常见的几种节点类型：            元素节点  1    Element: div/span..            属性节点  2    Attribute: id/name...            文本节点  3    TextNode: text/&quot;hello&quot;（空白节点也是）            注释节点  8    Comment: 注释            文档节点  9    Document: document.nodeType ==9    2)nodeName:节点名称,根据节点类型而定    3)nodeValue:节点值,根据节点的类型而定        nodeType      nodeName      nodeValue             1             Div             null          2                       3             #text           文本内容          9             #document       null          8             #comment        注释内容****访问节点：    4)childNodes:保存一个NodeList对象，NodeList是一种类数组对象用来保存一组有序的节点，表示当前节点的所有子节点(节点都是，与children区分)。它实际上是基于 DOM结构动态执行查询的结果，因此 DOM 结构的变化能够自动反映在 NodeList 对象中，有一个属性length     console.log(div.childNodes);//NodeList[所有子节点]      * 如何访问保存在NodeList中的对象:        方法一：[]访问            div.childNodes[0]         方法二：item()方法            div.childNodes.item(0);//方法内放下标        技巧：将 NodeList 对象转换为数组。            var nodes = Array.prototype.slice.call(div.childNodes,0);            console.log(nodes);//[text,p,div,span...]      * children和childNodes的区别：两者都是Node的属性，都可以被任何节点调用,访问的两种方法都可用。        console.log(document.childNodes);//类数组NodeList [DocumentType,&lt;html&gt;] 保存所有子节点（不只是元素节点）        console.log(document.children);//类数组HTMLCollection [&lt;html] 保存所有的元素子节点    5)parentNode:指向文档树中的父节点。包含在childNodes列表中所有的节点都具有相同的父节点，每个节点之间都是同胞/兄弟节点。    &lt;body&gt;        &lt;div class=&quot;one&quot;&gt;            &lt;p&gt;first&lt;/p&gt;        &lt;/div&gt;    &lt;/body         console.log($div.parentNode);//body    6)previousSibling: 兄弟节点中的前一个节点       div是body里唯一一个子元素节点       console.log($div.previousSibling);//#text       console.log($div.previousElementSibling);//null    7)nextSibling:  兄弟节点中的下一个节点        div是body里唯一一个子元素节点        console.log($div.nextSibling);//#text        console.log($div.nextElementSibling);//null    8)firstChild: childNodes列表中的第一个节点        console.log($div.firstChild);//text        console.log($div.firstElementChild);//p    9)lastChild: childNodes列表中的最后一个节点        console.log($div.lastChild);//text        console.log($div.lastElementChild);//p    10)ownerDocument :指向表示整个文档的文档节点document。任何节点都属于它所在的文档，任何节点都不能同时存在于两个或更多个文档中。       console.log($div.ownerDocument);//[HTMLDocument]3.方法：    1)hasChildNodes() 在包含一个或多个子节点的情况下返回true        console.log($div.hasChildNodes());//true****操纵节点的四种方法：下面四种方法都需要父节点进行调用。    2)appendChild()：追加节点        向childNodes列表末尾(所有子节点的末尾，也就是最后一个空白节点的后面)添加一个节点。返回值为新增的节点，关系更新            * 如果参数节点已经为文档的一部分，位置更新而不插入（原来参数节点的位置到最后一个，并且原来参数节点的位置不在）                dom树可以看做是由一系列的指针连接起来的，任何DOM节点不能同时出现在文档中的多个位置                 (1)//直接把原有的节点追加至最后                var $one1 = document.getElementsByTagName(&apos;p&apos;)[0];//页面已有节点                $div.appendChild($one1);//会把原有节点放到最后            * 如果不是原有节点，则可以通过创建新节点或者克隆已有节点在最后追加                (2)//创建新节点并追加至最后一个节点                var $p = document.createElement(&apos;p&apos;);                $p.style =&apos;background-color:blue;height:100px;&apos;;                $div.appendChild($p);                (3)//克隆原有的节点追加至最后                var $one_new = $div.firstElementChild.cloneNode(true);                $div.appendChild($one_new);    3)insertBefore()        第一个参数：要插入的节点；第二个参数：作为参照的节点；被插入的节点会变成参照节点的前一个同胞节点,返回插入节点。        如果第二个参数为null将会将该节点追加在NodeList后面（即跟appendChild追加到最后是一样的）            $div.insertBefore($p,$div.firstChild);////插入到第一个节点(#text)之前            $div.insertBefore($p,null);//追加到最后一个节点            $div.insertBefore($p,$div.lastChild);//插入到最后一个节点(#text)前            $div.insertBefore($p,$div.lastElementChild);//插入到最后一个元素节点前    4)replaceChild() 替换节点        第一个参数：要插入的节点；第二个参数：要替换的节点；        要替换的节点将由这个方法返回并从文档树中被移除，同时由要插入的节点占据其位置            $div.replaceChild($p,$div.lastElementChild);    5)removeChild() 移除节点        一个参数，即要移除的节点。移除的节点将作为方法的返回值。        任何节点对象都可以调用。            $div.removeChild($div.lastElementChild);****其他方法:    6)cloneNode() :不管深复制还是浅复制，复制后返回的节点副本属于文档所有，但并没有为它指定父节点。必须通过前面三个操纵节点的方法appendChild等添加到文档中。        * 用于创建调用这个方法的节点的一个完全相同的副本。        * 有一个参数为布尔类型参数为true时，表示深复制，即复制节点以及整个子节点数。        参数为false的时候，表示浅复制，只复制节点本身。        * 不管是深复制还是浅复制，事件都会被复制，但是子节点只有深复制才会被复制。        * 该方法不会复制添加到DOM节点中的JavaScript属性，例如事件处理程序等。        * 该方法只复制特定,子节点，其他一切都不复制。        但是IE中可以复制，建议标准相同，在复制之前，移除所有事件处理程序。    7)normalize()         * 处理文档树中的文本节点，由于解析器的实现或DOM操作等原因，可能会出现文本节点不包含文本，或者接连出现两个文本节点，        * 当在某个节点上调用了该方法，会删除空白节点，会找到相邻的两个文本节点，并将他们合并为一个文本节点。</code></pre><h3 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h3><pre><code>1.通过使用Document类型表示文档。在浏览器中，document对象是HTMLDocument的一个实例，表示整个HTML页面。document对象是window对象的一个属性，因此可以直接调用。HTMLDocument继承自Document。   window.ducument 当前文档2.下面学的是写在Document.prototype中的属性和方法，documnet实例对象都可以调用。3.属性：    1)documentElement   始终指向HTML页面中的html元素。根节点ducument的子节点    2)body        直接指向body元素    3)doctype     访问&lt;!DOCTYPE, 浏览器支持不一致，很少使用    4)title       获取文档的标题    5)URL         取得完整的URL    6)domain      取得域名，并且可以进行设置，在跨域访问中经常会用到。    7)referrer    取得链接到当前页面的那个页面的URL，即来源页面的URL    8)images      获取所有的img对象，返回HTMLCollection类数组对象    9)forms       获取所有的form对象，返回HTMLCollection类数组对象    10)links      获取文档中所有带href属性的a标签    返回HTMLCollection类数组对象3.方法：    查找元素的方法：    * 后面有Elements的方法：是一个数组，若是要使用类数组中的某一个元素时，必须要加下标[数值]    如果只需获得这个类数组的集合可以不用        var $div = document.getElementsByTagName(&apos;div&apos;);//不加下标表示的是类数组对象，后面要选中就需要加索引        var $img = document.getElementsByTagName(&apos;img&apos;)[0];//加下标表示的是类数组中的第几个        console.log($img.src);        console.log($div[0].className);        1)getElementById()          参数为要取得元素的ID，如果找到返回该元素，否则返回null如果页面中多个元素的ID值相同，只返回文档中第一次出现的元素。如果某个表单元素的name值等于指定的ID，该元素也会被匹配。        2)getElementsByTagName()         参数为要取得元素的标签名，返回包含另个或者多个元素的NodeList，在HTML文档中该方法返回的是HTMLCollection对象，与NodeList非常类似。可以通过[index/name],item(),namedItem(name)访问        3)getElementsByName()          参数为元素的name,返回符合条件的HTMLCollection类数组对象        4)getElementsByClassName()          参数为一个字符串，可以由多个空格隔开的标识符组成。当元素的class属性值包含所有指定的标识符时才匹配。HTML元素的class属性值是一个以空格隔开的列表，可以为空或包含多个标识符。    其他方法：        5)createElement()创建新节点,创建后要添加到文档中（document的方法）,参数是标签名            var $p = document.createElement(&apos;p&apos;);            $p.style =&apos;background-color:blue;height:100px;&apos;;            $div.appendChild($p);            * HTMLCollection对象：是一个类数组对象，与NodeList对象类似，NodeList对象是通过 任意标签.childNodes来返回的，而HTMLCollection对象是通过document.get..方法调用或者document.links等来返回的。两者都可以通过数组的slice转换成数组        6)write()        7)writeln()        8)open        9)close        10)createTextNode():创建文本节点，参数为要插入节点中的文本            var $txt = document.createTextNode(&apos;hello&apos;);//文本节点，通过appendChild追加到父元素中；通过appendData()追加文本的内容等        11)createAttribute():创建属性节点并传入特性的名称可以创建新的特性节点。            例如，要为元素添加 align 特性，可以使用下列代码：            var attr = document.createAttribute(&quot;align&quot;);            attr.value = &quot;left&quot;;</code></pre><h3 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h3><pre><code>1.属性：每个元素类型的实例对象都可直接调用。  *快速获取属性：直接点语法访问下面的核心属性即可  所有的HTML元素都由HTMLElement类型或者其子类型表示。每个HTML元素都应具有如下一些属性以及html元素特有的属性。    id          元素在文档中的唯一标识符    title       有关元素的附加说明信息    className   与元素class特性对应    lang        元素内容的语言代码，很少使用！    dir         语言方向，ltr,rtl 左到右，右到左、    src         img元素具有的属性    alt         img元素具有的属性    var $div = document.getElementsByTagName(&apos;div&apos;)[0];    console.log($div.className);    //e.id   e.title e.className  *每个元素都有一个或者多个特性，这些特性的用途是给出相应元素或内容的附加信息。    可以通过属性访问到该属性对应的值,特性的名称是不区分大小写的，即&quot;id&quot;&quot;ID&quot;表示相同的特性    另外需要注意的是，根据HTML5规范，自定义特性应该加上data-前缀，以便验证。  * attributes:返回一个类数组对象NamedNodeMap，得到某个元素的所有属性和属性值。可以通过[]和item(0)两种方式访问    var $attrs = $div[0].attributes;    console.log($attrs);//NamedNodeMap [ class=&quot;nae&quot;, name=&quot;hs&quot;]      console.log($div[0].attributes[0]);//class:myClass    console.log($div[0].attributes[0].nodeName);//calss    console.log($div[0].attributes[0].nodeValue);//myClass2.方法    1)获取属性：getAttribute()        alert(div.getAttribute(&quot;id&quot;)); //&quot;myDiv&quot;        alert(div.getAttribute(&quot;class&quot;)); //&quot;bd&quot;     2)设置属性:setAttribute()或者 直接点访问设置或修改       * setAttribute() ：两个参数，第一个参数为要设置的特性名，第二个参数为对应的值。如果该值存在，替换       * 当你设置class时，会出现把原来的所有calss类全部替换掉的问题，最好不要设。        $div[0].setAttribute(&apos;title&apos;,&apos;nihao&apos;);        // $div.title = &apos;nihao &apos;;        console.log($div[0].title);    3)移除属性:removeAttribute()        div.removeAttribute(&quot;class&quot;); 3.特殊特性： ？？？？？    style 通过getAttribute()访问时，返回的style特性值中包含的是CSS文本，而通过属性来访问返回一个对象，由于style属性是用于以编程方式访问元素样式的，因此并没有直接映射到style特性        &lt;div class=&quot;one&quot; style=&quot;background-color:blue;width:110px;height:100px;&quot; onclick=&quot;alert(1)&quot;&gt;&lt;/div        var $div = document.getElementsByTagName(&apos;div&apos;)[0];        var $attr = $div.getAttribute(&apos;style&apos;);        console.log($attr);        //background-color:blue;width:110px;height:100px;        console.log(typeof $attr);//string        var $attrs = $div.attributes;        console.log($attrs[1]);        //style=&quot;background-color:blue;width:110px;height:100px;&quot;         console.log(typeof $attrs[1]); //object    onclick类似的事件处理程序 通过getAttribute()访问时，返回相应代码字符串；访问onclick属性时，返回一个javascript函数        var $attr1 = $div.getAttribute(&apos;onclick&apos;);        console.log($attr1);//alert(1)        var $attrs = $div.attributes;        console.log($attrs[2]);//onclick=&apos;alert(1)&apos; //object4.元素的子节点在不同浏览器中的问题    &lt;ul&gt;        &lt;li&gt;item1&lt;/li&gt;        &lt;li&gt;item2&lt;/li&gt;    &lt;/ul    ie8及以下版本浏览器 2个子节点    其他浏览器 5个子节点5.作为文档树的文档有另一套的API特性和方法    将文档看做是Element对象树，忽略文档Text,Comment节点。    1)Element中的属性(所有的节点都能用，写在Element.prototype中的，所有的元素节点都可以使用，但是document这个节点另外，也可以用)        children 类似于childNodes,返回NodeList对象，但是该对象中仅包含Element对象        firstElementChild 第一个孩子元素节点        lastElementChild 最后一个孩子元素节点        nextElementSibling 下一个兄弟元素节点        previousElementSibling 上一个兄弟元素节点        childElementCount 子元素的数量，返回值和children.length值相等    2) 元素内容(text)    innerHTML和innerText的区别：       *获取值时：            &lt;p&gt; &lt;strong&gt;hello&lt;/strong&gt; wrold &lt;/p            console.log($p.innerText);//hello wrold  返回文本            console.log($p.innerHTML);//&lt;strong&gt;hello&lt;/strong  wrold返回文本和包含的元素       *设置（赋值）时：            $p.innerHTML = &apos;&lt;strong&gt;你&lt;strong&gt;好&apos;; //标签会被解析出来。&quot;你&quot;会被加粗            $p.innerText = &apos;&lt;strong&gt;你&lt;strong&gt;好&apos;;//标签会被直接当成字符串打印出来，//&lt;strong&gt; 你 &lt;strong 好    textContent:非ie使用；innerText:ie使用（可以写一个兼容函数）        if($dom.inner){            consoel.log($dom.innerText);        }else if($dom.textContext){            consoel.log($dom.textContent);        }else{         console.log(&apos;更换浏览器&apos;);        }</code></pre><h3 id="Text类型：文本节点。包含的是可以按照字面解释的存文本内容。"><a href="#Text类型：文本节点。包含的是可以按照字面解释的存文本内容。" class="headerlink" title="Text类型：文本节点。包含的是可以按照字面解释的存文本内容。"></a>Text类型：文本节点。包含的是可以按照字面解释的存文本内容。</h3><pre><code>是文本节点（对象）可以调用的属性和方法，这些属性和方法一般是对文本节点内部的文本进行操作。而Node类型的方法主要是对文本节点进行操作。* 先获取文本对象在再使用文本对象调用属性和方法（一般文本在元素的内部）    length //文本长度    假设txt是获取的文本对象（文本节点里保存的文本）    txt.appendData(text) //追加文本    txt.deleteData(beginIndex,count) //删除文本    txt.insertData(beginIndex,text) //插入文本    txt.replaceData(beginIndex,count,text) //替换文本    txt.splitText(beiginIndex) //从beginIndex位置将当前文本节点分成两个文本节点    var txt = document.createTextNode() //创建文本节点，参数为要插入节点中的文本    txt.substringData(beiginIndex,count) //从beginIndex开始提取count个字符串*例子：    var $h = document.getElementsByTagName(&apos;h1&apos;)[0];//获取父元素    var $txt = $h.childNodes[0];//获取文本对象，父元素中的子元素    $txt.appendData(&apos;hello&apos;);//必须由文本对象调用    $父元素.appendChild($txt);//追加文本节点到父元素</code></pre><h3 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h3><pre><code>&lt;div id = &quot;myDiv&quot;&gt;&lt;!--a comment--&gt;&lt;/div &lt;!--a comment--   Comment类型（注释节点）</code></pre><h3 id="循环的几个题目"><a href="#循环的几个题目" class="headerlink" title="循环的几个题目"></a>循环的几个题目</h3><pre><code>hackerrank题目.另一个网站数组的作业：几种重写方法正则作业（身份证号，邮箱..）和正则第二天的视频数组中的实例（视频中有）数组第二天视频动态表格和网页重构</code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><pre><code>1. javascript与HTML之间的交互是通过事件实现的。事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。2.事件三要素： * 事件源（event target）绑定事件的对象        事件源：发生的事件与之相关联或与之相关的对象        获取：dom对象 * 事件处理程序（event handler）        处理或相应事件的函数        匿名函数：当触发绑定事件的时候执行该函数 * 事件对象（event object）event对象        与特定事件相关且包含有关该事件详细信息的对象        非IE:function(event){        }        IE:window.event3.事件流：描述的是从页面中接收事件的顺序  *早期IE认为事件流是事件冒泡规范，而NETscape认为事件流是事件捕获，所以就产生了DOM2级事件规范。  *DOM2中规定事件流分为三个阶段：事件捕获，事件处理程序和事件冒泡。    1.事件捕获：从最不特定事件目标开始接收事件，直到最特定事件目标(事件接受)        由外而内，outer - center - inner        当给这三个或者其中几个设置了与鼠标操作对象的同名事件时，会依次捕获。               2.目标处理阶段：执行事件处理程序    3.事件冒泡：从最特定事件目标开始，逐级传播到最不特定事件目标，(事件传播)       由内而外，inner - cneter -outer       当给这三个或者其中几个设置了与鼠标操作对象的同名事件时，会依次冒泡。  *IE8以及以下版本只支持事件冒泡（IE8不支持DOM2级事件处理程序）4.事件处理程序：（原生）    * 包括事件的绑定和解除。    * 事件就是用户或浏览器自身执行的某种动作，响应某个事件的函数为事件处理程序，事件处理程序以&quot;on&quot;开头(onclick,onload)    * 事件处理程序类别        1)HTML事件处理程序:            * 某个元素支持的每种事件，都可以使用一个与相应事件处理程序同名的HTML特性来指定。这个特性的值应该是能够执行的JavaScript代码。                &lt;input type=&quot;button&quot; value=&quot;clickMe&quot; onclick = &quot;alert(&apos;is clicked&apos;)&quot;&gt;                &lt;input type=&quot;button&quot; value=&quot;clickMe&quot; onclick = &quot;showMsg()&quot;&gt;                &lt;script type=&quot;text/javascript&quot;&gt;                function showMsg(){                alert(&quot;is clicked&quot;);                }                &lt;/script             * 通过这种方式注册的事件只能注册一个，遵循覆盖原则，              不会传入event对象，              this指向window对象而不是触发事件的dom对象。        2)DOM0级事件处理程序:           * 通过javascript制定事件处理程序的传统方式，将一个函数赋值给一个事件处理程序属性。特点是简单，跨浏览器。                var btn = document.getElementById(&quot;btn&quot;);                btn.onclick = function(){                alert(&apos;cliked&apos;);                }           * 兼容比较好，简单                $dom.onxxx = handler;           * 同名的事件也只能注册一个，遵循覆盖原则。             dom0级所有浏览器都支持，事件被触发时会默认传入event对象。             是元素的方法，因此这个时候时间处理程序是在元素的作用域中运行，this指向当前元素。                btn.onclick = null; //解除事件处理程序        3)DOM2级事件处理程序(IE8不支持DOM2级规范)            *事件处理函数需要把它提取出来，放在外面，方便移除。            1.1)非IE事件处理程序                 * this指向当前的对象                 * 事件绑定:addEventListener()                         参数：(3个)                            要绑定的事件名                            作为事件处理的函数                            布尔值：true在捕获阶段调用事件处理程序;                                    false在冒泡阶段调用                 * 事件解绑：removeEventListener()                         参数：(3个)                            要删除的事件名                            作为事件处理的函数                            布尔值：true在捕获阶段调用事件处理程序;                                    false在冒泡阶段调用                 *                    可以添加多个事件处理程序，并且按照添加她们的顺序触发。                    移除事件传入的参数与添加处理程序时使用的参数相同，添加事件时如果使用匿名函数将无法删除.所以需要把匿名函数单独放出来给变量名。再传入两个方法中。                 *非IE版本                    $dom.addEventListener(&apos;xxx&apos;,handler,boolean);                    $dom.removeEventListener(&apos;xxx&apos;,handler,boolean);            1.2)IE事件处理程序:                 * 事件处理程序会在全局作用域中运行，因此 this指向window对象。为一个对象添加两个相同的事件，事件处理程序的顺序是按照添加相反顺序进行处理                 * attachEvent() 事件绑定                        参数：(2个)                            事件处理程序名称                            事件处理函数                 * detachEvent() 事件移除                        参数：(2个)                            事件处理程序名称                            事件处理函数                 * 事件处理程序都被添加到冒泡阶段(IE只有冒泡)                 * IE低版本                        $dom.attachEvent(&apos;on&apos;+xxx,hanlder);                        $dom.detachEvent(&apos;on&apos;+xxx,handler);            1.3)事件绑定和解绑的兼容函数(封装))                //通过EventUtil.on($outer,click,hander);                var EventUtil = {                    on:function(source,event,hander){                        if(source.addEventListener){                            source.addEventListener(event,hander);                        }else if(source.attachEvent){                            source.attachEvent(&apos;on&apos;+event,hander);                        }else{                            source[&apos;on&apos;+click] = hander;                        }                    }                    off:function(source,event,hander){                        if(source.removeEventListener){                            source.removeEventListener(event,hander);                        }else if(source.detachEvent){                            source.detachEvent(&apos;on&apos;+click,hander);                        }else{                            source[&apos;on&apos;+click]=hander;                        }                    }                }5.事件绑定(框架 jquery，非原生)    $(&apos;#one&apos;).on(&apos;click&apos;,function(event){        //event.preventDefault();     });6.事件对象(event对象)    1)事件对象的分类        低版本 IE：event是作为window对象的一个属性存在，所以需要通过window.event来实现        非IE:兼容DOM的浏览器默认会将 event对象传入到事件处理函数function中。            兼容：event = event || window.event;    2)event的属性：        *非IE版本中event对象的属性和方法：            bubbles      Boolean 事件是否冒泡            cancelable   Boolean 是否可取消事件默认行为            currentTarget Element 事件处理程序当前正在处理事件的那个元素            eventPhase   Integer 调用事件处理程序的阶段;1捕获 2处于目标 3冒泡            target     Element 事件真正目标            type     String事件类型，需要一个函数，处理多个事件时，可使用该属性。            preventDefault()  Function 取消事件的默认行为            stopPropagation()  Function 取消事件的进一步捕获或者冒泡        *低版本 IE中的event对象属性：            cancelBubble Boolean 是否取消事件冒泡,值为true取消冒泡,类似stopPropagation()            returnValue Boolean 取消事件默认行为,值为false阻止,类似preventDefault()            srcEvent Element   事件的目标 target            type String    被触发的事件的类型    3)event对象的常见兼容处理：        1.阻止标签默认行为：例如 a(跳转) form (自动提交)            *兼容：return false;//通用的兼容的写法，IE和非IE都可用            * IE低版本: event.returnValue = false;            ** 非IE: event.preventDefault();或者直接return false;                var $form = document.forms[0];                $form.onsubmit = function(event){                    event = event ||window.event;                    var $username = document.getElementsByName(&apos;username&apos;)[0].value;                    if(!/^\w{6,}$/i.test($username)){                        alert(&apos;输入有误&apos;);                        // //event.preventDefault(); 非IE                        return false;//通用的兼容的写法，IE和非IE都可用                    }                }        2.阻止冒泡            * IE低版本: event.cancelBubble = true;            ** 非IE: event.stopProPagation();                if(event.cancelBubble){                    event.cancelBubble = true;                }else if(event.stopProPagation){                    event.stopProPagation();                }        3.event对象的获取           兼容：event = event || document.event;                 event = event?event : window.event;    4)目标对象:target,currentTarget,和this的区别        target(IE中srcEvent):操作的dom对象(鼠标(点击或者其他操作)真正点击的目标对象)        currentTarget:当前目标 绑定事件的对象        this:当前目标  绑定事件的对象        *        target 指的是你真正的操作对象，即使后面经过冒泡，target会一直指向你点击的目标对象        而 currentTarget在冒泡时它的值是会跟随你的事件绑定的对象改变而改变    5)常见兼容      获得event对象兼容性写法       event || (event = window.event);      获得target兼容型写法       event.target||event.srcElement      阻止浏览器默认行为兼容性写法       event.preventDefault ? event.preventDefault() : (event.returnValue = false);      阻止冒泡写法       event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);7.事件类型    UI事件：        load：当页面完全加载后再window上触发，当所有框架加载完时在框架集上触发，当图像加载完毕时在img元素上触发，当嵌入的内容加载完时在&lt;object 触发        unload：当页面完全卸载后再window上触发，当所有框架都卸载后在框架集上触发，当嵌入的内容卸载完毕后再&lt;object 上触发,(firefox不支持)        select：当用户选择文本框（&lt;input&gt;,&lt;textarea）中用户输入的一个或多个字符时        resize：当浏览器窗口被调整到一个新的高度或者宽度时，会触发        scroll：当用户滚动带滚动条的元素中的内容时，在该元素上触发resize,scroll会在变化期间重复被激发，尽量保持代码简单    焦点事件：        blur 元素失去焦点的时候触发        focus 元素获得焦点的时候触发，不支持冒泡//IE支持        focusin 与focus等价，支持冒泡        focusout 与blur等价，支持冒泡    鼠标与滚轮事件：        click： 点击主鼠标按钮或者按下回车按键的时候触发。只有在一个元素上相继发生mousedown,mouseup事件，才会触发click事件        dblclick： 双击主鼠标按钮时触发.只有在一个元素上相继触发两次click事件才会触发dbclick事件        mousedown 任意鼠标按钮按下时触发        mouseup 释放鼠标按钮触发        mousemove 鼠标在元素内部移动的时候重发触发        mousewheel 滚轮事件      **mouseover 鼠标位于元素外部，将其首次移入另一个元素边界之内时触发        【支持子元素】      **mouseout 在位于元素上方的鼠标光标移入到另外一个元素中。        【支持子元素】在被选元素上与mouseleave效果相同        mouseenter 鼠标光标从元素外部首次移动到元素范围内激发，不冒泡。        【不支持子元素】,不能事件代理        mouseleave 在位于元素上方的鼠标光标移动到元素范围之外时触发，        不冒泡【不支持子元素】,不能事件代理    键盘与文本事件：        keydown 按下键盘任意键时触发，如果按住不放会重复触发此事件        keypress 按下键盘字符键时触发，如果按住不放会重复触发此事件        keyup 释放键盘上键时触发，当键盘事件发生时，event对象的keyCode属性中会包含一个代码与键盘上的特定键对应，对数字字母键,keyCode属性的值与ASCII码中对应的小写字母和数字编码相同8.事件代理（委托）    根据事件冒泡的规则，把事件添加到目标事件的父元素上，当点击目标事件的时候会触发绑定的事件，可以通过event.target来获取目标事件。    优点：可以支持动态添加元素        可以减少事件绑定次数，优化代码，提高效率    举例：动态表格</code></pre><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h1 id="JavaScript的加载过程"><a href="#JavaScript的加载过程" class="headerlink" title="JavaScript的加载过程"></a>JavaScript的加载过程</h1><p>众所周知javascript中有个特点是从上到下依次解析执行。那么渲染引擎遇到html,js和css时究竟发生了什么，又是怎么执行的呢。</p><h3 id="放在head标签或者不放在body最后的js文件"><a href="#放在head标签或者不放在body最后的js文件" class="headerlink" title="放在head标签或者不放在body最后的js文件"></a>放在head标签或者不放在body最后的js文件</h3><p>js放在head中会立即执行，如果js代码有进行dom操作和修改，有可能会阻塞后续的资源下载与执行。</p><p>正常的网页加载流程是这样的：</p><ul><li>浏览器一边下载HTML网页，一边开始解析;</li><li>解析过程中，发现script标签；</li><li>暂停解析，渲染引擎将控制权转交给JavaScript引擎；</li><li>如果 script 标签引用了外部脚本，就下载该脚本并执行js语句（没有async和defer属性时），如果没有引用外部脚本就直接执行js语句；</li><li>js执行完毕，控制权交还渲染引擎，恢复往下解析HTML网页。</li></ul><p>如果外部脚本加载时间很长（比如一直无法完成下载），就会造成网页长时间失去响应，浏览器就会呈现“假死”状态，这被称为“阻塞效应”。</p><div style="color:red;">JavaScript 加载优化策略：将js放在body标签的最后面。</div><p>（1）html需要等head中所有的js和css加载完成后才开始绘制，但是html不需要等待放在body最后的js下载执行就会开始绘制，这样可以避免资源阻塞，同时使静态的html页面迅速显示。</p><p>（2）生成之前就调用DOM，JavaScript会报错，如果脚本都在网页尾部加载，DOM已经生成就不会出现报错问题。</p><h3 id="带async属性的script标签的网页加载流程"><a href="#带async属性的script标签的网页加载流程" class="headerlink" title="带async属性的script标签的网页加载流程"></a>带async属性的script标签的网页加载流程</h3><p>在引用外部js文件时,如果含有async=”true”属性，将不会不会阻塞html渲染。依赖于任何js和css的执行，此js下载完成后立刻执行，不保证按照书写的顺序执行。</p><p>async属性的作用是，使用另一个进程下载脚本，下载时不会阻塞渲染。 </p><ul><li>浏览器开始解析HTML网页;</li><li>解析过程中，发现带有async属性的script标签;</li><li>浏览器继续往下解析HTML网页，同时并行下载script标签中的外部脚本;</li><li>脚本下载完成，浏览器暂停解析HTML网页，开始执行下载的脚本;</li><li>脚本执行完毕，浏览器恢复解析HTML网页。</li></ul><div style="color:red;">JavaScript 加载优化策略：脚本添加 async 属性，可以通知浏览器不要阻塞其余页面的加载，下载脚本处于较低的优先级。一旦下载完成，就可以执行</div><h3 id="带defer属性的script标签的网页加载流程"><a href="#带defer属性的script标签的网页加载流程" class="headerlink" title="带defer属性的script标签的网页加载流程"></a>带defer属性的script标签的网页加载流程</h3><p>在引用外部js文件时,如果含有defer=”true”属性，将不会不会阻塞html渲染。它会并行加载js，到页面全部加载完成后才会执行，会按顺序执行。</p><p>defer属性的作用是，告诉浏览器，等到DOM加载完成后，再执行指定脚本。</p><ul><li>浏览器开始解析HTML网页;</li><li>解析过程中，发现带有defer属性的script标签;</li><li>浏览器继续往下解析HTML网页，同时并行下载script标签中的外部脚本;</li><li>浏览器完成解析HTML网页，此时再执行下载的脚本。</li></ul><div style="color:red;">JavaScript 加载优化策略：脚本添加 async 属性，defer 跟 async 非常相似，不会阻塞页面加载，但是会等到 HTML 完成解析后再执行。</div><p>defer和async的渲染过程：<br><img src="/images/wechat/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181107173706.png" alt="defer和async"></p><h2 id="浏览器如何渲染网页"><a href="#浏览器如何渲染网页" class="headerlink" title="浏览器如何渲染网页"></a>浏览器如何渲染网页</h2><ol><li>使用 HTML 创建文档对象模型（DOM）</li><li>使用 CSS 创建 CSS 对象模型（CSSOM）</li><li>基于 DOM 和 CSSOM 执行脚本（Scripts）</li><li>合并 DOM 和 CSSOM 形成渲染树（Render Tree）</li><li>使用渲染树布局（Layout）所有元素</li><li>渲染（Paint）所有元素</li></ol><p>（具体的渲染步骤图和解析的传送门：<a href="http://jinlong.github.io/2017/05/08/optimising-the-front-end-for-the-browser/" target="_blank" rel="noopener">浏览器前端优化</a>）</p><h2 id="前三个步骤的加载优化"><a href="#前三个步骤的加载优化" class="headerlink" title="前三个步骤的加载优化"></a>前三个步骤的加载优化</h2><p>HTML 加载优化策略:</p><ul><li>样式在顶部，脚本在底部<br>脚本执行之前，需要 HTML 和 CSS 解析完成，因此，样式尽可能的往顶部放，当底部脚本开始执行之前，样式有足够的时间完成计算。</li><li>最小化和压缩</li></ul><p>CSS 加载优化策略:</p><ul><li>使用 media 属性</li><li>延迟加载 CSS</li><li>只加载需要的样式</li></ul><p>JavaScript 加载优化策略:</p><ul><li>异步加载脚本async</li><li>延迟加载脚本defer</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>建议看看大佬Alon Zhang：<a href="http://jinlong.github.io/2017/05/08/optimising-the-front-end-for-the-browser/" target="_blank" rel="noopener">浏览器前端优化</a>，醍醐灌顶。<br>大佬博客(<a href="http://jinlong.github.io/" target="_blank" rel="noopener">http://jinlong.github.io/</a>) </p><p>HTML5:<a href="https://juejin.im/post/6888507535771631629" target="_blank" rel="noopener">推荐使用的HTML5的十个功能</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML基础 </tag>
            
            <tag> HTML笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ECMAScript</title>
      <link href="/2018/08/23/js%E5%9F%BA%E7%A1%801/"/>
      <url>/2018/08/23/js%E5%9F%BA%E7%A1%801/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>javaScript基本语法</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a><br>本文记录了本人在大三期间自学javaScript的学习笔记，自学时用到的代码均上传至github。该部分主要介绍的是js基本语法，是js的核心知识点。</p><h1 id="javaScript的基本语法"><a href="#javaScript的基本语法" class="headerlink" title="javaScript的基本语法"></a>javaScript的基本语法</h1><ol><li><p>javaScript简介</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">js的历史：</span><br><span class="line">    javascript是1995年诞生的，当时是为了处理以前由服务器语言负责的没有填写的必填域，是否输入了有效的值的判断。由网景公司开发而成的LIVEScript,后来搭了java的顺风车改成javascript,因为是不共享的，后来不同的浏览器形成了不同的javascript，后期为了开发者的方便就从不同的浏览器中的javascript提出相同的核心的部分称为ECMAScript,作为javascript的实现标准。</span><br><span class="line"></span><br><span class="line">    javascript包括ECMAScript(核心js)，BOM和DOM(浏览器提供的).</span><br><span class="line">    java和javascript几乎没有任何关系。</span><br></pre></td></tr></table></figure></li><li><p>特点</p><ul><li><p>脚本语言</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标记语言:html,没有逻辑能力和行为能力，只能够被读取</span><br><span class="line">脚本语言：js,本身具有行为能力和逻辑能力，需要被浏览器解析(浏览器内置解析器)执行</span><br><span class="line">编译语言：java,本身具有行为能力和逻辑能力，需要编译运行</span><br><span class="line">                需要进行.class编译（javac） 运行（java）</span><br></pre></td></tr></table></figure></li><li><p>解释性语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">浏览器中内置解析器（用来解析执行代码）</span><br><span class="line">    火狐：js解析器</span><br><span class="line">    谷歌：js解析器</span><br><span class="line">        编译型语言</span><br><span class="line">            Java C</span><br><span class="line">                .java-&gt;.class   字节码</span><br><span class="line">                .c   -&gt;.o       二进制</span><br><span class="line">                    编译：语法校验</span><br></pre></td></tr></table></figure></li><li><p>弱类型语言<br>   javascript：</p><pre><code>弱类型语言（语言宽松）    var a=12;//a:number        a=&quot;hello&quot;;//a:string 正确        a=true;//a:boolean;</code></pre><p>   java:</p><pre><code>强类型语言（语言严格）    int a=12;        a=&quot;hello&quot;;//代码报错</code></pre></li><li>从上往下顺序解析执行<br>   html:从上往下</li></ul></li><li><p>javascript的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">一个完整的javascript的实现包括三个部分：ECMAScript（核心js），DOM，BOM</span><br><span class="line">    ECMAScript（核心js）</span><br><span class="line">        ECMA-262 定义的EMCAScript与Web浏览器没有依赖关系。浏览器仅是ECMAScript实现可能的宿主环境之一，宿主环境不仅提供基本的ECMAScript实现同时也提供该语言的扩展，以便语言与环境之间对接交互。扩展如DOMECMA规定了这门语言的组成部分</span><br><span class="line">        1，语法</span><br><span class="line">        2，类型</span><br><span class="line">        3，语句</span><br><span class="line">        4，关键字</span><br><span class="line">        5，保留字</span><br><span class="line">        6，操作符</span><br><span class="line">        7，对象（万物皆对象）</span><br><span class="line">    DOM（文档对象模型）</span><br><span class="line">        DOM(Document Object Model) 是针对XML但经过扩展用于HTML的应用程序编程接口。DOM将整个页面映射成一个多节点结构。</span><br><span class="line">                html代码：</span><br><span class="line">                &lt;html&gt;</span><br><span class="line">                    &lt;head&gt;</span><br><span class="line">                        &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">                        &lt;meta&gt;</span><br><span class="line">                    &lt;/head&gt;</span><br><span class="line">                    &lt;body&gt;</span><br><span class="line">                        &lt;p&gt;nihao &lt;/p&gt;</span><br><span class="line">                        &lt;!--注释节点--&gt;</span><br><span class="line">                    &lt;/body&gt;</span><br><span class="line">                &lt;/html&gt;</span><br><span class="line">                    dom模型</span><br><span class="line">                    doucment</span><br><span class="line">                        |</span><br><span class="line">                    html节点</span><br><span class="line">                    /   \</span><br><span class="line">                head    body</span><br><span class="line">                 |       |</span><br><span class="line">                title    p</span><br><span class="line">                 |       |</span><br><span class="line">                &apos;hello&apos; &apos;你好&apos;</span><br><span class="line">    BOM（浏览器对象模型）</span><br><span class="line">        alert()也属于</span><br><span class="line">        </span><br><span class="line">        BOM(Browser Object Model),开发人员可以使用BOM控制浏览器显示的页面以外的部分。弹出新浏览器窗口；移动，缩放，关闭浏览器的功能；提供浏览器详细信息的navigator对象;提供浏览器所加载页面的详细信息的location对象；提供用户显示器分辨率详细信息的screen对象；对cookies的支持；支持XMLHttpRequest,IE中的ActiveXObject自定义对象</span><br><span class="line"></span><br><span class="line">        BOM和DOM之间的关系，由于BOM的核心对象是window，window对象有一个document属性，而document是DOM的根节点，所以BOM可以操作DOM.</span><br></pre></td></tr></table></figure></li><li><p>兼容性</p><ul><li>JavaScript的三个组成部分，在当前五个主要浏览器（IE,Firefox,Chrom,Safari,Opera）中得到了不同程度支持，其中，所有浏览器对ECMAScript3支持大体都还不错，对ECMAScript支持程度越来越高，但对DOM的支持彼此相差较多，对已经正式纳入HTML5标准的BOM来说，尽管各浏览器都实现了某些总所周知的共同特性，但其他特性还因浏览器而异。</li></ul></li><li><p>script标签的属性</p><ul><li>type: 可看做是language的替代属性(language已废弃)，表示编写代码使用的脚本语言的内容类型，MIME这个属性非必须，默认是text/javascript</li><li><p>src: 表示包含要执行代码的外部文件（与用link标签引入的css样式表中的href相区别）</p></li><li><p>async：立刻下载脚本，但应妨碍页面中其他操作（只针对外部脚本文件）</p></li><li>charset:指定src属性指定的代码的字符集，大多数浏览器会忽略这个值。</li><li>defer: 表示脚本可以延迟到文档全部被解析和显示之后再执行（只针对外部脚本文件）</li></ul></li><li><p>在HTML中使用JavaScript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.直接嵌入在页面中</span><br><span class="line">   将js代码嵌入在head标签(body标签，或者body之后html之后的标签)内部</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;/*js代码*/&lt;/script&gt;</span><br><span class="line">   将js代码嵌入在html标签内部</span><br><span class="line">        &lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;div onclick=&quot;alert(&quot;hello&quot;);&quot;&gt;&lt;/div&gt;</span><br><span class="line">3.引入外部的js文件</span><br><span class="line">    不能再已经引入外部文件的script标签内部书写js代码，否则会被浏览器忽略执行</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;js/1.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.不要在&lt;script&gt;标签中再填写其他js代码，否则将会忽略(引入外部的js文件方式)</span><br><span class="line"></span><br><span class="line">2.src 可以跨域访问 。例如：http://cdn.code.baidu.com/ 百度静态资源公共库(后期的ajax跨域访问)</span><br><span class="line"></span><br><span class="line">3.script标签位置&lt;head&gt;标签中：等到全部的js代码都被下载,解释和执行完成后才能开始呈现页面的内容。可将代码引用放到&lt;body&gt;元素放到内容后面。</span><br><span class="line"></span><br><span class="line">4.延迟脚本:(defer=&quot;defer&quot;),延迟至浏览器遇到&lt;/html&gt;标签后再执行。</span><br><span class="line"></span><br><span class="line">5.&lt;noscript &gt;当浏览器不支持脚本或者浏览器支持脚本，脚本被禁用，可以让页面平稳的退化.</span><br><span class="line">&lt;/noscript&gt;</span><br><span class="line">    &lt;noscript&gt;</span><br><span class="line">        本页面需要浏览器支持（启用）javascript</span><br><span class="line">    &lt;/noscript&gt;</span><br></pre></td></tr></table></figure></li><li><p>基础语法<br> 1) 区分大小写 </p><pre><code>typeof 关键字， typeOf 非关键字</code></pre><p> 2) 标识符<br>   指变量，函数，属性的名字或者函数的参数。标识符是按照以下规则组合起来的一或多个字符：</p><pre><code>1.字母，数字，下划线，$组成。2.只能以字母，下划线，$开头。3.不能将关键字作为标识符。4.命名尽量采用驼峰式命名</code></pre><p> 3) 注释</p><pre><code>//单行注释/*多行注释*/</code></pre><p> 4) 语句<br> 每个语句以分号结尾，如果省略分号，由解析器确定语句的结尾，即分号可以省略，但是我们要求每个语句的末尾都应该有分号</p></li><li><p>关键字保留字<br> 1) 关键字:(在js中有特殊功能)</p><pre><code>break       do      instanceof  typeofcase        else    new,        varcatch       finally return,     voidcontinue    for     switch,     whiledebugger    this    function    withdefault     if      throw       deletein          try</code></pre><p> 2) 保留字：(将来可能成为关键字)</p><pre><code>abstract    enum    int         shortboolean     export  interface   staticbyte        extends long        superchar        final   native      synchronizedclass       float   package     throwsconst       goto    private     transientdebugger    double  implements  protectedvolatile    import  public</code></pre></li><li><p>script标签的defer和async属性（异步加载：无阻塞并发处理）：建议使用defer，但是它只对外部js有效。</p><ul><li><p>正常情况下，当浏览器在解析HTML源文件时如果遇到外部script,那么解析过程会暂停，并发送请求来下载script，只有script完全下载并执行后才会继续执行DOM解析。但是通过script的async或者defer属性来让脚本不必同步（一步一步按步骤）执行。</p></li><li><p>async和defer都不会暂停HTML解析就立刻被下载，两者都支持onload事件回调来解决需要该脚本来执行的初始化。两者都只能用在外部JS文件中。</p></li><li><p>两者的区别在于执行时的不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async h5新增属性，用于异步下载脚本文件，下载完成后立即解析执行代码。</span><br><span class="line">脚本在script文件下载完成后立即执行，并且执行时间一定在window的load事件触发之前，但不确定与DOMContentLoaded事件的执行顺序，这意味着多个script脚本很可能不会按照其在页面出现的顺序执行。</span><br><span class="line">load事件一般是在HTML中指定的资源都加载完成之后触发的，比如图片什么的。</span><br><span class="line"></span><br><span class="line">defer 开启新线程下载脚本文件，并使脚本在文档解析完成后执行。</span><br><span class="line">脚本执行时间为DOM解析完成之后，document的DOMContentLoaded事件和load事件触发之前。浏览器确保多个defer脚本按其在HTML页面出现顺序来依次执行。</span><br><span class="line">DOMContentLoaded事件是在DOM加载完，也就是HTML和JS解析完成之后就触发的。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>页面的加载和渲染过程</p><ul><li>浏览器通过HTTP协议请求服务器，服务器返回响应页面。（浏览器）获取HTML文档（响应页面）并开始从上到下解析（浏览器解析器），构建DOM.</li><li>在构建DOM过程中，如果遇到外联样式声明和脚本声明，则暂停文档解析，创建新的网络连接，并开始下载样式文件和脚本文件。</li><li>样式文件下载完成之后，构建CSSDOM，脚本文件下载完成之后，解释并执行。然后继续解析文档DOM</li><li><p>完成文档解析后，将DOM和CSSDOM进行关联和映射，最后将视图渲染到浏览器窗口</p></li><li><p>在这一整个过程中，脚本文件的下载和执行是与文档解析同步执行的，也就是说会阻塞文档的解析，如果控制的不好，在用户体验上就会造成不同程度的影响。<br>defer and async图片：<a href="/images/web/defer.png">地址</a><br><img src="/images/web/defer.png" alt=""></p></li></ul></li></ol><h2 id="js基本语法"><a href="#js基本语法" class="headerlink" title="js基本语法"></a>js基本语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li><p>创建变量</p><ul><li>变量声明<br>   var str;</li><li><p>变量初始化<br>   赋值操作<br>   str =”arrsy”;</p></li><li><p>变量的更改<br>   str =2;<br>   str =true;</p></li><li>变量的使用<br>   console.log(str);//true<br>   打印在控制台上<br>   str = str+”hello”;//truehello</li><li>变量的声明和初始化<br>var arr1 =[1,2,3];<br>var arr2 =[3,4,2];<br>var arr =[arr1,arr2];</li><li><p>声明多个变量<br>var str1 =”hello”,str2 =”ls”,str3=”ld”;</p><p>1.var age =12;<br>2.age =12;</p></li></ul></li><li><p>全局变量和局部变量</p><p> 全局变量声明的两种方式：</p><pre><code>用var声明在script标签内部的不用var声明在script标签内的任意位置处     若没有用var声明在函数体内部的变量只有在函数被调用并且执行到变量声明处才有这个全局变量，并且能被使用。        function test(){            message = &quot;hello&quot;;          }        // test();        alert(message); //可以访问 没有用var 声明的变量属于全局变量，当函数被调用之后页面就有了这个全局变量</code></pre><p> 局部变量：用var 声明在块中（方法体中）</p><pre><code>function test(){  var message = &quot;hello&quot;;  }test();alert(message); //错误 局部变量只能在局部作用域内访问</code></pre></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>分类<br> <strong>ECMAScript不支持自定义类型，只有6种数据类型：</strong></p><ul><li><p>5中基本数据类型（简单数据类型）<br>  Undefined 未定义 “undefined”</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a ;</span><br><span class="line">var a = undefined;</span><br></pre></td></tr></table></figure><p>  Null    空引用数据类型 “null”</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = null;</span><br></pre></td></tr></table></figure><p>  Boolean   布尔类型 true/false</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = false;</span><br></pre></td></tr></table></figure><p>  Number    数字类型</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">整数(八进制 十进制 十六进制)</span><br><span class="line">浮点数(小数)</span><br></pre></td></tr></table></figure><p>  String    字符串类型 “” ‘’</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot; &apos;hello&apos;</span><br><span class="line">var a =&quot;undefined&quot;;</span><br><span class="line">var a =&apos;hello&apos;;</span><br></pre></td></tr></table></figure></li><li><p>1种引用数据类型（复杂数据类型）<br>  <strong>Object(本质由一组无序的键值对组成)</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">var teacher=new Obejct();</span><br><span class="line">typeof(student)//object</span><br><span class="line">teacher.age=12;</span><br><span class="line">teacher.gender=&quot;男&quot;;</span><br><span class="line">console.log(teacher.age);//12</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">var student=&#123;</span><br><span class="line">    name:&quot;zhangsan&quot;,</span><br><span class="line">    age:12</span><br><span class="line">&#125;;//空对象</span><br></pre></td></tr></table></figure></li></ul></li><li><p>typeof操作符(该方法本身会返回一个字符串类型)<br>   <strong>返回该变量名所指向数据的类型</strong><br>   语法：<br>   typeof 变量名  console.log(typeof(a));</p><p>   可有取值如下</p><pre><code>&quot;undefined&quot;   未定义&quot;boolean&quot;   布尔类型&quot;string&quot;    字符串&quot;number&quot;    数值&quot;object&quot;    对象或者null&quot;function&quot;    函数</code></pre></li><li><p>instanceof操作符 返回布尔值，用来判断是否属于某个构函的实例</p><pre><code>var stu =new Object();console.log(stu instanceof Object);//truefunction eat(){}console.log(eat instanceof Function);//trueconsole.log(eat instanceof Object);//true</code></pre></li><li><p>数据类型</p></li></ol><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><h5 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h5><p>   值是undefined的几种情况（类型也是undefined）</p><ol><li><p>变量声明但未赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">console.log(a);//undefined</span><br><span class="line">console.log(typeof(a));//&apos;undefined&apos;</span><br><span class="line"></span><br><span class="line">//typeof()方法返回字符串类型</span><br></pre></td></tr></table></figure></li><li><p>将变量值显式设置为undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a=undefined;</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(typeof(a));</span><br></pre></td></tr></table></figure></li><li><p>一个未声明的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// console.log(a);//报错 试图获取一个未声明的变量</span><br><span class="line">console.log(typeof(a));//不报错 没有声明的变量的类型是&apos;undefined&apos;</span><br></pre></td></tr></table></figure></li><li><p>访问变量没有的属性时</p></li><li>函数没有返回值的时候</li></ol><h5 id="null-空引用数据类型，即将要指向一个引用数据类型"><a href="#null-空引用数据类型，即将要指向一个引用数据类型" class="headerlink" title="null: 空引用数据类型，即将要指向一个引用数据类型"></a>null: 空引用数据类型，即将要指向一个引用数据类型</h5><p>   值为null,类型为Object类型<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a =null;</span><br><span class="line">console.log(a);//null</span><br><span class="line">console.log(typeof(a));//&apos;Object&apos;</span><br><span class="line"></span><br><span class="line">undefined是派生自Null的，</span><br><span class="line">console.log(null==undefined);//true 相等不全等</span><br><span class="line">console.log(null===undefined);//false</span><br></pre></td></tr></table></figure></p><p>   <strong>使用情景</strong><br>   如果一个变量准备将来保存对象，可以将该变量初始化null而不是其他，这样可以通过检查null值就可以知道相应的变量是否已经保存了一个对象的引用。<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(car !=null )&#123;</span><br><span class="line">//car对象执行某些操作</span><br><span class="line">&#125;</span><br><span class="line">实际上 undefined 派生自null值。undefined == null 结果为 true</span><br><span class="line">null与undefined用途不同，null可以用来表示一个空对象，但是没有必要把一个变量的值显式设置为undefined</span><br></pre></td></tr></table></figure></p><h5 id="boolean-布尔类型"><a href="#boolean-布尔类型" class="headerlink" title="boolean: 布尔类型"></a>boolean: 布尔类型</h5><pre><code>该类型只有两个值，true,false虽然boolean类型的取值只有两个，但是ECMAScript中所有的类型的值都有与这两个Boolean值等价的值除了null undefined 0 &quot;&quot; NaN false 是false，其余都可以转换为true    var c =true;    var b =false;    console.log(c);//true    console.log(typeof c);//boolean    var d =Boolean(a);//null转换为布尔值为false    var e =Boolean(b);    console.log(d);//false    console.log(typeof d);//boolean    console.log(e);//false    console.log(typeof e);//boolean</code></pre><h5 id="number-数值类型"><a href="#number-数值类型" class="headerlink" title="number: 数值类型"></a>number: 数值类型</h5><p><strong>分为整型和浮点型</strong><br>一： 表示方法</p><ol><li><p>整数：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">十进制数： 55  0~9</span><br><span class="line">八进制数： 首位为0,其他位为（0~7 如果字面值超出了范围，前导0将会被忽略）</span><br><span class="line">    070 （表示 7*8一次方 =  56）</span><br><span class="line">    079 （超过了范围，表示79）</span><br><span class="line">十六进制： 前两位为0x，其他位为(0~9，A~F)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>浮点数</p><pre><code>所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后必须至少有一位数字。浮点数值的最高精度是17位小数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如： var f = 1.2;</span><br><span class="line">科学计数法：e</span><br><span class="line">    var e = 3.125e7;    //31250000</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>二： 数值范围</p><ol><li><p>由于内存的限制，ECMAScript不能保存世界上所有的数值。ECMAScript能表示的最小数值保存在Number.MIN_VALUE中，能表示的最大的数值保存在Number.MAX_VALUE中。如果某次计算的结果超过了JavaScript数值范围，将会返回Infinity(正无极)或者-Infinity(负无极)</p></li><li><p>使用 isFinite()函数可以判断参数是否在最大值和最小值之间，如果在，返回true</p><p> 在绝大数浏览器中：<br> Number.MIN_VALUE ： 5e-324<br> Number.MAX_VALUE ：  1.7976931348623157e+308<br> 如果某次计算返回了正的或者负的Infinity,那么该值无法继续参与下一次计算。可以使用isFinite(para)函数判断para 是否在最大数最小数之间</p></li></ol><p>三： 非数值 NaN (not a number)<br>        <strong>该数值表示一个本来要返回数值的操作数未返回数据的情况。</strong><br>        var a = 10/‘a’;<br>        console.log(a);   //NaN<br>        <strong>任何涉及到NaN的操作都会返回NaN; NaN与任何值都不相等，包括NaN本身。</strong></p><pre><code>isNaN，判断参数是否“不是数值”或者不能转为为数值时，当参数para不是数值的时候返回true <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isNaN(NaN);   true</span><br><span class="line">isNaN(&quot;blue&quot;);  true  无法转换为数值</span><br><span class="line">isNaN(10);    false 10</span><br><span class="line">isNaN(&quot;10&quot;);  false 10</span><br><span class="line">isNaN(true);  false</span><br><span class="line">console.log(0=== -0);  //TRUE</span><br><span class="line">console.log(NaN===NaN); //FALSE</span><br></pre></td></tr></table></figure></code></pre><p><strong>注意：</strong></p><ul><li>默认情况下，ECMAScript会将小数点后带有6个零以上的浮点数转化为科学计数法。<br>0.0000003 =&gt; 3e-7(3*Math.pow(10,-7))  e=10</li><li>在进行算术计算时，所有以八进制十六进制表示的数值都会被转换成十进制数值。    </li><li>保存浮点数需要的内存是整数的两倍，因此ECMAScript会不失时机将浮点转换为整数(比如浮点数只有0的时候)<br>   例如：<br>   var a = 1.;<br>   var b = 1.0;  都将解析为1</li><li>避免测试某个特点的浮点数值，是使用IEEE 754数值的浮点计算的通病<br>例如： 0.1+0.2结果不是0.3，而是0.30000000000000004<br>Math.pow(2, 53)，十进制即 9007199254740992   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">// var p =0.1;</span><br><span class="line">// var o =0.2;</span><br><span class="line">// var result =p+o;</span><br><span class="line">// console.log(result);//失去精度 因为计算机解析的时候是32位的二进制数0和1  0.300000000004</span><br><span class="line"></span><br><span class="line">//失去精度的解决方法，把两个数变成整数，整数不会失去精度</span><br><span class="line">var p =0.1*10;</span><br><span class="line">var o =0.2*10;</span><br><span class="line">var result =(p+o)/10;</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure></li></ul><h5 id="String-字符串类型-“”-‘’"><a href="#String-字符串类型-“”-‘’" class="headerlink" title="String: 字符串类型 “” ‘’"></a>String: 字符串类型 “” ‘’</h5><p>   <strong>该类型表示由零个或者多个16位Unicode字符组成的字符序列，即字符串。字符串可以由双引号或者单引号表示</strong><br>      1)字符字面量<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\n  换行</span><br><span class="line">\t  制表</span><br><span class="line">\b  退格</span><br><span class="line">\r  回车</span><br><span class="line">\\  斜杠</span><br><span class="line">(\&apos;)  (单引号)</span><br><span class="line">(\&quot;)  (双引号)</span><br></pre></td></tr></table></figure></p><pre><code>2)字符长度    通过length属性获取字符长度</code></pre><h4 id="复杂数据类型：object"><a href="#复杂数据类型：object" class="headerlink" title="复杂数据类型：object"></a>复杂数据类型：object</h4><ol><li>ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行”new 对象类型”来创建。var o = new Object();</li><li>Object类型是所有它的实例的基础，换句话说,Object类型所具有的任何属性和方法，同样存在于更具体的对象。</li><li><p>Object.prototype中的属性和方法：</p><p>constructor:构造器，表示对象实例的构造函数。保存用户创建当前对象的函数</p><p>hasOwnProperty(propertyName): 用于检查给定的属性是否在当前对象实例中(属性为自己的则为true,如果是继承的则为false)</p><p>isPrototypeOf(object): 用于检查传入的对象是否是原型</p><p>propertyIsEnumerable(propertyName):用于检查给定的属性在当前对象实例中是否存在</p><p>toLocaleString();       返回对象的字符串表示，该字符串与执行环境的地区对应</p><p>toString();   返回对象的字符串表示<br>valueOf();    返回对象的字符串，数值，布尔值的表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var person=&#123;</span><br><span class="line">    name:&quot;zhangsan&quot;,</span><br><span class="line">    age:21</span><br><span class="line">&#125;</span><br><span class="line">console.log(person.hasOwnProperty(&quot;gender&quot;));//false</span><br><span class="line">console.log(person.constructor)//object</span><br><span class="line">console.log(Object.prototype.isPrototypeOf(person)+&quot;looj&quot;); </span><br><span class="line">console.log(person.propertyIsEnumerable(&quot;name&quot;))//true</span><br><span class="line"></span><br><span class="line">var d = new Date()</span><br><span class="line">console.log(d.toLocaleString())//2017/8/16 下午11:24:59 </span><br><span class="line"></span><br><span class="line">var date = new Date(2013, 7, 18, 23, 11, 59, 230);</span><br><span class="line">document.write( date.toString() ); // Sun Aug 18 2013 23:11:59 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">var eles = document.getElementsByTagName(&quot;body&quot;);</span><br><span class="line">document.write( eles.toString() ); // [object NodeList]</span><br><span class="line">document.write( eles[0].toString() ); // [object HTMLBodyElement]</span><br><span class="line"></span><br><span class="line">var array = [&quot;CodePlayer&quot;, true, 12, -5];</span><br><span class="line">document.write( array.toString() ); // CodePlayer,true,12,-5</span><br></pre></td></tr></table></figure><p>对于不同类型的对象，js定义了多个版本的 toString 和 valueOf 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">toString:</span><br><span class="line">（1）普通对象，返回 &quot;[object Object]&quot;;</span><br><span class="line">（2）数组，返回数组元素之间添加逗号合并成的字符串;（逗号也算这个字符串的长度）</span><br><span class="line">（3）函数，返回函数的定义式的字符串;</span><br><span class="line">（4）日期对象，返回一个可读的日期和时间字符串;（返回时期字符串）</span><br><span class="line">（5）正则，返回其字面量表达式构成的字符串;</span><br><span class="line"> (6) HTML节点：返回 [object HTMLBodyElement]</span><br><span class="line"></span><br><span class="line">valueOf:</span><br><span class="line">（1）日期对象，返回自1970年1月1日到现在的毫秒数;（返回数值）</span><br><span class="line">（2）其它均返回对象本身;</span><br></pre></td></tr></table></figure></li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><strong>其他数据类型转换为基本数据类型的boolean string number</strong></p><h4 id="强制转换（显式转换）"><a href="#强制转换（显式转换）" class="headerlink" title="强制转换（显式转换）"></a>强制转换（显式转换）</h4><ol><li><p>其他数据类型到Boolean类型转换<br> 通过Boolean() 函数转换<br> 除了0 null undefined “” NaN转换为false之外。其余的都转换为true.</p><pre><code>【Boolean   true      false】 String      非空字符串   &quot;&quot; Number      任何非0     0和NaN Object      任何对象    null Undefined   n/a         undefined   (n/a not applicable 不适用)</code></pre><p> 例如：</p><pre><code>Boolean(&quot;&quot;);        //falseBoolean(0);         //falseBoolean(NaN);       //falseBoolean(null)       //falseBoolean(undefined)  //falseBoolean(&quot;briup&quot;);   //trueBoolean(1);         //true</code></pre></li><li><p>其他数据类型到数值类型转换</p><ol><li><p><strong>Number()</strong><br>1) 如果转换的值是null,undefined,boolean,number</p><pre><code>Number(undefined);  //NaN *Number(true);       //1Number(false);      //0Number(null);       //0Number(10);         //10 如果是数字值,原样输出</code></pre><p>2) 如果是字符串：</p><pre><code>Number(&quot;&quot;);     //空字符串被转换为0Number(&quot;123&quot;);  //如果仅包含数值，转换为对应的数值Number(&quot;234.1&quot;);//解析为对应的小数Number(&quot;+12.1&quot;);// 12.1 首位为符号位，其余为为数值，转换为对应的数值Number(&quot;-12.1&quot;); //-12.1Number(&quot;1+2.3&quot;);//NaN 符号位出现在非首位位置，解析为NaN *Number(&quot;123ac&quot;);//包含其他字符： NaN *Number(&quot;123/&quot;);//包含其他字符： NaN *Number(&quot;0xa&quot;);  //如果仅包含十六进制格式，转为为对应的十进制的值Number(&quot;010&quot;);  //【注意！】不会当做八进制被解析，结果为10Number(&quot; 12&quot;);  //12Number(&quot;1 2&quot;);  //NaN 非首位出现特殊字符(符号位和空格)转换为NaN *</code></pre><p><strong>总结</strong>：</p><pre><code>1.转换为NaN的三种情况      undefined      当字符串里 符号位和空格出现在非首位的位置      当字符串 包含其他字符时（包括英文字符和特殊字符/$&amp;*等）2.其余的字符串类型都可以转换为数值，并且不解析字符串形式的八进制，忽略前导0直接进行输出；但是解析字符串的十六进制，会进行转换然后输出3.符号位出现在首位的位置的字符串类型，是可以变成正数和负数的数值</code></pre></li><li><p><strong>parseInt()</strong><br>1) 如果转换的值是null,undefined,boolean,number</p><pre><code>parseInt(true);     //NaN *parseInt(false);    //NaN *parseInt(null);     //NaN *parseInt(undefined);//NaN *parseInt(10);       //10 如果是整数值，原样输出parseInt(10.3);     //10 如果是小数，舍去小数点一级后面的内容parseInt(0);    //0</code></pre><p>2) 如果是字符串：</p><pre><code>parseInt(&quot;&quot;);     //NaN；空字符串被转换为NaN *parseInt(&quot;123&quot;);  //123；如果仅包含数值，转换为对应的数值parseInt(&quot;234.1&quot;);//234；小数点后面的数值省略parseInt(&quot;+12.1&quot;);//12； 首位为符号位，其余为为数值，转换为整数parseInt(&quot;0xa&quot;);  //10； 如果仅包含十六进制(0x开头)格式，转为为对应的十进制的值parseInt(&quot;010&quot;);  //10； 【注意！】不会当做八进制被解析，结果为10parseInt(&quot;1+2.3&quot;);//1;  如果首位为数值，依次向后解析，找到连续的数值，直到遇到第一个非数值的，将之前获取的数值转换为Number返回parseInt(&quot;123ac&quot;);//123;</code></pre><p>3)进制的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var a = parseInt(3, 8)//八进制是0-7</span><br><span class="line">var b = parseInt(3, 2)//二进制只有0 1两个数组成 0-1</span><br><span class="line">var c = parseInt(3, 0)//十进制 0-9</span><br><span class="line">console.log(a);//3</span><br><span class="line">console.log(b);//NaN</span><br><span class="line">console.log(c);//3</span><br><span class="line"></span><br><span class="line">parseInt(&quot;10&quot;);     //返回 10</span><br><span class="line">parseInt(&quot;19&quot;,10);    //返回 19 (1*10 1次方+9**10 0次方)</span><br><span class="line">parseInt(&quot;11&quot;,2);   //返回 3 (1*2 1次方+1*2 0次方)</span><br><span class="line">parseInt(&quot;17&quot;,8);   //返回 15 (8+7)</span><br><span class="line">parseInt(&quot;1f&quot;,16);    //返回 31 (16+15)</span><br><span class="line">parseInt(&quot;010&quot;);    //当做十进制进行解析</span><br><span class="line">parseInt(&quot;0xa&quot;);    //当做十六进制进行解析</span><br></pre></td></tr></table></figure><p>parseInt(string, radix)<br>参数string  必需。要被解析的字符串。<br>参数radix   可选。表示要解析的数字的基数,即所保存数字的进制的值。该值介于 2 ~ 36 之间。<br>  如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。<br>  如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。</p><p><strong>总结</strong>：</p><pre><code>1.转换为NaN的几种情况：            &quot;&quot;   null undefined NaN boolean 以及 不包含数字的任意字符串2.其他包含数字类型的字符串遵循 从前到后解析直到遇到特殊字符的时候就结束解析 并输出当前位置之前所解析的数值3.剩下的字符串类型都可以转换为数值，并且不解析字符串形式的八进制，忽略前导0直接进行输出；但是解析字符串的十六进制，会进行转换然后输出4.符号位出现在首位的位置的字符串，是可以变成正数和负数的数值</code></pre></li><li><p><strong>parseFloat()</strong><br>与parseInt() 类似，特点基本上一致，但是有下面两点不同： </p><pre><code>1.字符串中的第一个小数点是有效的，而第二个小数点则无效其后的内容会被省略2.始终忽略前导0（字符串为八进制和十六进制的都不会进行解析，直接输出）    parseFloat(&quot;22.3.4&quot;)    //22.3    parseFloat(&quot;022.34&quot;);   //22.34</code></pre></li></ol></li><li><p>其他数据类型(这里不包括Object类型)到字符串类型转换</p><ol><li><p><strong>toString()函数</strong></p><p>(1)toString()函数是Object的一个方法，不能被基本数据类型调用，所以当基本数据类型来调用toString()方法来进行字符串数据转换时，<br>(2)浏览器会帮我们进行自动装箱和自动拆箱操作，使我们的基本数据类型能够调用toString()方法<br>(3)自动装箱：是把我们要调用toString()方法的基本数据类型的变量 封装成函数对象，使他能调用Object的toString()<br>(4)自动拆箱：是在进行装箱操作实现调用之后再进行拆箱 即把它从对象转换为原来声明在js中的变量值的默认类型<br>(5)注意：</p><ul><li><p>默认情况下，toString()是以十进制格式返回数值的字符串表示，通过传递参数，可以输入以二进制，八进制，十六进制乃至任意有效进制格式的字符串值</p><pre><code>var num = 10;       数值类型num.toString();              &quot;10&quot;      自动装箱成Number(num)</code></pre><p>   随后进行自动拆箱Number(num)–&gt; num   </p><pre><code>num.toString(2);    &quot;1010&quot; 先把num转换为二进制再调用toString()方法num.toString(8);    &quot;12&quot;   八进制输出num.toString(16);   &quot;a&quot;   十六进制输出</code></pre></li><li><p>所以number和boolean以及string是可以调用toString()方法</p></li><li>但是null ,undefined 没有toString() 方法<pre><code>null.toString()         //报错 TypeError: null has no properties   undefined.toString();   //报错 TypeError: undefined has no properties</code></pre></li></ul></li><li><p><strong>String() 构造函数</strong><br>不管你是什么数据类型的值都会转换成值为本身的一个字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String(null)         &quot;null&quot;</span><br><span class="line">String(true)         &quot;true&quot;</span><br><span class="line">String(12)              &quot;12&quot;</span><br><span class="line">String(undefined);   &quot;undefined&quot;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="自动转换（隐式转换）"><a href="#自动转换（隐式转换）" class="headerlink" title="自动转换（隐式转换）"></a>自动转换（隐式转换）</h4><ol><li>其他数据类型隐式转换为number<pre><code>一元运算符加+     a=+a;一元运算符减-     a=-a;(如果是数值，直接为负号；如果不是，通过Number()转换为数值再变成负号)算术运算符+       当m,n两个数不为String,Object类型的时候，先将m,n转换为Number类型，然后再进行计算算术运算符-       返回值为【数值类型】。无论操作数为任何类型，先将其使用Number()转换器转换为Number类型，然后再计算。算术运算符*      如果有一个操作数不是数值，则先调用Number()将其转换为数值算术运算符/      如果有一个操作数不是数值，则先调用Number()将其转换为数值算术运算符%      如果有一个操作数不是数值，则先调用Number()将其转换为数值</code></pre></li><li>其他数据类型隐式转换为string<pre><code>+&quot;&quot;加空字符串 3+&quot; &quot;=&quot;3&quot;;</code></pre></li><li>其他数据类型隐式转换为boolean<pre><code>!!a;    转换为布尔 !!2=true;</code></pre></li></ol><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><pre><code>01) 一元操作符(都会先转换为 Number())    ++,--,+,-操作符应用任何类型数值都返回一个【数值类型】，先将任意类型的值转换为Number然后进行运算(通过Number()方法进行转换)    1.递增 ++          var a = &quot;11&quot;;        console.log(1+ a++);//12        console.log(1+ ++a);//14        前置：先进行递增或者递减操作，在进行运算        后置：先进行运算 再进行递增或者递减操作        对任意数据类型的操作数都适用，    ****使用前先将其转换为数字(Number())，然后再进行运算,        在应用于对象的时候，优先先调用对象的valueOf方法，以取得一个可供操作的值,如果子类对象仅重写了toString(),调用该方法。    2.递减 --        前置：先进行递增或者递减操作 再进行运算        后置：先进行运算 再递增或者递减操作        对任意数据类型的操作数都适用，使用前先将其转换为数字(Number)，然后再进行运算在应用于对象的时候，先调用对象的valueOf方法，以取得一个可供操作的值,如果子类对象仅重写了toString(),调用该方法。    3.一元加 +        相当于调用Number();        var a = &quot;12&quot;        +a ;            // 12  相当于调用了Number(&quot;12&quot;)    4.一元减 -        将一元减应用于数值时，数值会变成负数。        将一元减应用于非数值时，遵循与一元加操作符相同的规则(转换为Number)，最后将得到的数值转化为负数02) 布尔操作符, 非(NOT)    逻辑非 !    该操作符应用任何类型数值都返回一个【布尔值】。先将任意类型的数值转换为Boolean，然后取反，        !a ==&gt; !Boolean(a)        !null    //true        !0      //true        !&quot;&quot;     //true          !NaN    //true          !false  //true        连用两次逻辑非 ，就可以将任意数据类型转化为Boolean类型，!!a ==&gt; Boolean(a)        !!&quot;&quot;    //false 隐式转换03) 逻辑与 &amp;&amp; (同真才真，有假则假) 也被称为短路运算符    可应用于任意数值。如果有一个操作数不是布尔类型，逻辑与就不一定返回boolean类型    如果第一个是false,则返回第一个数    如果第一个是true,则返回第二个数        var s1 = 8;        var s2 = &quot;briup&quot;;        var s3 = &quot;&quot;;        var result  = s1 &amp;&amp; s2; //briup        var result2 = s3 &amp;&amp; s2; //空字符串04) 逻辑或 ||(有真则真，同假才假)    如果第一个为true,则返回第一个数，    如果第一个为false,则返回第二个数。05) 加性操作符    1. 加法 +        m + n        1) 当m,n不为String,Object类型的时候，先将m,n转换为Number类型，然后再进行计算            true + false;     //1；Number(true)+Number(false);            true + 1;     //2；Number(true) + 1            null + undefined; //NaN；Number(undefined) -&gt; NaN        2) 当m,n有一个为String,无论另一个操作数为何（但不为对象）都要转换为String，然后再进行拼接            &quot;1&quot; + true; // 1true            &quot;1&quot; + undefined;// 1undefined            &quot;1&quot; + 1;    // 11        3) 当m,n 有一个为对象，如果该对象既重写toString,又重写了valueOf方法，先调用valueOf方法获取返回值，将该返回值和另外一个操作数进行运算。如果该对象没有重写valueOf方法，将调用toString方法获取返回值，将该返回值和另外一个操作数进行运算。            var o = {                name:&quot;briup&quot;,                valueOf:function(){                    return &quot;1&quot;;                }            }            o+1;        //11 直接参与运算，然后再根据加法前面两条规则来进行类型转换等，与减法的有对象类型的运算进行对比    2. 减法 -        返回值为【数值类型】。无论操作数为任何类型，先将其使用Number()转换器转换为Number类型，然后再计算。        true - 1;       //0;    1-1        null - true;    //-1 ;  0-1        1 - undefined   //NaN        var o = {            name:&quot;briup&quot;,            valueOf:function(){                return &apos;1&apos;;            }        }        o-1;        //0;    o调用valueOf方法，再根据减法前面的规则进行运算。返回了一个字符串类型  然后把它进行数值类型转换（根据原则是Number()，而不是前面加法的方式）  最后和1进行运算    总结：加性操作符在运算时 遇到其中有一个为引用数据类型的时候会默认调用Object的toString()方法，        当对象中重写了toString()方法时，则调用对象的toString()方法，当对象中重写了valueOf()方法，则调用valueOf()方法。        如果对象既重写了toString()方法，又重写了valueOf()方法，则调用valueOf()方法。        注意 toString()和 valueOf()方法两者写在对象里重写的话 都是以返回值的类型为基准，然后再根据加,减法各自的运算规则进行计算.06) 乘性操作符    返回值为【数值类型】,当操作数为非数值的时候执行自动的类型转化Number()    1. 乘法 *        如果两个数都是数值，执行常规的乘法计算        如果一个操作数是NaN,结果为NaN（0*NaN=NaN）        超过数值范围返回Infinity        如果有一个操作数不是数值，则先调用Number()将其转换为数值。    2. 除法 /        如果一个操作数是NaN,结果为NaN （0/0 ; NaN）        一个非0值除0 Infinity           如果有一个操作数不是数值，则先调用Number()将其转换为数值。        var s1 = 5;        var s2 = 2;        var result = s1/s2;  //2.5    3. 取余 %        如果两个数都是数值，执行常规的取余计算        如果一个操作数是NaN,结果为NaN（任意数%0 ; NaN）        如果有一个操作数不是数值，则先调用Number()将其转换为数值07) 关系操作符    &lt; &gt; &lt;= &gt;= ,返回一个【Boolean】值    1.如果两个操作数是字符串，比较字符串中对应位置的每个字符的字符编码值        &quot;a&quot;&gt;&quot;b&quot; //false        &quot;1&quot;&gt;&quot;a&quot; //false    2.如果一个操作数是数值，将另外一个操作数也转换为数值Number()进行比较        &quot;3&quot;&gt;1;          //true        3&gt;true;         //true 3&gt;Number(true)        3&gt;undefined;    //false Number(undefined)=NaN ;任何数和NaN比较结果都为false    3.如果一个操作数是对象，默认调用toString(),如果对象重写了toString()方法，则调用toString；如果对象重写了valueOf()方法 则调用valueOf()方法；如果两个都重写了，则调用valueOf();        var o = {            name:&quot;briup&quot;,            valueOf:function(){                return &quot;13&quot;;            }        }        o&gt;2     // true ; &quot;13&quot;&gt;2        先调用toString或者valueOf方法，再根据前面的规则进行计算08) 相等操作符,返回【Boolean】（比较内容）    1.相等和不相等 ==, != (先转换在比较)        1.如果两个操作数都为字符串，比较字符序列        2.如果两个操作数都为数值类型，比较值的是否相等        3.如果一个操作数为number类型，另外一个操作数为undefined,null,boolean,string之一，先将这些数据类型转换为数值，再进行比较            var a=3;            var b=&quot;4&quot;;            a==b//false        4.如果两个操作数都是对象，比较是的对象的引用地址        5.null == undefined         //true    undefined 派生自null        6.NaN与任何值（包括NaN）相等比较结果为false，不等结果为true.    2.全等和不全等(比较类型和内容)        仅比较不转换，先比较两个数所属的数据类型，如果类型不同则不同，如果类型相同，再继续比较两个数的值        console.log(&quot;55&quot; == 55); true        console.log(&quot;55&quot; === 55);false    null与undefined是相等不全等的：        null == undifined;      //true null派生自undifined        null === undifined;     //false        0 === -0 //true09) 三目运算符 ? :     variable = boolean_expression ? true_value : false_value;    如果boolean_expression为true,将true_value赋给variable，否则将false_value赋给variable    例如：求任意两个数之间最大值       function max(m,n){            return m&gt;n?m:n; //如果m&gt;n为true返回m,如果m&gt;n为false,返回n       }10) 赋值运算符 =    将右侧的值赋给左侧的变量   可以和其他算术运算符连用 *= %= += -= 等   var a = 4;   a *= 3; //=&gt; a = a*3;11) 逗号操作符   可以在一条语句中执行多个操作   var num1=1,num2 = 2, num3 = 3;</code></pre><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>1.流程控制语句(先填框架再写代码)</p><ul><li>if语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(condition)&#123;</span><br><span class="line">    statement1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    statement2;</span><br><span class="line">&#125;</span><br><span class="line">condition表示任意表达式，该表达式求值的结果不一定是布尔类型，如果不是布尔类型，ECMAScript会调用Boolean() 转换函数将这个表达式结果转换为一个布尔类型，如果condition求值结果为true,执行statement1。如果求值结果为false，执行statement2</span><br><span class="line"></span><br><span class="line">if(condition)&#123;</span><br><span class="line">    statement1;</span><br><span class="line">&#125;</span><br><span class="line">statement2;(此语句必然会执行)</span><br></pre></td></tr></table></figure></li></ul><ul><li>switch语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  switch(expression)&#123;</span><br><span class="line">      case val:</span><br><span class="line"></span><br><span class="line">          break;</span><br><span class="line">      case val2:</span><br><span class="line"></span><br><span class="line">          break;</span><br><span class="line">      default:</span><br><span class="line">  &#125;</span><br><span class="line">  ==&gt;</span><br><span class="line">  switch(expression)&#123;</span><br><span class="line">      case val:&#123;</span><br><span class="line"></span><br><span class="line">          break;</span><br><span class="line">      &#125;</span><br><span class="line">      case val2:&#123;</span><br><span class="line">          break;</span><br><span class="line">      &#125;</span><br><span class="line">      default:</span><br><span class="line">  &#125;</span><br><span class="line">可以在switch语句中使用任何数据类型。</span><br><span class="line">case的值不一定是常量，也可以是变量，甚至是表达式。</span><br><span class="line"></span><br><span class="line">expression === val（两者比较的是全等）</span><br><span class="line">default:语句放在最后可以不加break;但是不放在最后需要加break;</span><br><span class="line"></span><br><span class="line">break 跳出循环执行下一条语句</span><br><span class="line">continue 跳出当前循环 执行下一次循环</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>循环语句 </p><ul><li><p>for语句<br>(1)for循环是一种前测试循环语句，但它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力。以下是for循环的语法：<br>初始化表达式，控制表达式，循环后表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(initialization;expression;post-loop-expression)&#123;</span><br><span class="line">    //loop option</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)三要素：<br>   初始条件<br>   结束条件(循环执行条件)<br>   迭代条件</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i=9;i&lt;=5;i++)&#123;</span><br><span class="line">    //循环体</span><br><span class="line">    console.log();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0;</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">    sum +=i;</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); //10  </span><br><span class="line"></span><br><span class="line">ECMAScript不存在块级作用域，在循环内部定义的变量i也可以在外部访问到</span><br><span class="line">    </span><br><span class="line">死循环</span><br><span class="line">    1)for(;;)&#123;</span><br><span class="line">        //当for中的表达式省略的时候，会创建一个死循环</span><br><span class="line">    &#125;</span><br><span class="line">    2)while(true)&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while语句 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var i=1; </span><br><span class="line">do&#123;</span><br><span class="line">    </span><br><span class="line">&#125;while(condition);</span><br></pre></td></tr></table></figure><p>   后测试循环语句，即只有在循环体中的代码执行之后，才会测试出口条件。循环体内的代码最少被执行一次。</p></li><li><p>while语句<br>   开始条件<br>   结束条件<br>   迭代条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var i=1;    </span><br><span class="line">while(结束条件)&#123;</span><br><span class="line">    迭代条件</span><br><span class="line">&#125;</span><br><span class="line">前测试循环语句，即在循环体内的代码被执行之前，就会对出口条件求值。因此，循环体内的代码有可能永远不会被执行。</span><br><span class="line">while(false)&#123;</span><br><span class="line">    //不会执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for-in 语句（for循环增强）<br>   是一种精准的迭代语句，可以用来枚举对象的属性</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(property in expression)&#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   例如:</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">打印出window对象中所有的属性</span><br><span class="line">    for(var propName in window)&#123;</span><br><span class="line">        console.log(propName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="对象实例"><a href="#对象实例" class="headerlink" title="对象实例"></a>对象实例</h2><ol><li><p>创建对象的方式：</p><ul><li><p>对象字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;</span><br><span class="line">    name:&quot;ls&quot;,</span><br><span class="line">    &quot;first-name&quot;:&quot;zs&quot;,//当属性名包括特殊字符时必须用引号</span><br><span class="line">    age:12,</span><br><span class="line">    valueOf:function()&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用Object()构函创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj=new Object();</span><br><span class="line">obj.name=&quot;zs&quot;;</span><br><span class="line">obj.age=12;</span><br><span class="line">delete obj.age;</span><br><span class="line">console.log(obj);</span><br></pre></td></tr></table></figure></li><li><p>封装一个普通函数(工厂模式)</p></li><li>自定义的构造函数创建对象</li></ul></li><li><p>访问属性</p><ul><li>.语法<br>obj.name;</li><li>[]语法 方括号内部必须是一个字符串，也可以是一个类型是字符串的变量<br>obj[“name”];</li><li>把属性存放在变量内部，再通过方括号访问<br>var name=”name”;<br>obj[name];</li></ul></li><li><p>删除属性：delete关键字<br>   delete obj.name;<br>   只能删除对象的自有属性，不能删除继承属性<br>   销毁对象时，遍历对象的属性，依次删除属性，防止内存泄漏</p></li><li><p>检测属性：判断属性是否属于一个对象<br> 1)in:判断属性是否是一个对象的自有属性或者继承属性</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;name&quot; in obj);//true</span><br><span class="line">console.log(&quot;constructor&quot; in obj);//true</span><br></pre></td></tr></table></figure><p> 2)hasOwnProperty():判断属性是否是一个对象的自有属性</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(obj.hasOwnProperty(&quot;name&quot;));//true</span><br><span class="line">console.log(obj.hasOwnProperty(&quot;constructor&quot;));//false</span><br></pre></td></tr></table></figure><p> 3)propertyIsEnumerable():检测给定属性是否是对象的自有属性，并且属性是可枚举的；</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(obj.propertyIsEnumerable(&quot;toString&quot;));//false</span><br></pre></td></tr></table></figure></li><li><p>遍历对象for-in<br> 函数中的属性名不会当做变量被解析。只会是字符串常量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj=&#123;</span><br><span class="line">    name:&quot;ls&quot;,</span><br><span class="line">    age:12</span><br><span class="line">&#125;;</span><br><span class="line">for(var key in obj1)&#123;</span><br><span class="line">    console.log(key,obj1[key]); //用逗号分隔，打印的是字符串 以及 相应的属性值的类型  []能解析变量</span><br><span class="line">    // console.log(key+&quot; &quot;+obj1[key]);用+进行字符串拼接 结果是字符串之间的拼接</span><br><span class="line"> &#125;</span><br><span class="line">key是字符串类型的变量,代表的是每次遍历从obj中获取的属性名</span><br></pre></td></tr></table></figure></li><li><p>对象序列化(JSON):轻量型的数据传输的格式</p><p> 1)所有的属性都必须用引号引起来的，方便前端中内存的数据传递给后台（前后台之间的交流方式）<br> 2)将对象转换为字符串 JSON.stringify()</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var json =JSON.stringify(obj);//字符串 &#123;&quot;name&quot;:&quot;sds&quot;,&quot;age&quot;:13&#125;</span><br></pre></td></tr></table></figure><p> 3)字符串转换成对象 JSON.parse()</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var json2=&apos;&#123;&quot;name&quot;:&quot;sds&quot;,&quot;age&quot;:13&#125;&apos;;</span><br><span class="line">var obj2=JSON.parse(json2);</span><br></pre></td></tr></table></figure></li><li><p>对象的高级特性<br> 1)Object.defineProperty(对象，对象的属性，对象属性的一些相关特性);<br> 用来设置对象某个属性的特性值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj,&quot;weight&quot;,&#123;</span><br><span class="line">    value:&quot;80kg&quot;, //这个属性的值</span><br><span class="line">    enumerable:false,//是否可枚举，不能被遍历出来</span><br><span class="line">    writable:false //是否可写或可修改</span><br><span class="line">    configurable:是否可两次定义配置等</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 2)Object.defineProperties(对象，要设置的属性集合);<br> 用来设置对象某些属性的特性值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperties(obj,&#123;</span><br><span class="line">    gender:&#123;</span><br><span class="line">        value:&quot;male&quot;,</span><br><span class="line">        enumerable:true</span><br><span class="line">    &#125;,</span><br><span class="line">    height:&#123;</span><br><span class="line">        value:175,</span><br><span class="line">        enumerable:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 3)Object.getOwnPropertyDescriptor(obj,”属性”);用来检测某对象的某个属性的一些特性值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.getOwnPropertyDescriptor(arr,&quot;length&quot;));//writable属性为true 所以数组的长度是可变的</span><br></pre></td></tr></table></figure></li><li><p>Object对象常用的属性和方法<br> Object 类型所具有的任何属性和方法也同样存在于其他对象中，任何对象继承于Object对象。<br> Object(通常放在原型中)中常用的方法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">constructor:      //保存用户创建当前对象的函数</span><br><span class="line">hasOwnProperty(propertyName); //检查给定的属性名是否是对象的自有属性，</span><br><span class="line">toString();     //返回对象的字符串表示</span><br><span class="line">valueOf();      //返回对象的字符串，数值，布尔值的表示。</span><br><span class="line">propertyIsEnumerable(propertyName); //检查给定的属性在当前对象实例中是否存在</span><br><span class="line">isPrototypeOf(object);    //检查传入的对象是否是原型</span><br><span class="line">toLocaleString();     //返回对象的字符串表示，该字符串与执行环境的地区对应</span><br></pre></td></tr></table></figure></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数实例"><a href="#函数实例" class="headerlink" title="函数实例"></a>函数实例</h3><ol><li><p>声明<br> 1）函数声明（函数字面量）<br>   执行代码前会先提升函数声明并加载函数声明，<br>   函数声明不管在哪个地方都是有效的，只要在使用foo之前没有改变foo的值，访问foo时为function，若是改变了foo的值则使用foo则会变为改变后的值。</p><pre><code>function sayHello(){    console.log(&quot;hello&quot;);}</code></pre><p> 2）函数表达式 有函数提升，不能把函数调用写在函数声明之前</p><pre><code>// var sayHello=undefined;函数提升变成undefined，不能在给函数赋值前调用，否则会报错。var sayHello=function(){    console.log(&quot;hello&quot;);}</code></pre><p> 3）构造函数Function()</p></li><li><p>函数的调用<br> sayHello(实参列表);<br> sayHello.call(执行环境对象this，实参列表);<br> sayHello.apply(执行环境对象，实参列表数组);</p></li><li><p>函数没有返回值(return)时返回undefined,</p></li><li><p>函数的内部属性arguments和this.特点是只能在函数内部运行<br>(1)arguments类数组对象：函数调用时实际参入函数的实际参数列表，其中有重要的两个属性，length属性和callee属性<br> 通常可以用来计算传入的任意个数之间和差乘除之间的算术运算</p><pre><code>1）length:是指函数调用时实际参入函数的参数个数2）callee:保存的是这个函数 比如下面的函数中arguments.callee就是指add()，通常用来在阶乘中        function add(){            console.log(&quot;asdah&quot;);        }</code></pre><p>(2)this：指向的是函数赖以执行的对象<br>  直接调用函数是指向window<br>  对象调用方法是指向该对象</p></li><li><p>函数的属性和方法：<br> 1)length属性:指的是函数期望传入函数内部的参数，即形参个数，与函数内部arguments.length区分开<br> 2)call()方法：第一个参数是 this指向，第二个是参数列表<br> 3)apply()方法：第一个参数是 this指向，第二个是数组形式的参数列表</p></li><li><p>函数的运用<br> 函数可以作为参数使用<br> 函数可以作为函数的返回值</p></li><li><p>函数的高级特性<br> 构造器函数是一种特殊的对象，<br> 每一个函数对象对应一个原型对象（用来储存共享信息）<br> 在声明构造函数的同时会创建一个原型对象，可以用 构造函数.prototype指向这个原型对象，<br> 原型对象默认有一个constructor属性，保存的是这个构造函数<br> 用构造器函数创建的实例对象默认链接到函数的原型对象，<br> 原来是不能用实例对象访问原型对象的，后来可以使用<strong>proto</strong>属性访问原型对象</p></li></ol><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><ol><li>值传递：基本数据类型的传递，传递的是变量的值，在函数内部修改变量是不会改变外部的值<pre><code>var a=&quot;hello&quot;;function test(a){    a=&quot;pig&quot;;    console.log(&quot;hshs&quot;);}test(a);console.log(a);//&quot;hello&quot;</code></pre></li><li>引用传递：引用数据类型的传递，传递的是对象的引用地址，在函数内部修改变量的会修改函数外部的值的。<pre><code>var a={    name:&quot;ls&quot;,    age:12}function test(a){    a.name=&quot;pig&quot;;    console.log(&quot;haha&quot;);}test(a);</code></pre></li></ol><h3 id="undefined的取值情况"><a href="#undefined的取值情况" class="headerlink" title="undefined的取值情况"></a>undefined的取值情况</h3><p>  1)变量声明但未赋值<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a;//var a=undefined，显示声明未undefined类型</span><br><span class="line">console.log(a);//undefined</span><br></pre></td></tr></table></figure></p><p>  2)函数没有返回值时<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">  console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">var result=test();</span><br><span class="line">console.log(result);//undefined</span><br></pre></td></tr></table></figure></p><p>  3)访问对象没有的属性<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var o=&#123;</span><br><span class="line">  name:&quot;ls&quot;,</span><br><span class="line">  age:12</span><br><span class="line">&#125;</span><br><span class="line">console.log(o.gender);//undefined</span><br></pre></td></tr></table></figure></p><h3 id="函数提升和变量提升"><a href="#函数提升和变量提升" class="headerlink" title="函数提升和变量提升"></a>函数提升和变量提升</h3><ol><li><p>函数提升：</p><ul><li><p>函数声明的方式：在函数提升的同时加载函数，比函数表达式强大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test();</span><br><span class="line">function test()&#123;</span><br><span class="line">  console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">提升并加载后：</span><br><span class="line">function test()&#123;</span><br><span class="line">  console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></li><li><p>函数表达式只会把函数提升到最上面，值为undefined.若函数调用写在声明之前会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var test = function()&#123;</span><br><span class="line">  console.log(&quot;pig&quot;);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">提升后：</span><br><span class="line">var test=undefined;//var test;</span><br><span class="line">test=function()&#123;</span><br><span class="line">  console.log(&quot;pig&quot;);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>变量提升：用var 声明的变量会在预解析的时候提升</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b=12;</span><br><span class="line">function test()&#123;</span><br><span class="line">  console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(a);</span><br><span class="line">var a=&quot;pig&quot;;</span><br></pre></td></tr></table></figure><p> 函数提升和变量提升之后：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">  console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">var a;//var a=undefined;</span><br><span class="line">b=12;</span><br><span class="line">console.log(a);//undefined</span><br><span class="line">a=&quot;pig&quot;;</span><br></pre></td></tr></table></figure></li><li><p>预解析时，函数提升在变量提升之前</p></li><li>回调函数：callback()，函数作为函数的参数<br> 好处：该怎么处理获取的数据由调用者本身决定 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//自己封装实现了一个forEach函数</span><br><span class="line">function hander(item,index)&#123;//函数声明，传入的是形参</span><br><span class="line">  console.log(item,index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr=[1,2,3,4,5];</span><br><span class="line">forEach(arr,hander);</span><br><span class="line"></span><br><span class="line">    //封装 遍历数组的函数</span><br><span class="line">function forEach(arr,hander)&#123;</span><br><span class="line">  /*</span><br><span class="line">  for(var key in arr)&#123;</span><br><span class="line">    var item = arr[key];</span><br><span class="line">    hander.call(this,item,key);//实参</span><br><span class="line">  &#125;//key表示下标，此题中输出为字符串形式的下标值</span><br><span class="line">  */</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        var item =arr[i];</span><br><span class="line">        hander.call(this,item,i);//进行函数调用，传入的是实参</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="javaScript面向对象"><a href="#javaScript面向对象" class="headerlink" title="javaScript面向对象"></a>javaScript面向对象</h1><h2 id="封装（封装创建对象的函数）"><a href="#封装（封装创建对象的函数）" class="headerlink" title="封装（封装创建对象的函数）"></a>封装（封装创建对象的函数）</h2><p><strong>构造函数是创建对象的，构造函数首字母大写，普通函数是用来执行代码的</strong></p><ol><li><p>工厂函数模式<br>  封装一个普通函数，实现一个创建对象的函数<br>  只需调用函数传参就可创建一个对象</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function factory (id,name,age)&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        id : id,</span><br><span class="line">        name:name,</span><br><span class="line">        age:age,</span><br><span class="line">        sayName:function()&#123;</span><br><span class="line">            console.log(this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = factory(1,&apos;terry&apos;,12);</span><br><span class="line">var p2 = factory(2,&apos;larry&apos;,13);</span><br><span class="line">console.log(p1.sayName==p2.sayName);//false  内存地址不一样</span><br></pre></td></tr></table></figure><ul><li>数据类型无法细分 不能细分为自定义的一种类型</li><li>每创建一个对象，都要为这个对象初始化它的函数（函数在内存中重复创建）</li><li>如何实现函数复用：把这个函数提取出来，并把这个函数的地址赋值给函数中的函数属性值，但是这种方法不好，当函数比较多时，外部函数都写在外面不好管理。代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function sayName()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function factory (id,name,age)&#123;</span><br><span class="line">return &#123;</span><br><span class="line">    id : id,</span><br><span class="line">    name:name,</span><br><span class="line">    age:age,</span><br><span class="line">    sayName:sayName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p1 = factory(1,&apos;terry&apos;,12);</span><br><span class="line">var p2 = factory(2,&apos;larry&apos;,13);</span><br><span class="line">console.log(p1.sayName==p2.sayName);//true</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造函数模式</p><ul><li>构造函数在定义的时候会默认创建一个原型对象，这个原型是默认的，后期可以更改。<br>//扩展了引用数据类型 函数，对象，数组，正则对象</li><li><p>自定义一种数据类型 ,可以将实例标识为一种特定的类型，而不是直接属于Object（东西）的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person(id,name,age)&#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.sayName=function()&#123;</span><br><span class="line">       console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var stu = new Student(1001,&quot;ls&quot;,12);</span><br><span class="line">console.log(stu);//函数没有返回值 stu为空</span><br></pre></td></tr></table></figure></li><li><p>构造函数一般是通过new关键字调用。 var p1 = new Person(1,’larry’,12);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.解决了类型细分问题(instanceof可以判定对象的所属自定义类型等)</span><br><span class="line">    p1 instanceof Person</span><br><span class="line">    p1 instanceof Object</span><br><span class="line">2.没有解决函数存储的问题(只要是用var声明一个对象时，每一个方法都会被重新在内存中创建一个，除非把函数放在原型中)</span><br><span class="line">每创建一个实例对象就会创建一个函数，不能实现函数复用</span><br><span class="line"></span><br><span class="line">3.构造函数的创建对象步骤：</span><br><span class="line">    1) 创建一个新对象(new 关键字在内存中开辟一块空间 obj)</span><br><span class="line">    2) 将构造函数的作用域赋给新对象（this指向这个新对象obj）</span><br><span class="line">    3) 执行构造函数中的代码(通过构造函数给对象obj初始化)</span><br><span class="line">    4) 返回新对象obj。(并且把它赋值给用 var 声明的变量)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>原型模式与构造函数模式混用</p><ul><li><p>实例对象可以调用构造函数原型中的属性和方法</p></li><li><p>实例对象中定义的变量是实例变量，而原型中定义的变量可以叫公共变量或者类变量。</p></li><li><p>原则：将对象的自定义属性保存在对象中</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">讲对象可以调用的方法保存到构造函数原型中（共享）</span><br><span class="line">function Person(id,name,age)&#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = function()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>属性搜索原则：每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1) 首先从对象实例本身开始查找</span><br><span class="line">2) 如果不在对象实例中，则继续搜索指针指向的原型对象。</span><br></pre></td></tr></table></figure></li><li><p>删除实例属性：当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性(属性或者方法重写)。通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delete操作符可以完全删除实例属性。</span><br><span class="line">    var o=&#123;</span><br><span class="line">      toString:function()&#123;</span><br><span class="line">        return 1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    o.toString();//调用的是O中重写的toString()方法，</span><br></pre></td></tr></table></figure></li><li><p>检测属性：<br> 1)in 操作符，检测属性是否在实例对象或者原型中<br> 2)hasOwnProperty()方法，检测属性是否是在实例对象中</p></li><li><p>原生对象的原型：通过原生对象的原型，不仅可以取得所有默认方法的调用，而且可以定义新方法。可以向修改自定义对象的原型一样修改原生对象的原型，可以随时添加方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.startsWith = function(text)&#123;</span><br><span class="line">  return this.indexOf(text) == 0;</span><br><span class="line">&#125;</span><br><span class="line">var msg = &quot;Hello world&quot;;</span><br><span class="line">alert(msg.startsWith(&quot;Hello&quot;)); //true</span><br></pre></td></tr></table></figure></li><li><p>当原型中的方法较多的时候，可以将这些方法保存到一个对象中，然后将这个对象赋值给构造函数的原型，改变原有的默认原型对象。   这个新建的对象默认constructor指向Object,所以要显式改变它的指向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor:Person,</span><br><span class="line">    sayName:funciton()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    sayAge:function()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p>每次用构造函数创建一个对象时，都会调用一次构造函数并且给对象初始化。</p><h2 id="继承：本质是子构造函数的原型指向父构造函数的实例对象。"><a href="#继承：本质是子构造函数的原型指向父构造函数的实例对象。" class="headerlink" title="继承：本质是子构造函数的原型指向父构造函数的实例对象。"></a>继承：本质是子构造函数的原型指向父构造函数的实例对象。</h2><ul><li><p>是对象会有原型，原型本身也是对象，所有原型又有原型，如此往复构成原型链，直到Object.prototype 到 null结束。</p></li><li><p>定义：抽象，把各个底层相同的，相类似的东西抽象到顶层中，越具体的越在底层，越抽象的越在顶层，实现继承；若想要子构函中的方法不一样，则可以重写实现不一样的方法</p></li><li><p>问题：需不需要继承？<br>子函数的实例有时需要调用父函数原型中的方法，所以需要(继承)。<br>比如 Object.prototype中的toString,valueOf等方法</p></li><li><p>如何实现继承？</p><ol><li><p>默认继承：</p><ul><li><p>所有构造函数定义的时候都会默认创建一个原型对象，（即默认原型）</p></li><li><p>所有函数的默认原型 都是Object的实例，所以可以调用Object.prototype的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(id,name)&#123;</span><br><span class="line">this.id = id;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = function()&#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(1001,&quot;ls&quot;);</span><br><span class="line">p1.sayName();</span><br><span class="line"></span><br><span class="line">p1.toString();//可以调用Object.prototype的toString方法</span><br><span class="line">console.log(Person.prototype instanceof Object);</span><br></pre></td></tr></table></figure><p><img src="/images/web/默认继承.png" alt=""></p></li></ul></li><li><p>自定义继承</p><ul><li><p>属性继承：（经典继承）借用构造函数继承；解决子构造函数的属性继承父构造函数的属性，不必重复写代码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Animal.call(this,id,name);</span><br><span class="line"></span><br><span class="line">function Animal(id,name)&#123;</span><br><span class="line">  this.id = id;</span><br><span class="line">  this.name =name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = function()&#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Dog(id,name,color)&#123;</span><br><span class="line">  // Animal(id,name);进入Animal构函时，构函中的this指向window</span><br><span class="line">  </span><br><span class="line">  Animal.call(this,id,name);//用call调用函数时，Dog构函中的this指向赋值给了new这个新对象，所以call方法中的this就是这个保存的新对象。</span><br><span class="line"></span><br><span class="line">  this.color = color;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype = new Animal();</span><br><span class="line">Dog.prototype.constructor = Dog;</span><br><span class="line">Dog.prototype.sayColor = function()&#123;</span><br><span class="line">  console.log(this.color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法继承</p><p><strong>原型链继承：子构造函数的原型指向父构造函数创建的（实例）对象。（常用）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Animal(id,name)&#123;</span><br><span class="line">  this.id = id;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = function()&#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Dog(id,name,color)&#123;</span><br><span class="line">  this.id = id;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.color = color;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype = new Animal();</span><br><span class="line">Dog.prototype.constructor = Dog;</span><br><span class="line"></span><br><span class="line">Dog.prototype.sayColor = function()&#123;</span><br><span class="line">  console.log(this.color);</span><br><span class="line">&#125;</span><br><span class="line">var d2 = new Dog(1002,&quot;一休&quot;,&quot;yellow&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">解析：</span><br><span class="line">  * Dog.prototype = new Animal();</span><br><span class="line">    这个操作要在创建对象之前做，不然会使创建的对象不能继承原型中的方法</span><br><span class="line">    </span><br><span class="line">  *  Dog.prototype.constructor = Dog;</span><br><span class="line">     要显示修改constructor,使它修改更彻底,如果不改变，那么new Animal这个实例本身没有constructor，会向上找它的原型，那么constructor默认就会是Animal构函。所以要显示修改它</span><br><span class="line"></span><br><span class="line">  * 如果在修改之前先创建了对象，这个对象将不会有原型中的方法，它指向默认原型。</span><br></pre></td></tr></table></figure><p>图片详细地址(高清):<a href="/images/web/1-自定义-原型链继承.png">原型继承</a><br><img src="/images/web/1-自定义-原型链继承.png" alt=""></p></li></ul></li><li><p>组合函数:原型链继承和借用构造函数继承相结合使用</p><ul><li>使用原型链实现对原型属性和方法的继承，而通过借用构造函数实现对实例属性的继承</li><li><p>在自构造函数中 Animal.call(this,id,name);   </p></li><li><p>在创建对象之前 Dog.prototype = new Animal();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function Animal(id,name)&#123;</span><br><span class="line">this.id = id;</span><br><span class="line">this.name =name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = function()&#123;</span><br><span class="line">console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Dog(id,name,color)&#123;</span><br><span class="line">Animal.call(this,id,name);</span><br><span class="line">this.color = color;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype = new Animal();</span><br><span class="line">Dog.prototype.constructor = Dog;</span><br><span class="line">Dog.prototype.sayColor = function()&#123;</span><br><span class="line">console.log(this.color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Bird(id,name,type)&#123;</span><br><span class="line">Animal.call(this,id,name);</span><br><span class="line">this.type = type;</span><br><span class="line">&#125;</span><br><span class="line">Bird.prototype = new Animal();</span><br><span class="line">Bird.prototype.constructor = Bird;</span><br><span class="line">Bird.prototype.sayType = function()&#123;</span><br><span class="line">console.log(this.type);</span><br><span class="line">&#125;</span><br><span class="line">var b1 = new Bird(1001,&quot;yixiu&quot;,&quot;八哥&quot;);</span><br><span class="line">var d1 = new Bird(1001,&quot;bd&quot;,&quot;yellow&quot;);</span><br><span class="line">b1.sayName();</span><br><span class="line">b1.sayType();</span><br><span class="line">d1.sayName();</span><br><span class="line">d1.sayColor();</span><br><span class="line"></span><br><span class="line">解析：</span><br><span class="line">1.把sayName共有的方法抽象出来放到父类Animal构函的原型中，而子类构函Dog和Bird的原型都有自己特有的sayColor和sayType方法。如此实现继承，并且借用构函来减少代码的冗余问题。</span><br><span class="line"></span><br><span class="line">2.确定原型和实例的关系的方法：</span><br><span class="line">    </span><br><span class="line">      (1)原型.isPrototypeOf(instance)；只要是原型链中出现过的原型，都可以说是该原型链所派生的实例的原型</span><br><span class="line"></span><br><span class="line">        console.log(Bird.prototype.isPrototypeOf(b1));</span><br><span class="line">        console.log(Animal.prototype.isPrototypeOf(b1));</span><br><span class="line">        console.log(Object.prototype.isPrototypeOf(b1));</span><br><span class="line"></span><br><span class="line">      (2)instanceof()，判断某个实例是不是某个构造函数的实例，只要是原型链中一条完整原型链里出现的构造函数，那么就是这些出现构造函数都算是这个实例的构函，结果为true。</span><br><span class="line"></span><br><span class="line">        console.log(d1 instanceof Object);</span><br><span class="line">        console.log(d1 instanceof Dog);</span><br><span class="line">        console.log(d1 instanceof Animal);</span><br><span class="line">    </span><br><span class="line">3.构造函数中的方法 由构函创建的实例不能调用</span><br></pre></td></tr></table></figure><p>图片详细地址（高清）：<a href="/images/web/组合.png">组合函数</a><br><img src="/images/web/组合.png" alt=""></p></li></ul></li></ol></li></ul><h1 id="javaScriptAPI学习"><a href="#javaScriptAPI学习" class="headerlink" title="javaScriptAPI学习"></a>javaScriptAPI学习</h1><p>本文记录了本人在大三期间自学javaScript的学习笔记，自学时用到的代码均上传至giuhub。该部分主要介绍的是js一些API,主要是我们开发时能调用的接口。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面学习了面向对象的几个方面，先总体概括一下学习的知识点。</p><ul><li><p>创建对象的封装</p><ol><li><p>工厂模式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function factory(name,age)&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        name:name,</span><br><span class="line">        age:age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var f1 = factory(&quot;ls&quot;,12);</span><br></pre></td></tr></table></figure></li><li><p>构造函数模式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.sayName = function()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&quot;ls&quot;,12);</span><br></pre></td></tr></table></figure></li><li><p>原型模式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName=function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&quot;ls&quot;,12);</span><br><span class="line">var result = p1 instanceof Person;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>继承(原型基础上)</p><ol><li><p>属性继承：借用构造函数继承（经典继承）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Animal(id,name)&#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName=function()&#123;</span><br><span class="line">    cosnole.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Dog(id,name,color)&#123;</span><br><span class="line">    Animal.call(this,id,name);//this指向的是构函创建的内存中的新对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法继承：构造函数的原型</p><pre><code>Dog.prototype = new Animal();Dog.prototype.constructor = Dog;var d = new Dog(1,&quot;tom&quot;,&quot;yellow&quot;);d.sayName();//d可以调用Dog原型中的方法和Animal原型中,Object原型中的方法</code></pre></li><li>属性和方法组合函数</li></ol></li><li><p>API:应用程序编程接口(application programing interface)</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">js:官方API标准（别人写好的构函和构函原型，里面有方法和属性）</span><br><span class="line">java:官方API标准，自定义API</span><br><span class="line">CommonJS(模块化开发)</span><br></pre></td></tr></table></figure></li><li><p>学前的几个问题：</p><ul><li><p>与对象的区别和联系？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">联系：对象和数组都是由逗号分隔，并且最后一个属性后面不用逗号,创建数组和创建对象的方式差不多</span><br><span class="line"></span><br><span class="line">区别：属性名不一样，对象的属性名是自定义的字符串类型，而数组的属性名是从0开始的有序数值列表</span><br><span class="line">对象的访问obj[&quot;name&quot;]和数组的访问arr[0];访问方式都是 对象/数组[属性名]。对象的属性和数组的索引实质是一个意思</span><br></pre></td></tr></table></figure></li><li><p>变量重名问题  后面的覆盖了前面的变量</p></li><li>数组调用时的this指向    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">假设 var arr = [1,&quot;terry&quot;,function()&#123;</span><br><span class="line">    console.log(this.length);</span><br><span class="line">&#125;];</span><br><span class="line">console.log(arr[2]());//length = 3,this --&gt; arr</span><br><span class="line">arr[2]();//跟对象调用一样 arr.2(); 2表示方法名，那么arr就是this的指向。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p><strong>构函,有个原型Array.prototype</strong></p><ul><li>目前学习数组构函原型中的共有方法</li><li>原型中存储着共有的方法供构造函数创建的实例使用</li><li>构造函数的方法不能被实例调用：Array构函中的方法通过Array.调用，而不能实例对象.调用</li><li><p>Array的实例arr可以调用Array.prototype中的方法</p><ol><li><p>实例对象的创建方式<br> (1)用构造函数创建</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();/[]</span><br><span class="line">参数的三种情况： 无参 :相当于空数组[]</span><br><span class="line">                一个整数 : 创建指定长度length的数组，每一个数组的值都是undefined  new Array(20);若为小数报错</span><br><span class="line">                多个值 :创建一个数组并且使用实参进行初始化数组   new Array(1,2,&quot;fff&quot;);</span><br></pre></td></tr></table></figure></code></pre><p> (2)字面量</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2];用逗号分隔，但是最后一个元素的后面不能放逗号</span><br></pre></td></tr></table></figure></code></pre></li><li><p>数组的访问:arr[索引],索引可以超过数组的边界,超过的部分为undefined</p></li><li><p>数组的遍历</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    console.log(i,arr[i]);//为undefined的也会被打印出来</span><br><span class="line">&#125;</span><br><span class="line">2.while()&#123;&#125;</span><br><span class="line"></span><br><span class="line">3.do&#123;&#125;while()</span><br><span class="line">4.for(var key in arr)&#123;</span><br><span class="line">    key ：索引 ; arr[key]:值</span><br><span class="line">    //for in循环中当改变length之后那些为undefined的值不会被打印出来</span><br><span class="line">&#125;</span><br><span class="line">5.数组中的迭代方法：下面的几个方法。</span><br></pre></td></tr></table></figure></li><li><p>数组检测</p><p> 1.Array（构函）可以调用的方法isArray方法，是声明在构造函数中的。</p><pre><code>Array.isArray(arr)判断指定变量是否是数组</code></pre><p> 2.instanceof方法 检测实例对象是否是某构函创建的实例 arr instanceof Array;</p></li><li><p>数组的属性</p><pre><code>length 长度（数组中拥有元素的个数）    length 可读可写(可以改变)    arr.length = 4;</code></pre></li><li><p>数组对象可以调用的方法（数组原型中的方法）</p><pre><code>var arr = new Array();1.数组序列化（数组转换为字符串）：分隔符不管是几个单词组成都占1个长度；为undefined的项不会被序列化为字符串    1)toString() 默认的将数组项用逗号分隔         var arr = [1,2,5,0];        arr[7] = &quot;terry&quot;;        console.log(arr.toString(),&quot;length:&quot;+arr.length);//1,2,5,0,,,,terry  length:8    2)join() 传参之后可以自定义分隔项，以你定义的参数为准        var arr = [1,2,5,0];        arr[7] = &quot;terry&quot;;        console.log(arr.join(&apos;ss&apos;),&quot;length:&quot;+arr.length);//1ss2ss5ss0ssssssssterry length:82.栈: 先进后出(改变原数组)    1)入栈push()        功能：可接受任意类型的参数，将他们逐个添加到数组尾部，并返回数组长度        参数 ：可多个        返回值：返回新数组长度             var arr = [1,2,3];            console.log(arr.push(&quot;larry&quot;,1));//5    2)弹栈pop()        功能：从数组的末尾移除最后一项，减少数组的长度，并返回这个移除的项        参数：无        返回值：返回移除项            var arr = [&quot;larry&quot;,&quot;teerr&quot;,&quot;jack&quot;];            var result =arr.pop(); // result为方法的返回值            console.log(&quot;result:&quot;,result);//jack            console.log(&quot;arr:&quot;,arr);//[&quot;larry&quot;,&quot;teerr&quot;]3.队列：(改变原数组)    1)入队unshift        功能：在数组最添加任意项，并且返回新数组的长度        参数：任意个        返回值：返回新数组长度            var arr = [1,true,null];            var result = arr.unshift(&quot;larry&quot;);            console.log(&quot;result:&quot;,result);//4            console.log(&quot;arr:&quot;,arr);//[&quot;larry&quot;,1,true,null]    2)出队shift        功能：移除数组中的第一项，减少数组长度，并且返回移除项的值        参数：无        返回值：返回移除项            var arr = [&quot;larry&quot;,1,true,null];            var result = arr.shift();            console.log(&quot;result:&quot;,result);//larry            console.log(&quot;arr:&quot;,arr);//[1,true,null]4.排序    1)翻转reverse():改变原数组            功能：翻转数组项            参数：无            返回值：返回了翻转后的新数组                var arr = [1,2,3,4];                console.log(&quot;before:&quot;,arr);//[1,2,3,4]                var result = arr.reverse();                console.log(&quot;after:&quot;,arr);//[4,3,2,1]                console.log(&quot;返回值:&quot;,result);//[4,3,2,1]    2)排序sort():        默认排序：方法会调用每个数组项的toString()方法 把每项转换成字符串，然后按照字符编码表的顺序排序        自定义排序：方法可以接受一个比较函数作为参数，比较函数有两个参数                a.如果第一个参数位于第二个参数之前，返回负数                b.如果第一个参数位于第二个参数之后，返回正数             1.降序            if(a&gt;b){                return -1;//降序            }else if(a&lt;b){                return 1;            }else{                return 0;            }                2.升序            if(a&gt;b){                return 1;//升序            }else if(a&lt;b){                return -1;            }else{                return 0;            }5.截取方法        1.concat()：不改变原数组            功能：数组拼接，先创建当前数组的副本，然后将接收到的数组添加到副本的末尾，返回拼接后的副本            参数：一个或者多个数组或者一部分参数列表            返回值：返回拼接后数组                var arr1 = [1,2,3];                var arr2 = [4,5,6];                console.log(&quot;before:&quot;,arr1,arr2);                var result = arr1.concat(arr2);                console.log(&quot;before:&quot;,arr1,arr2);                console.log(&quot;result:&quot;,result);//[1,2,3,4,5,6]        2.slice():不改变原数组            功能：数组切割，可接受一个或两个参数（起始位置，结束位置），返回数组切割后的子字符串            参数：当一个参数时，从该参数指定位置开始到当前数组的末尾的所有项；                当两个参数时，表示起始到结束位置之间的项，不包括结束位置的项。            返回值：返回切割后的子字符串                var arr = [1,2,3,4,5,6,7,8,9];                console.log(&quot;after:&quot;,arr);                var result1 = arr.slice(5);// [6,7,8,9]                var result2 = arr.slice(2,4);//[3,4]                console.log(&quot;after:&quot;,arr);                console.log(&quot;result:&quot;,result);        3.splice():改变原数组            功能：向数组中部插入数据将始终返回一个数组。该返回数组中包含从原始数组中删除的项            参数：                删除：指定两个参数（删除的起始位置，要删除的个数）                插入：指定三个参数（起始位置，0，插入的任意数量的项）                替换：指定三个参数（起始位置，要删除的项，要插入的任意数量的项）            返回值：从原始数组中删除的项/截取的子字符串（第二种参数情况返回0）6.索引方法:查找元素的索引        1.indexOf()：返回索引            功能：从数组开头向后查找，使用全等操作符，找不到该元素返回-1。            参数：第一个参数为要查找的项（元素），第二个参数（可选）为查找索引的开始位置（把-1看成最后一项算）                    第二个参数可为正负数，                            正数表示从前从后找到索引位置，再进行从前从后算元素所在索引位置；                            负数表示从后往前找到索引所在位置，再进行从前从后算元素所在索引位置。            返回值：元素对应的索引        2.lastIndexOf()            功能：从数组末尾向前查找，使用全等操作符，找不到该元素返回-1。            参数：第一个参数为要查找的项（元素），第二个参数（可选）为索引开始位置（查找的索引开始位置）                 第二个参数可为正负数，                            正数表示从前从后找到开始索引位置，再进行从后往前算元素所在索引位置；                            负数表示从后往前找到开始索引所在位置，再进行从后往前算元素所在索引位置。            返回值：元素对应的索引7.迭代方法(底层代码是循环语句) 每次循环遍历后调用一次匿名函数</code></pre><p> ????????????????1.forEach() </p><pre><code>功能：对数组中的每一项运行给定的函数，没有返回值，常用于遍历元素参数：回调函数返回值：无arr.forEach(function(item,index,arr){    //item 项  index:下标 arr:当前正在遍历的数组})var arr = &apos;12434&apos;.split(&quot;&quot;);    arr.forEach(function(item,index,arr){        // +arr[index];        arr[index]+1;})??????????</code></pre></li></ol></li></ul><pre><code>2.map():不改变原数组    功能：对数组的每一项运行给定的函数，返回值为每次调用函数结果的新数组.对数组复制一份然后对这个复制的数组进行函数运算，再返回复制的改变后的数组    参数：回调函数         map(function(item,index,arr){            return item;        })    返回值：返回调用回调函数后组成的新数组3.filter()：过滤    功能：对数组中的每一项运行给定的函数，会返回满足该函数的项组成的数组    参数：匿名函数    返回值：返回值是true的 组成的新数组        var result = arr.filter(function(item,index,arr){            return item&lt;2;//布尔表达式        });        console.log(result); // [11, 5, 23, 7, 4, 9]4.some()：一些(或)    功能：对数组中的每一运行给定的函数，如果该函数对任一项都返回true,则返回true      参数：匿名函数    返回值：返回布尔值true或者false.        var result = arr.every(function(item,index,arr){            return item &lt;2;        });        console.log(result); //true,5.every()：每一(并)    功能：对数组中的每一运行给定的函数，如果该函数对每一项都返回true,则该函数返回true    参数： 每一项上运行的匿名函数；运行该函数的作用域对象（可选）    返回值：返回值：返回布尔值true或者false.        var arr = [11,5,23,7,4,1,9,1];        var result = arr.every(function(item,index,arr){            return item &lt;2;        });        console.log(result); //false</code></pre><h2 id="Function-函数的构造函数"><a href="#Function-函数的构造函数" class="headerlink" title="Function:函数的构造函数"></a>Function:函数的构造函数</h2><pre><code>##函数    1.在js中，使用Function可以实例化函数对象，也就是说在js中函数与普通对象一样，也是一个对象类型。    2.函数是对象，就可以使用对象的动态特性    3.函数是对象，就有构造函数创建函数    3.函数是函数，可以创建其他对象    4.函数是唯一可以限定变量作用域的结果    5.要解决的问题      * Function如何使用      * Function与函数的关系      * 函数的原型链结构###函数(普通函数和构造函数)是 Function的实例    1.语法    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Function(arg0,arg1,arg2,arg3,...argn,body);</span><br></pre></td></tr></table></figure>    2.Function中的参数全部都是字符串    3.该构造函数参数的作用是将参数连接起来组成函数      * 如果参数只有一个，表示函数体      * 如果参数有多个，那么最后一个表示函数体，前面的所有参数表示函数的参数      * 如果没有参数，表示创建一个空函数            <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//只带一个参数的情况</span><br><span class="line">// 传统的函数 </span><br><span class="line">  function foo()&#123;</span><br><span class="line">    console.log(&quot;你好&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //Function构函</span><br><span class="line">  var fuc=new Function(&apos;console.log(&quot;你好&quot;);&apos;);</span><br><span class="line">  foo();</span><br><span class="line">  fuc();</span><br><span class="line">  //功能是一样的</span><br></pre></td></tr></table></figure>            <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//没有任何参数的</span><br><span class="line">var foo=new Function();</span><br></pre></td></tr></table></figure>            <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//带有参数的</span><br><span class="line">var foo=new Function(&quot;num&quot;,&quot;console.log(num)&quot;;);</span><br></pre></td></tr></table></figure>4.例题：写一个函数，实现输出三个数中的最大数    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">传统实现方法</span><br><span class="line">   function sum( a , b , c )&#123;</span><br><span class="line">    var reg = a 大于 b ? a : b;</span><br><span class="line">    reg = reg 大于 c ? reg : c;</span><br><span class="line">    return reg;</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(sum(123,234,4));</span><br><span class="line">用Function构函实现</span><br><span class="line">   var sum=new Function(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;var reg = a &gt; b ? a : b;reg = reg &gt; c ? reg : c;return reg;&quot;)</span><br><span class="line">   console.log(sum(123,234,4));</span><br></pre></td></tr></table></figure></code></pre><h2 id="RegExp正则表达式：是一个描述字符模式的对象"><a href="#RegExp正则表达式：是一个描述字符模式的对象" class="headerlink" title="RegExp正则表达式：是一个描述字符模式的对象"></a>RegExp正则表达式：是一个描述字符模式的对象</h2><pre><code>* 网站：hackerrank.com(做题)和regexr.com(查询)* RegExp()构造函数，由构函创建的实例可以调用RegExp.prototype原型中的方法。    1. 创建        1）构造函数创建：        var pattern = new RegExp(&quot;正则表达式&quot;,&quot;修饰符&quot;);          var pattern = new RegExp(&quot;hello&quot;,&quot;gi&quot;);        console.log(pattern);//   /hello/gi        2）正则字面量：        var pattern =/正则/修饰符;        var pattern = /hello/gi;         console.log(pattern);//  /hello/gi（正则表达式）            &amp;修饰符：不是出现在两条斜线之间，而是出现在第二条斜线之后的。                i   ignoreCase 不区分大小写                g   global      全局检索，找到所有的匹配，而不是找到第一个之后就停止                m   multiline   多行                    eg: /java/im 这个模式可以匹配不区分大小写和多行里的java    2.(实例原型)属性        *lastIndex:下一次匹配的开始位置,是正则表达式的属性。        如果模式带有修饰符g时，这个属性存储在整个字符串中下一次检索的开始位置。            var str = &quot;javascript is good ,it is easy than ja&quot;;            var pattern3 =/java/g;            var result = pattern3.exec(str);            console.log(result); //[&quot;java&quot;]            console.log(pattern3); //java/gi            console.log(pattern3.lastIndex); //(第一次匹配java后，下一次匹配的开始位置) 4            var result = pattern3.exec(str);            console.log(result); // null            console.log(pattern3); //java/gi            console.log(pattern3.lastIndex);//0        *source :正则表达式的文本 ，是一个只读字符串            var pattern = /hello/gi;            console.log(pattern.source); //hello是正则的文本        *global :布尔值，表明这个正则表达式是否带有g修饰符            console.log(pattern.global);//true        *ignoreCase：布尔值，表明这个正则表达式是否带有i修饰符            console.log(pattern.ignoreCase);//true        *multiline:布尔值，表明这个正则表达式是否带有m修饰符            console.log(pattern.multiline);//false    3.模式（正则实例对象）的方法(在RegExp.prototype中的方法)        RegExp 原型中的方法，是js提供的，实例可以调用        * 模式.方法(字符串);        1) test(str) ：测试            作用： 测试传入的参数是否匹配正则            参数： 待检测的字符串            返回值：boolean,如果匹配返回true,否则返回false                var pattern = /hello/i;                var res = pattern.test(&quot;dgh hello fd&quot;);                console.log(res);//true        2) exec(str) ：查找            （全局匹配时每次调用都会修改一次模式 pattern的lastIndex），需要循环调用            作用： 执行检索操作            参数： 待检测的字符串            返回值:                 *数组，数组中第一项保存的是匹配到的文本，后面的项保存的是子表达式（子类()），                *[整体匹配的内容,第一项分组匹配的内容，第二项分组...]                *每次调用此方法匹配的文本都不是同一个，index值是不一样的。                    1.返回数组的属性：                        数组.index  数组中匹配字符串出现的起始位置                        数组.input  原字符串内容                    2.实例对象pattern会被影响                    如果是全局检索，会维护lastIndex，用来标识下一次检索开始的位置。                    3.如果没有匹配到任何结果，将lastIndex重置为0,返回值结果为null.                        var str = &quot;javascript is good ,it is easy than ja&quot;;                        var pattern3 =/java/g;                        //如果不加g修饰符，则每次循环查找到的子字符串都是一样的，并且找到第一个就停止查找。                        var res;                        while(res = pattern3.exec(str)){//当pattern3.exec(str)为null时不会进入while循环                            console.log(res);                            console.log(pattern3.lastIndex);                        }                        //当循环结束后在查看lastIndex,他们的值都为0;因为pettern3是同一个对象        3)toString() :将正则转换为字符串            var res = pattern.toString();            console.log(res);//  &apos;/^\d{3,}/g&apos;    4.字符串的方法（字符串对正则的支持）        * 字符串.方法(模式)；        1)match()方法            与exec()方法类似                功能：检索                参数：正则表达式                返回值：                    * 当正则不用g修饰符时，返回值是一个 第一项为查找的子字符串，后面的项为子类（子表达式）组成的数组，和exec()方法返回值一样。                    * 但是当正则用g修饰符时，返回值为查找到的所有匹配的项组成的数组（子模式（子表达式）的内容不会出现）            console.log(&apos;1 pius 2 equals 3&apos;.match(/\d+/));            //不加g跟exec返回值差不多,也有input和Index属性            //[&quot;1&quot;,...(子串) index: 0, input: &quot;1 pius 2 equals 3&quot;]            console.log(&apos;1 pius 2 equals 3&apos;.match(/\d+/g));//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]        2)serach() 查找并返回索引            功能：                * 不支持全局检索，它会忽略修饰符g。                * 在遇到第一个匹配的子串时就会返回它的起始位置;遍历完所有，找不到就会返回-1。                * 如果参数不是正则表达式，则首先会通过RegExp构函将它转换为正则表达式。            参数：一个正则表达式或者其他字符串。            返回值：索引，返回第一个与之匹配的子串的起始位置，如果找不到将返回-1.                console.log(&apos;javascript&apos;.search(/script/i));//4                console.log(&apos;javascript&apos;.search(&apos;script&apos;));//4        3)replace() 检索并替换            功能：                * 对调用它的字符串进行检索并替换，使用指定模式来匹配，不会对原文本进行改变                * 如果正则表达式设置了g,则进行全局检索并替换;如果没有g,则只替换第一个被找到的子串。                * 如果第一个参数不为正则表达式，则将直接搜索这个字符串，而不是像search一样转换为正则。            参数：第一个参数是正则表达式，第二个参数是要进行替换的字符串            返回值：返回替换之后的文本。                var txt = &apos;javascript is good,java is more&apos;;                var res = txt.replace(/java/gi,&apos;Java&apos;);                var res1 = txt.replace(&apos;java&apos;,&apos;Java&apos;);                console.log(res);  //Javascript is good,Java is more                console.log(res1); //Javascript is good,java is more 只找到第一个字符串并替换。                console.log(txt); //javascript is good,java is more不改变原值        4)split():            功能：将调用它的字符串拆分为数组，分隔符是split的参数            参数：分隔符            返回值：数组                var res = &apos;1.2.3.4.5&apos;.split(/\./g);//将字符串按照你给的参数进行字符串分割                console.log(res);//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]    2. 正则表达式的匹配        1) 字符直接量（只能匹配一个）            abc 字符串            .   所有字符            \.  匹配特殊字符&apos;.&apos;            \w  [a-zA-Z0-9_]            \W  [^a-zA-Z0-9_]            \s  [\n\t\f\r]            \S  [^\n\t\f\r]            \d  [0-9]            \D  [^0-9]            要匹配其他的直接量等只需加转义符\        2) 字符类：将直接量字符单独放在方括号内就组成了一个字符类（只能匹配一个）            [a-z]            [0-9]            [a|b]            [abcd] 匹配包含a|b|c|d其中一个的一个字符        3) 数量（默认是贪婪匹配的）            字符/字符/分组{数量}            {n}            {n,m}            {n,}            ? 匹配0-1次 {0,1}            * 匹配0-多次 {0,}            + 匹配1-多次 {1,}        4) 贪婪匹配（默认）与非贪婪匹配            非贪婪匹配只需在表示数量的后面加?            {数量}?            /\d+?/gi 匹配一次        5) 边界匹配            ^ 开始边界： ^abc    如果用在字符类[]内，表示非            $ 结束边界  \w$            (?=p) 零宽正向先行断言，要求接下来的字符都与p匹配                /[jJ]ava([Ss]cript)?(?=\:)/                可以匹配&quot;javascript:the defined duide&quot;                不能匹配&quot;java in a nutshell&quot;            (?!p) 零宽负向先行断言，要求接下来的字符不与p匹配                /java(?! script)([A-Z]\w*)/                可以匹配带script，也可以不匹配        6) 选择匹配 ：|（或者）            /a|b|c|d|e|f/            /[a-f]/        7) 分组 ：()            1.把单独项组成子表达式，以便可以像处理一个独立单元一样用? * 等对单元项进行处理                var pattern = /Java(script)?/gi; //可以匹配java/javascript            2.在完整的模式中定义子模式            3.允许在同一正则表达式后部引用前面的子表达式,通过\数字调用前面的子表达式        8) 引用 ：\数字            对正则表达式中前一个表达式的引用            var pattern = /[&apos;&quot;][^&apos;&quot;]*[&apos;&quot;]/g;            var pattern = /([&apos;&quot;])[^&apos;&quot;]/gi;//使用引用,引用的是第一个子类</code></pre><h2 id="包装器数据类型-String-Boolean-Number"><a href="#包装器数据类型-String-Boolean-Number" class="headerlink" title="包装器数据类型:String  Boolean  Number"></a>包装器数据类型:String  Boolean  Number</h2><pre><code>*为了便于操作基本数据类型，ECMAScript提供了三个特殊的引用类型String Boolean Number。每当读取一个基本数据类型值的时候，后台就会创建一个对应的基本包装类型对象，从而可以使我们调用这些对象的原型的方法实现一些操作。*后台自动完成的操作 eg: var s = &quot;briup;     s.substring(2);     自动完成三个步骤：        a.创建String类型的一个实例        b.在实例上调用指定的方法        c.销毁这个实例* object() 构函会像工厂方法一些，它会根据传入的值的类型返回相应基本包装器类型的实例    var obj1 = new Object();//不传参的时候默认是Object的实例（东西）    console.log(obj1 instanceof Object);//true    var obj2 = new Object(&quot;briup&quot;);//传参时就会根据参数的类型创建相应的包装器实例对象，可以调用相应构函的原型的方法    console.log(obj2 instanceof String);//true    console.log(obj2 instanceof Object);//true    var obj3 = new Object(12);    console.log(obj3 instanceof Number);//true*使用new调用基本包装类型的构造函数创建实例对象和直接调用同名的构造转换函数不一样    var a = 123;    var c =Number(a);//直接调用构造函数进行数据类型转换 number类型    var b = new Number(123);//用new 来调用构造函数创建实例对象 Object类型    console.log(a==b);//true    console.log(a===b);//false    console.log(a===c);//true    console.log(typeof a);//number    console.log(typeof b);//object    console.log(typeof c);//number    console.log(b instanceof Number);//true* 基本包装数据类型：不包括null和undefined    1.Boolean    2.Number        不建议直接使用这两种包装器类型    3.String类型        * var str = &apos;hello&apos;;        // 根据自动完成操作，str会是String的一个实例，String.prototype定义的方法 str实例都可以调用        * 与数组中的属性和方法联系起来        1)属性:(String.prototype中的)            length:获取给定字符串的字符长度        2)方法:(String.prototype中的)            * charAt(i) （英译:在哪个下标的字符）             返回给定位置的字符            * charCodeAt() 返回给定位置的字符的字符编码(ASCII)                例如:                var s = &quot;helloworld&quot;;                s.charAt(1);       //e                s.charCodeAt(1); //101            * indexOf(英译:谁的下标)            从前往后查找指定字符所在位置,与数组方法类似，可以传两个参            * lastIndexOf();  从后往前查找字符串所在位置，可以有第二个参数，代表从符串中哪个位置开始查找。与数组方法类似            * concat() ：不改变原有的字符串            将一个或多个字符串拼接起来，返回拼接得到的新字符串，但是大多使用&quot;+&quot;拼接            * slice() :不改变原有的字符串            截取字符串（开始位置，结束位置），第二个参数不给时则截取到最后位置。            * substring()：不改变原有的字符串            截取字符串（开始位置，结束位置）第二个参数不给时则截取到最后位置。            * substr() ：截取字符串（开始位置，返回字符个数）,跟数组中splice有不一样的，substr必须给两个参数                var s = &quot;helloworld&quot;;                s.slice(3,7);    //lowo                s.substr(3,7);   //loworld                s.substring(3,7);//lowo                s.substring(3);//loworld            * trim() :不改变原字符串            删除前置以及后置中的所有空格（最左和最右的空格，不会去掉中间的），返回结果                var str = &quot; javascript is good &quot;;                var result = str.trim();                console.log(result);//&quot;javascript is good&quot;                console.log(str);//&quot; javascript is good &quot;            * toLowerCase():转换为小写            * toUpperCase() :转换为大写                var str = &quot;java&quot;;                var result = str.toUpperCase();                console.log(result);//JAVA                console.log(str);//java        后面四个方法具体参照正则表达式的方法解析(P832页)            * split                在指定的分隔符字符串或者正则表达式处断开，将一个字符串分割为由字符串组成的数组。                参数是分隔符，表示的是将这个字符串按照字符串中有的字符来进行分隔成数组，数组的每项依然的字符串。                    console.log(&apos;1226&apos;.split(&apos;,&apos;));//[&apos;1226&apos;] 字符串中没有逗号，则把整个字符串变成数组唯一项                    console.log(&apos;1236&apos;.split(&apos;&apos;));//[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;6&quot;]            * replace                使用正则表达式执行查找和替换操作，如果第一个参数不是正则而是普通字符串，那么将找到第一个匹配的字符串并替换。            * serach                不支持全局检索，找到符合的第一个就返回它的起始索引，否则就返回-1.            * match                使用正则进行模式匹配，如果不是全局则与exec方法一样，如果是全局那么将返回找到的所有的子串组成的数组。</code></pre><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><pre><code>没有构造函数，只是单纯的对象。包含一些数学函数(方法)和常量(属性)。    属性：        Math.E   数学常数 E        Math.LN10 数学常数 log e(下标) 10==ln10        Math.PI  数学常数 PI    方法：    1)常用方法        1.比较方法            Math.min()  求一组数中的最小值            Math.max()  求一组数中的最大值                Math.min(1,2,19,8,6);   //1        2.将小数值舍入为整数的几个方法：            Math.ceil()  向上舍入            Math.floor() 向下舍入            Math.round() 四舍五入                console.log(Math.ceil(12.41));  //13                console.log(Math.floor(12.41)); //12                console.log(Math.round(12.3));  //12                console.log(Math.round(12.5));  //13        3.随机数            Math.random() 返回大于0小于1的一个随机数    2)其他方法          abs(num)        返回num绝对值        exp(num)        返回Math.E的num次幂        log(num)        返回num的自然对数        pow(num,power)  返回num的power次幂        sqrt(num)       返回num的平方根        scos(x)         返回x的反余弦值        asin(x)         返回x的反正弦值        atan(x)         返回x的反正切值        atan2(y,x)      返回y/x的反正切值        cos(x)          返回x的余弦值        sin(x)          返回x的正弦值        tan(x)          返回x的正切值</code></pre><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><pre><code>1.Date对象，是操作日期和时间的对象。Date对象对日期和时间的操作只能通过方法。2.属性:    无；Date对象对日期和时间的操作只能通过方法。3.创建Date对象(Date()构造函数)  * 不使用new关键字创建    console.log(Date());    consoel.log(typeof Date());  //string        区别：        不使用new 关键字创建的是基本数据类型        用new关键字创建的是date对象，引用数据类型  * 使用new关键字创建    1)new Date() ：返回当前的本地日期和时间        参数：无        返回值： {Date} 返回一个表示本地日期和时间的Date对象。            示例：            var dt = new Date();             consoel.log(typeof new Date()); //object            console.log(dt); // 返回一个表示本地日期和时间的Date对象    2) new Date(milliseconds) ：把毫秒数转换为Date对象        参数：milliseconds {int} ：毫秒数；表示从&apos;1970/01/01 00:00:00&apos;为起点，开始叠加的毫秒数。        注意：起点的时分秒还要加上当前所在的时区，北京时间的时区为东8区，起点时间实际为：&apos;1970/01/01 08:00:00&apos;        返回值：{Date} 返回一个叠加后的Date对象。            示例：            var dt = new Date(1000 * 60 * 1); // 前进1分钟的毫秒数            console.log(dt); // {Date}:1970/01/01 08:01:00            dt = new Date(-1000 * 60 * 1); // 倒退1分钟的毫秒数            console.log(dt); //  {Date}:1970/01/01 07:59:00    3)new Date(dateStr) ：把字符串转换为Date对象        参数： ①dateStr {string} ：可转换为Date对象的字符串(可省略时间)；这里的年月日都是按照写的来算，不按照0开始计算.        字符串的格式主要有两种：            1) yyyy/MM/dd HH:mm:ss （推荐）：若省略时间，返回的Date对象的时间为 00:00:00。            2) yyyy-MM-dd HH:mm:ss ：若省略时间，返回的Date对象的时间为 08:00:00(加上本地时区)。若不省略时间，此字符串在IE中会转换失败!            3)也可以直接传一个由Date()创建的时间字符串进去，可以把它转换为对象                new Date(Date());//get the local time        返回值：{Date} 返回一个转换后的Date对象。            示例：            var dt = new Date(&apos;2014/12/25&apos;); // yyyy/MM/dd            console.log(dt); //  {Date}:2014/12/25 00:00:00            dt = new Date(&apos;2014/12/25 12:00:00&apos;); // yyyy/MM/dd HH:mm:ss            console.log(dt); // {Date}:2014/12/25 12:00:00            dt = new Date(&apos;2014-12-25&apos;); // yyyy-MM-dd            console.log(dt); //  {Date}:2014-12-25 08:00:00 (加上了东8区的时区)            dt = new Date(&apos;2014-12-25 12:00:00&apos;); // yyyy-MM-dd HH:mm:ss (注意：此转换方式在IE中会报错！)            console.log(dt); // {Date}:2014-12-25 12:00:00            var date = new Date(Date());            console.log(date);//Sun Sep 03 2017 09:28:44 GMT+0800 (中国标准时间)    4) new Date(year, month, opt_day, opt_hours, opt_minutes, opt_seconds, opt_milliseconds) ：把年月日、时分秒转换为Date对象        参数：(最少传两个参数，如果参数是一个时，会显示1970/1/1 8:00:00)            ①year {int} ：年份；4位数字。如：1999、2014            ②month {int} ：月份；2位数字。从0开始计算，0表示1月份、11表示12月份。            ③opt_day {int} 可选：号； 2位数字；从1开始计算，1表示1号。            ④opt_hours {int} 可选：时；2位数字；取值0~23。            ⑤opt_minutes {int} 可选：分；2位数字；取值0~59。            ⑥opt_seconds {int} 可选：秒；2未数字；取值0~59。            ⑦opt_milliseconds {int} 可选：毫秒；取值0~999。        返回值：{Date} 返回一个转换后的Date对象。            示例：            var date = new Date(2012);//Thu Jan 01 1970 08:00:02 GMT+0800 (中国标准时间)              var dt = new Date(2014, 11); // 2014年12月(这里输入的月份数字为11)            console.log(dt); //  {Date}:2014/12/01 00:00:00            dt = new Date(2014, 11, 25); // 2014年12月25日            console.log(dt); //  {Date}:2014/12/25 00:00:00            dt = new Date(2014, 11, 25, 15, 30, 40); // 2014年12月25日 15点30分40秒            console.log(dt); //  {Date}:2014/12/25 15:30:40            dt = new Date(2014, 12, 25); // 2014年13月25日(这里输入的月份数字为12，表示第13个月，跳转到第二年的1月)            console.log(dt); //  {Date}:2015/01/254. 实例方法(实例对象可以调用的)    Date对象的实例方法主要分为2种形式：本地时间和UTC时间。同一个方法，一般都会有此2种时间格式操作(方法名带UTC的，就是操作UTC时间)，这里主要介绍对本地时间的操作。    3.1 get方法        3.1.1 getFullYear() ：返回Date对象的年份值；4位年份。    *** 3.1.2 getMonth()：返回Date对象的月份值。从0开始，所以真实月份=返回值+1 。        3.1.3 getDate() ：返回Date对象的月份中的日期值；值的范围1~31 。        3.1.4 getHours() ：返回Date对象的小时值。        3.1.5 getMinutes() ：返回Date对象的分钟值。        3.1.6 getSeconds() ：返回Date对象的秒数值。        3.1.7 getMilliseconds() ：返回Date对象的毫秒值。    *** 3.1.8 getDay() ：返回Date对象的一周中的星期值；0为星期天，1为星期一、2为星期二，依此类推        3.1.9 getTime() ：返回Date对象与&apos;1970/01/01 00:00:00&apos;之间的毫秒值(北京时间的时区为东8区，起点时间实际为：&apos;1970/01/01 08:00:00&apos;) 。            示例：            dt.getFullYear(); // 2014：年            dt.getMonth(); // 11：月；实际为12月份(月份从0开始计算)            dt.getDate(); // 25：日            dt.getHours(); //  15：时            dt.getMinutes(); //  30：分            dt.getSeconds(); //  40：秒            dt.getMilliseconds(); //  333：毫秒            dt.getDay(); //  4：星期几的值 :真实星期 = 返回值 +1             dt.getTime(); //  1419492640333 ：返回Date对象与&apos;1970/01/01 00:00:00&apos;之间的毫秒值(北京时间的时区为东8区，起点时间实际为：&apos;1970/01/01 08:00:00&apos;)    3.2 set方法        3.2.1 setFullYear(year, opt_month, opt_date) ：设置Date对象的年份值；4位年份。        3.2.2 setMonth(month, opt_date) ：设置Date对象的月份值。0表示1月，11表示12月。        3.2.3 setDate(date) ：设置Date对象的月份中的日期值；值的范围1~31 。        3.2.4 setHours(hour, opt_min, opt_sec, opt_msec) ：设置Date对象的小时值。        3.2.5 setMinutes(min, opt_sec, opt_msec) ：设置Date对象的分钟值。        3.2.6 setSeconds(sec, opt_msec) ：设置Date对象的秒数值。        3.2.7 setMilliseconds(msec) ：设置Date对象的毫秒值。            示例：            var dt = new Date();            dt.setFullYear(2014); // 2014：年            dt.setMonth(11); // 11：月；实际为12月份(月份从0开始计算)            dt.setDate(25); //  25：日            dt.setHours(15); // 15：时            dt.setMinutes(30); //  30：分            dt.setSeconds(40); //  40：秒            dt.setMilliseconds(333); // 333：毫秒            console.log(dt); // 2014年12月25日 15点30分40秒 333毫秒    3.3 其他方法        3.3.1 toString() ：将Date转换为一个&apos;年月日 时分秒&apos;字符串        3.3.2 toLocaleString() ：将Date转换为一个&apos;年月日 时分秒&apos;的本地格式字符串        3.3.3 toDateString() ：将Date转换为一个&apos;年月日&apos;字符串        3.3.4 toLocaleDateString() ：将Date转换为一个&apos;年月日&apos;的本地格式字符串        3.3.5 toTimeString() ：将Date转换为一个&apos;时分秒&apos;字符串        3.3.6 toLocaleTimeString() ：将Date转换为一个&apos;时分秒&apos;的本地格式字符串        3.3.7 valueOf() ：与getTime()一样， 返回Date对象与&apos;1970/01/01 00:00:00&apos;之间的毫秒值(北京时间的时区为东8区，起点时间实际为：&apos;1970/01/01 08:00:00&apos;)             示例：                var dt = new Date();                console.log(dt.toString()); // = Tue Dec 23 2014 22:56:11 GMT+0800 (中国标准时间) ：将Date转换为一个&apos;年月日 时分秒&apos;字符串                console.log(dt.toLocaleString()); // = 2014年12月23日 下午10:56:11  ：将Date转换为一个&apos;年月日 时分秒&apos;的本地格式字符串                console.log(dt.toDateString()); // = Tue Dec 23 2014 ：将Date转换为一个&apos;年月日&apos;字符串                console.log(dt.toLocaleDateString()); // = 2014年12月23日 ：将Date转换为一个&apos;年月日&apos;的本地格式字符串                console.log(dt.toTimeString()); // = 22:56:11 GMT+0800 (中国标准时间) ：将Date转换为一个&apos;时分秒&apos;字符串                console.log(dt.toLocaleTimeString()); // = 下午10:56:11 ：将Date转换为一个&apos;时分秒&apos;的本地格式字符串                console.log(dt.valueOf()); // = 返回Date对象与&apos;1970/01/01 00:00:00&apos;之间的毫秒值(北京时间的时区为东8区，起点时间实际为：&apos;1970/01/01 08:00:00&apos;)4. 静态方法(构造函数Date()可以调用的)    4.1 Date.now()        说明：返回当前日期和时间的Date对象与&apos;1970/01/01 00:00:00&apos;之间的毫秒值(北京时间的时区为东8区，起点时间实际为：&apos;1970/01/01 08:00:00&apos;)         参数：无        返回值：{int} ：当前时间与起始时间之间的毫秒数。        示例：        console.log(Date.now()); // = 1419431519276    4.2 Date.parse(dateStr)        说明：把字符串转换为Date对象 ，然后返回此Date对象与&apos;1970/01/01 00:00:00&apos;之间的毫秒值(北京时间的时区为东8区，起点时间实际为：&apos;1970/01/01 08:00:00&apos;)        参数：①dateStr {string} ：可转换为Date对象的字符串(可省略时间)；字符串的格式主要有两种：        1) yyyy/MM/dd HH:mm:ss （推荐）：若省略时间，返回的Date对象的时间为 00:00:00。        2) yyyy-MM-dd HH:mm:ss ：若省略时间，返回的Date对象的时间为 08:00:00(加上本地时区)。若不省略时间，此字符串在IE中返回NaN(非数字)!        返回值：{int} 返回转换后的Date对象与起始时间之间的毫秒数。            示例：            console.log(Date.parse(&apos;2014/12/25 12:00:00&apos;)); // = 1419480000000            console.log(Date.parse(&apos;2014-12-25 12:00:00&apos;)); // = 1419480000000  (注意：此转换方式在IE中返回NaN！)</code></pre><ol start="5"><li><p>实际操作<br> 5.1 获取倒计时</p><p> 说明：计算当前时间离目的时间相差多少天时分。</p><pre><code>示例：/*** 返回倒计时* @param dt {Date}：目的Date对象* @return {Strin} ：返回倒计时：X天X时X分*/function getDownTime(dt) {    // 1.获取倒计时    var intervalMsec = dt - Date.now(); // 目的时间减去现在的时间，获取两者相差的毫秒数    var intervalSec = intervalMsec / 1000; // 转换成秒数    var day = parseInt(intervalSec / 3600 / 24); // 天数    var hour = parseInt((intervalSec - day * 24 * 3600) / 3600); // 小时    var min = parseInt((intervalSec - day * 24 * 3600 - hour * 3600) / 60); // 分钟    // 2.若相差的毫秒小于0 ,表示目的时间小于当前时间，这时的取的值都是负的：-X天-时-分，显示时，只显示天数前面为负的就行。    if (intervalMsec &lt; 0) {        hour = 0 - hour;        min = 0 - min;    }    // 3.拼接字符串并返回    var rs = day + &apos;天&apos; + hour + &apos;时&apos; + min + &apos;分&apos;;    return rs;}// 当前时间：2014/12/28 13:26console.log(getDownTime(new Date(&apos;2015/06/01&apos;))); // =154天10时33分console.log(getDownTime(new Date(&apos;2014/01/01&apos;))); // = -361天13时26分</code></pre></li></ol><pre><code>5.3 比较2个Date对象的大小    说明：可以对比2者的与起始时间的毫秒数，来区分大小。    示例：    var dt1 = new Date(&apos;2015/12/01&apos;);    var dt2 = new Date(&apos;2015/12/25&apos;);    console.log(dt1 大于 dt2); // = false</code></pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><pre><code>JSON文件里的格式    对象        {            &quot;name&quot;:&quot;terry&quot;,            &quot;age&quot;:12        }    数组        [&quot;terrt&quot;,12,{            &quot;name&quot;:&quot;terry&quot;        }]JSON文件里的对象和数组在js中的格式    对象        &apos;{            &quot;name&quot;:&quot;terry&quot;,            &quot;age&quot;:12        }&apos;    数组        &apos;[&quot;terrt&quot;,12,{            &quot;name&quot;:&quot;terry&quot;        }]&apos;</code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p><a href="https://yangbo5207.github.io/wutongluo/" target="_blank" rel="noopener">基础进阶系列</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript </tag>
            
            <tag> 语法以及api </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端面试常见知识点</title>
      <link href="/2018/08/10/f-e/"/>
      <url>/2018/08/10/f-e/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前端面试</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>总结出一些经典问题，包括自己遇到过的一些面试问题和参考大佬们可能会提出的面试问题，会不定期更新。</p></li><li><p>面试时需要注意的点：</p><ul><li>注意礼节；</li><li>面试问题的深度和广度根据你的经验或年限有所不一；</li><li>诚信，做人做事是同等的；</li><li>尽人事，听天命。</li></ul></li><li><p>前端开发知识点概要：</p><ul><li><p>HTML &amp;&amp; CSS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对Web标准的理解（结构、表现、行为）、浏览器内核、渲染原理、依赖管理、兼容性</span><br><span class="line">CSS语法、层次关系，常用属性、布局、选择器、权重、盒模型</span><br><span class="line">CSS3、Flexbox、CSS Modules、Document flow、BFC</span><br><span class="line">HTML5（离线 &amp; 存储、Histoy,多媒体、WebGL\SVG\Canvas）</span><br></pre></td></tr></table></figure></li><li><p>javaScript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型及相互转换、运算</span><br><span class="line">对象、函数、继承、闭包、作用域、事件、原型以及原型链、常见正则</span><br><span class="line">JSON、Ajax、DOM、BOM、跨域、异步请求、模块化、同构、算法</span><br><span class="line">ECMAScript6、Nodejs、HTTP网络知识</span><br></pre></td></tr></table></figure></li><li><p>其他扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主流MVVM框架(React\Vue\Angular)</span><br><span class="line">Hybrid App\React Native\Weex、TypeScript、RESTFul</span><br><span class="line">WEB安全、前端工程化、依赖管理、性能优化</span><br><span class="line">团队协作、可维护、易用性、SEO、UED、前端技术选型、快速学习能力等</span><br></pre></td></tr></table></figure></li><li><p>无论工作年限长短，必须知道的知识(摘自大佬<a href="https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md" target="_blank" rel="noopener">前端开发面试题</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。</span><br><span class="line"></span><br><span class="line">- DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。</span><br><span class="line"></span><br><span class="line">- 事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。</span><br><span class="line"></span><br><span class="line">- XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。</span><br><span class="line"></span><br><span class="line">- 严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。</span><br><span class="line"></span><br><span class="line">- 盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型</span><br><span class="line"></span><br><span class="line">- 块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们</span><br><span class="line"></span><br><span class="line">- 浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。</span><br><span class="line"></span><br><span class="line">- HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。</span><br><span class="line"></span><br><span class="line">- JSON —— 作用、用途、设计结构。</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol><li><p>常见的浏览器内核有哪些？</p></li><li><p>介绍一下你对浏览器内核的理解？</p></li><li>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</li><li>Doctype作用？HTML5 为什么只需要写 !DOCTYPE HTML？</li><li>你对HTML语义化的理解？</li><li>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</li><li>HTML5的离线储存（如何使用，工作原理，浏览器对离线储存资源怎么进行管理和加载）</li><li>描述一下 cookies，sessionStorage 和 localStorage 的区别？</li><li>如何实现浏览器内多个标签页之间的通信? (阿里)</li><li><p>webSocket如何兼容低浏览器？(阿里)</p><p>webSocket:<br>  <a href="https://cloud.tencent.com/document/product/214/4150?fromSource=gwzcw.93403.93403.93403" target="_blank" rel="noopener">webSocket机制</a><br>  <a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">阮一峰webSocket教程</a></p></li><li><p>如何在页面上实现一个圆形的可点击区域？</p></li><li><p>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</p></li><li><p>浏览器解析渲染页面过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 使用 HTML 创建文档对象模型（DOM）</span><br><span class="line">- 使用 CSS 创建 CSS 对象模型（CSSOM）</span><br><span class="line">- 基于 DOM 和 CSSOM 执行脚本（Scripts）</span><br><span class="line">- 合并 DOM 和 CSSOM 形成渲染树（Render Tree）</span><br><span class="line">- 使用渲染树布局（Layout）所有元素</span><br><span class="line">- 渲染（Paint）所有元素</span><br></pre></td></tr></table></figure><p>具体请移步本站<a href="https://chenjing123456.github.io/2018/11/07/html%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/" target="_blank" rel="noopener">渲染页面</a><br>大佬博客<a href="http://jinlong.github.io/2017/05/08/optimising-the-front-end-for-the-browser/" target="_blank" rel="noopener">浏览器前端优化</a>,详细介绍每一步以及优化方法。</p></li></ol><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li>CSS的盒子模型(分类和区别)</li><li>CSS选择符有哪些？哪些属性可以继承？</li><li>CSS优先级算法如何计算？</li><li>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</li><li>css的水平垂直居中？</li><li>请解释一下为什么需要清除浮动？清除浮动的方式</li><li>对BFC规范(块级格式化上下文：block formatting context)的理解？</li><li>什么是外边距合并？</li><li>zoom:1的清除浮动原理?</li><li>移动端的布局用过媒体查询吗？</li><li>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</li><li>使用 CSS 预处理器吗？喜欢那个？</li><li>CSS优化、提高性能的方法有哪些？</li><li>全屏滚动的原理是什么？用到了CSS的那些属性？</li><li>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</li><li>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</li><li>你对line-height是如何理解的？</li><li>怎么让Chrome支持小于12px 的文字？</li><li>position:fixed;在android下无效怎么处理？</li><li>overflow: scroll时不能平滑滚动的问题怎么处理？</li><li>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</li><li>什么是CSS 预处理器 / 后处理器？</li><li>rem布局的优缺点, rem,px,vh的区别</li><li>CSS3新特性</li><li>实现左右布局，左边定宽，右边自适应。</li><li>client/offset/scrollHeight解析</li></ol><h2 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h2><ol><li>写javaScript的基本规范？</li><li>js的基本数据类型有哪些？JavaScript有几种类型的值？你能画一下他们的内存图吗？null，undefined 的区别？</li><li>js有哪些内置对象？</li><li>JavaScript原型，原型链 ? 有什么特点？</li><li>怎么理解变量提升和函数提升</li><li>Javascript作用链域?</li><li>如何实现数组的随机排序？</li><li>谈谈This对象的理解。</li><li>什么是闭包（closure），为什么要用它？</li><li>javascript创建对象的几种方式(封装)</li><li>javascript如何实现继承(几种实现方式)？</li><li>什么是window对象? 什么是document对象?</li><li>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</li><li>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</li><li>写一个通用的事件侦听器函数。</li><li>typeof 和 instanceof的区别</li><li>new操作符具体干了什么呢?</li><li>用原生JavaScript的实现过什么功能吗？</li><li>JSON 的了解？</li><li>js延迟加载的方式有哪些？</li><li>Ajax 是什么? 如何创建一个Ajax？Ajax 解决浏览器缓存问题？</li><li>跨域问题，如何解决跨域问题?</li><li>模块化开发怎么做？</li><li>同步和异步的区别?</li><li>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</li><li>JS 怎么实现一个类。怎么实例化这个类</li><li>ECMAScript6 怎么写class么，为什么会出现class这种东西?</li><li>异步加载JS的方式有哪些？</li><li>请介绍一下JS之事件节流？</li><li>给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</li><li>检测浏览器版本版本有哪些方式？</li><li>用js实现千位分隔符?</li><li>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</li><li>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</li><li>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</li><li>如果会用node，知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</li><li>Node.js的适用场景？</li><li>那些操作会造成内存泄漏？怎么解决</li><li>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</li><li>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</li><li>移动端最小触控区域是多大？</li><li>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</li><li>Zepto的点透问题如何解决？</li><li>深拷贝和浅拷贝</li><li>谈一谈你对ECMAScript6的了解？es5和es6的区别</li><li>.call() 和 .apply() 的区别？</li><li>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</li><li>documen.write和 innerHTML的区别</li><li>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</li><li>ES6是如何实现编译成ES5的？</li><li>css-loader的原理？</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>框架问题（vue相关）</li><li>你遇到过比较难的技术问题是？你是如何解决的？</li><li>原来公司工作流程是怎么样的，如何与其他人协作的？如何跨部门合作的？</li><li>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</li><li>页面重构怎么操作？</li><li>列举IE与其他浏览器不一样的特性？</li><li>什么叫优雅降级和渐进增强？怎么写</li><li>WEB应用从服务器主动推送Data到客户端有那些方式？</li><li>对Node的优点和缺点提出了自己的看法？</li><li>是否了解公钥加密和私钥加密</li><li>http状态码有那些？分别代表是什么意思？</li><li>第一次访问页面中时弹出引导，用户关闭引导，之后再次进入页面时不希望出现引导，如何实现？</li><li>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</li><li>对前端安全有什么看法？</li><li>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</li><li><p>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</p></li><li><p>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从输入url到页面展示大概经过下面这些过程：</span><br><span class="line">- DNS域名解析</span><br><span class="line">- 建立TCP连接</span><br><span class="line">- 发送HTTP请求</span><br><span class="line">- 服务器处理请求并返回HTTP响应</span><br><span class="line">- 关闭TCP连接</span><br><span class="line">- 浏览器解析渲染页面</span><br></pre></td></tr></table></figure><p>具体每个流程之间做了什么请移步(<a href="https://chenjing123456.github.io/2018/11/09/url-opeation/" target="_blank" rel="noopener">它们都偷偷做了什么</a>)。</p></li><li><p>你有用过哪些前端性能优化的方法？</p></li><li>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</li><li>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</li><li>平时如何管理你的项目？</li><li><p>说说最近最流行的一些东西吧？常去哪些网站？</p></li><li><p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？</p></li><li>最近在学什么东西？</li><li>你对加班的看法？</li><li>你的优点是什么？缺点是什么？</li><li>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>  <a href="https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md" target="_blank" rel="noopener">FE面试题</a></p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>他</title>
      <link href="/2018/07/27/life/"/>
      <url>/2018/07/27/life/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>不是风动<br>不是幡动<br>你可曾听见<br>那是我的心在动</p></blockquote><p><img src="/images/other/hexo/hello.jpeg" alt="出门"><a id="more"></a></p><p>在同一个初中，第一次见到他的名字，是在学校那种不人道的录取排行榜上，我大略扫了一眼前面几位，他的名字很好听，一如后来见到他人的时候一样，怎么说呢，大概就是仿佛湘琴说的仿佛他在哪里光就在哪里。初一的时候分到一个班，但是，我的学校当时可能刚好间歇性脑抽的病发作了。领导派人去了某著名学校学习体制，回来就进行平行班分班改革。抓阄决定把前些排名的同志均分给哪个班，以至于以后的很长时间里，我一直把抓阄作为是人类最不人道的发明榜首。</p><p>本来以为学校整的这种幺蛾子算完了，谁知在初三的最后几个月进行第二次大规模整改。又重新拆分重组一个实验班，这算是天道好轮回的一种吧？我想上天待我还算不薄。那段日子我坐在他后桌…的后桌，痛并快乐的度过了最后几个月。毕业前几天，我去买了本我们那个年纪比较流行的东西-同学录。算是间接套出了他的理想学校和理想职业，然后我们就在同一个高中了。<br>高中我们同校不同班。去之前据说这个学校很大很大，我觉得挺好的啊，大点好干坏事。但是显然我太年轻了，万万没想到，明明在同一栋教学楼，只不过是不同楼层的不同方位，难道就能大得我和他三年里只见过三次面，而且每次他就是颔首微笑然后走开，微笑就是示意一下我认识你，就这样一直到毕业。</p><p>大学的时候，上了g大，和他学校是隔壁，别问我为啥知道他要去哪个学校，想知道的话总是能知道的。我想，我必须改变现状了，毕竟大学狗们更可怕，毕竟近水楼台先得月。然而，我纯粹就是想知道学校饭菜好吃不，就在开学前几天偶然去逛学校贴吧，然后高能预警就来了。我发现我们学校的软件学院在n市！！在n市！！我那个内心啊，很fuck。真是应了那句js编程语句里那句，世界上最遥远的距离，不是生与死;而是你在if，我在else，都是命。</p><p>我们算认识很久的，几乎没有过联系，有联系也就是每逢过年我会给他发个类似群发的祝福，仅此而已，这个相信心里有过人的帅锅姑凉都懂。但是算起来高中毕业后却还是见过一次面，大一那年暑假，初中的朋友复读一年高中的升学宴，他也在。<br>那天，天气很热。我走下车，抬手扶额遮挡强光。在放下手时毫无征兆的看到几米远的他，还是那副温温和和的模样，坐在后庭院的凳子上。身后是一大片高傲挺拔的竹林，阳光照得他的倒影斑驳，在整个燥热的空气里，我只觉得很清凉之致。</p><p>席间，有朋友问我在哪个学校，他一顿，说了句，那不是在我们医学院隔壁。是啊，隔壁呢！你大概很难猜到，殊不知那么多物是人非里面，多的是你不知道的事。<br>那天散场的时候，他在前面跟他人闲聊，我在队伍最后肆无忌惮的打量着他。以至于他回头时来不及收回目光，毫无预兆的对视了几秒，那时庆幸还好只有几秒，也懊恼只有几秒。毕竟七年了（大一算七年吧），这一眼是以后那么长时间唯一想起来觉得很甜的事。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安逸亦或</title>
      <link href="/2018/06/13/hello-world/"/>
      <url>/2018/06/13/hello-world/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>大学四年<br>有你有我有大家</p></blockquote><p><img src="/images/life/hello/11.jpg" alt="出门"><a id="more"></a><br>因为自身比较喜欢写东西，但又不太适合发在朋友圈里。所以选搭了个博客，希望能更好的记录自己的学习和生活。大学本专业是软件工程，但是很遗憾将近四年的大学生活都没有被记录下来，因为懒。<!-- more -->毕业以后，工作相对轻松，趁闲散下来的时间搞搞文艺人做的事。别问我程序狗为啥有闲散时间，我也不知道。</p><h3 id="校园时光"><a href="#校园时光" class="headerlink" title="校园时光"></a>校园时光</h3><p>在校园待了将近三年，咱校区的破烂程度就不提了，毕竟学校是自己选。古人说镜水楼台先得月我觉得是个正理，就选了他学校的隔壁大学，毕竟大学狗们更可怕。高中的时候不太需要手机，大学快开学的时候才买，无意间逛学校贴吧，发现原来我们学校的软件学院不在g市。当时，怎么说呢，拿后来大学里学的为数不多的语言常识来比喻，仿佛置身你在if而我在else里的这种简单狗血的剧情。</p><p><img src="/images/life/hello/1.jpg" alt="大学"></p><p>我这人比较随性，虽然某些计划被打乱，但是整体是没有偏的。该选的路还在，该走的生活依然走。抱着既来之则安之的心态来到了母校，认识了几个好朋友和性格各异的室友。</p><p>大二的时候选修了一门二学位，当时也没多想，只是希望自己能少点空白来想别的事情。大二学期结束，开始考虑职业选择的问题。家人觉得女孩子从事会计求稳，选择往往比努力困难= =。思考这个问题的时候刚好放暑假，找了个舒服的地方散了散心，在外面晃悠悠了一周，最后还是决定走喜欢的路。</p><p><img src="/images/life/hello/2.jpg" alt="出门"></p><p>大三基本就泡图书馆了，毕竟要选择一个东西做职业，你需要做的准备远远不止一点。这一年发生了很多事情，与世无争则天下莫能与之争这种境界比较难达到，有时候误解和无助往往压得不知所措。后来在操场碰到一个学长，他给了我一个大大的微笑，告诉我要是所有人都能理解你，你该有多平庸。</p><h3 id="大四实习"><a href="#大四实习" class="headerlink" title="大四实习"></a>大四实习</h3><p>大四的时候，去了苏杭两个地方。旅游绝不是体验一个城市的方法，而实习可以。<br>上学期我去了苏州，坐标昆山巴城。整个城市给人的印象就是干净，不管是道路，房屋还是人们。我住的地方后面是蟹城，中间隔着一条流向贯穿整个蟹城的河，每个地方都散发着江南独有的韵味。每到周五傍晚，我和朋友会沿着河骑自行车，去阳澄湖边吹吹风。</p><p><img src="/images/life/hello/4.jpg" alt="出门"></p><p>放法定节假的时候，正好赶上昆山巴城的油纸伞文化节。来巴城这么些天，人最多的时候一个是蟹成熟，还有一个就是这时候了。拖着我可怜的宅室友出门把当天的文化节逛了逛，顺便去看了看以前所谓的深宅院。比较吸引我的就是苏州的房屋建筑。常去的街道河边有栋宅子叫苏宅，每次骑自行车的时候都能路过，门口有两个古式的灯笼。记得刚去巴城的时候，把软件园附近转了一圈，碰到下面这栋建筑，不得不说简直是养老理想型住宅了。</p><p><img src="/images/life/hello/6.jpg" alt="出门"></p><p>快下学期的时候我去了杭州。跟苏州体验不一样，杭州给我的印象是生活气息很足，也许是生活的地方离因为市区不远。刚去的时候正值冬季，大家都在朋友圈发全中国都在下雪。但同事说杭州下雪难，嗯。只能说运气比较好，刚好赶上难得一见的雪。</p><p><img src="/images/life/hello/8.jpg" alt="出门"></p><p>我去的最多的地方是西湖，原因是，我朋友一来杭州我就会顺路带他们去趟西湖。我记得当初面试的时候hr小姐姐问我为什么想来杭州，我的回答是因为西湖，我错了。</p><p><img src="/images/life/hello/9.jpg" alt="出门"></p><p>西湖很大，季节不同，风景迥异。今年五月初，我实习结束准备回学校享受大学最后的日子，大学室友小马考上研究生后就一直闲得生蛋，所以我让她来杭州和我逍遥一周。那是我最后一次去西湖，大概下午三四点的时候。逛累了就偶尔会坐在湖边歇歇，当时坐在我们旁边的有个老爷爷。老人家静静坐在湖边的凳子上看着远方，不知道他在思考什么，也许是…</p><p><img src="/images/life/hello/10.jpg" alt="出门"></p><h3 id="毕业季"><a href="#毕业季" class="headerlink" title="毕业季"></a>毕业季</h3><p>我和小马从杭州回校的时候，其他的室友要不然都在家要不然就在外面工作，所以我们两霸占着六人寝在宿舍为所欲为。早上十点起床是常态，下午买个西瓜窝在一起着电影，傍晚漫步操场谈天说地，空闲时候再改改论文，这种生活持续到大家从全国各地赶回来答辩。小日子过得风生水起，现在想想，以后这样的日子能有几回。</p><p><img src="/images/life/hello/12.jpg" alt="出门"></p><p>大学老师里面我印象最深刻的两位老师一位姓罗，一位姓刘，他们教会我们很多知识，包括生活的道理。罗老师说一件事要坚持三步走战略，首先遵循自己内心做选择；第二坚持自己的选择；最后要保持一颗平常心，对未来不焦虑，对现在不迷茫。很庆幸遇到两位老师，比较幸运的是在毕业做设计时是罗老师我的导师，刘老师是我的答辩导师。嗯，反正我宿舍的狗子马子们都比较羡慕我，因为人好颜好。</p><p>以前总是看学长学姐们离开校园，感触不深。今年轮到自己毕业，说实话一开始是没有感觉的，毕竟在外面将近一年，早有的感觉已经淡了。直到最后答完辩，大家走走散散才意识到是真真的散了，有些人你可能是最后一次见了。</p><p><img src="/images/life/hello/14.jpg" alt="出门"></p><p>我在深圳找到工作之后回学校参加毕业典礼，当时班上留在学校的只剩几个人了。我们班团书拉着我去看毕业晚会，以前我不喜欢看毕业晚会，地小人多太燥。我们班书是个很温暖爱笑的小姐姐，也许是时间点，也许是陪着的人，耳边是梁博的歌，眼眶是湿热的泪，这种时刻是值得珍藏一辈子的。毕业典礼这两天，我们有空就窝在一起看看电视聊聊天，晚饭后就约着一起逛逛校园，直到最后一起去办理毕业的退宿手续。希望再见多少次，我们书依然是那个温暖爱笑的书。</p><p><img src="/images/life/hello/11.jpg" alt="出门"></p><p>再见，虽然短暂三四年，但一切都在持续书写。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
          <category> daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
