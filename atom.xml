<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanr&#39;s Blog</title>
  
  <subtitle>三日的一二事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chensanr.gitee.io/"/>
  <updated>2022-01-25T09:14:59.640Z</updated>
  <id>https://chensanr.gitee.io/</id>
  
  <author>
    <name>Sanr Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Post请求Content-type的几种常见类型</title>
    <link href="https://chensanr.gitee.io/2020/09/14/content-type/"/>
    <id>https://chensanr.gitee.io/2020/09/14/content-type/</id>
    <published>2020-09-14T03:46:28.000Z</published>
    <updated>2022-01-25T09:14:59.640Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>介绍Content-type的作用和使用方法</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>是Http的实体首部字段，用于说明请求或返回的消息主体是用何种方式编码，在request header和response header里都可以有。本文介绍一般跟后台开发时经常会使用到的几种常用content-type类型。</p><h2 id="几个常用类型"><a href="#几个常用类型" class="headerlink" title="几个常用类型"></a>几个常用类型</h2><h3 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h3><ul><li>表现：<br>表单格式，浏览器的原生form表单提交或者返回数据。<br>前台数据的格式：<br><img src="/images/web/website/form1.png" alt="目录"><br>提交数据时传给后台的格式，按照 key1=val1&amp;key2=val2 的方式进行编码，key和val都进行了URL转码。<br><img src="/images/web/website/form.png" alt="目录"></li><li><p>使用：关键是把数据格式转换成key1=val1&amp;key2=val2的形式：<br>方法一：URLSearchParams对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let data = new URLSearchParams();</span><br><span class="line">data.append(&apos;username&apos;, &apos;admin&apos;);</span><br><span class="line">data.append(&apos;password&apos;, &apos;123456&apos;);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    url: &apos;/OAuth/oauth/token&apos;,</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法二：利用qs将参数转换为query参数,<br>引入 qs ，这个库是 axios 里面包含的，不需要再下载了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import qs from &apos;qs&apos;</span><br><span class="line"> axios(&#123;</span><br><span class="line">     method: &apos;post&apos;,</span><br><span class="line">     url: &apos;/api/dtalkLogin&apos;, // 路径</span><br><span class="line">     data: &#123;</span><br><span class="line">         code</span><br><span class="line">     &#125;,</span><br><span class="line">     transformRequest: [function (data) &#123;</span><br><span class="line">         let ret = &apos;&apos;;</span><br><span class="line">         ret = qs.stringify(data);</span><br><span class="line">         return ret;</span><br><span class="line">     &#125;],</span><br><span class="line">     headers: &#123;</span><br><span class="line">         &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 或者：</span><br><span class="line"> var data = &#123;</span><br><span class="line">     username: &quot;admin&quot;,</span><br><span class="line">     password: &quot;123456&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> axios(&#123;</span><br><span class="line">     url: &apos;/OAuth/oauth/token&apos;,</span><br><span class="line">     method: &apos;post&apos;,</span><br><span class="line">     headers: &#123;</span><br><span class="line">         &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">     &#125;,</span><br><span class="line">     data: qs.stringify(data)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><ul><li><p>表现：<br>常见的 POST 数据提交的方式。通常文件上传时，必须让 form 的 enctype 等于这个值。<br>请求头如下：<br>生成了一个 boundary 用于分割不同的字段，<br>然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，<br>消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着是内容描述信息，<br>最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。<br>前台数据的格式：<br><img src="/images/web/website/form-data1.png" alt="目录"><br>提交数据时传给后台的格式如下：<br><img src="/images/web/website/form-data.png" alt="目录"></p></li><li><p>使用：一般用来上传文件，指定传输数据为二进制数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let data = new FormData();</span><br><span class="line">data.append(&apos;file&apos;, fileObj);</span><br><span class="line">data.append(&apos;username&apos;, &apos;admin&apos;);</span><br><span class="line">data.append(&apos;password&apos;, &apos;123456&apos;);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    url: &apos;/XXXX/XXXX&apos;,</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &apos;Content-Type&apos;: &apos;multipart/form-data&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h3><ul><li><p>表现：<br>消息主体是序列化后的 JSON 字符串，可以方便的提交复杂的结构化数据<br>前台数据的格式：<br><img src="/images/web/website/json1.png" alt="目录"><br>提交数据时传给后台的格式如下：<br><img src="/images/web/website/json.png" alt="目录"></p></li><li><p>使用：application/json是Axios默认的Content-Type。它声明了请求体中的数据将会以json字符串的形式发送到后端。<br>在请求的时候，需要将需要传给后台的数据JSON序列化即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url: &apos;/XXXX/XXXX&apos;,</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    //axios默认Content-Type是json,这段可不写</span><br><span class="line">    //headers: &#123;</span><br><span class="line">       // &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">    //&#125;,</span><br><span class="line">    data: JSON.stringify(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="封装使用"><a href="#封装使用" class="headerlink" title="封装使用"></a>封装使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 修改响应数据</span><br><span class="line">axios.defaults.transformRequest = [function (data, headers) &#123;</span><br><span class="line">  // 添加 Authorization 头信息</span><br><span class="line">  // console.log(data)</span><br><span class="line"></span><br><span class="line">  //Object.assign(headers, &#123; &apos;token&apos;: window.localStorage.getItem(&apos;token&apos;) &#125;)</span><br><span class="line"></span><br><span class="line">  if (data === undefined) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  //FormData 格式（文件上传）</span><br><span class="line">  if (data instanceof FormData) &#123;</span><br><span class="line">    headers[&apos;Content-Type&apos;] = &apos;multipart/form-data;charset=UTF-8&apos;</span><br><span class="line">    return data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //emulateJSON自定义参数，没有配置时为json(默认)</span><br><span class="line">  if (!data.emulateJSON) &#123; </span><br><span class="line">    headers[&apos;Content-Type&apos;] = &apos;application/json;charset=UTF-8&apos;</span><br><span class="line">    for (let v in data) &#123;</span><br><span class="line">      data[v] == null ? data[v] = &apos;&apos; : data[v]</span><br><span class="line">    &#125;</span><br><span class="line">    return JSON.stringify(data)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    delete data.emulateJSON</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //emulateJSON为true时，则为表单格式（使用URLSearchParams把参数转化成key1=val1&amp;key2=val2的形式）</span><br><span class="line">  // 处理请求体编码</span><br><span class="line">  headers[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;</span><br><span class="line"></span><br><span class="line">  let params = new URLSearchParams()</span><br><span class="line">  Object.keys(data).forEach(function (key) &#123;</span><br><span class="line">    if (Object.prototype.toString.call(data[key]) === &apos;[object Object]&apos;) &#123;</span><br><span class="line">      for (let [k, v] of Object.entries(data[key])) &#123;</span><br><span class="line">        params.append(`$&#123;key&#125;[$&#123;k&#125;]`, v)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (Array.isArray(data[key])) &#123;</span><br><span class="line">      // 传arr时</span><br><span class="line">      for (let v of data[key]) &#123;</span><br><span class="line">        params.append(key, v)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      params.append(key, data[key] == null ? &apos; &apos; : data[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return params.toString()</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>参考：<a href="http://www.axios-js.com/zh-cn/docs/#axios-patch-url-data-config-1" target="_blank" rel="noopener">axios中文文档|axios中文网</a> , <a href="https://www.jianshu.com/p/ba40da728806" target="_blank" rel="noopener">Content-type的几种常见类型</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;介绍Content-type的作用和使用方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="javaScript" scheme="https://chensanr.gitee.io/categories/Web/javaScript/"/>
    
    
      <category term="content-type" scheme="https://chensanr.gitee.io/tags/content-type/"/>
    
  </entry>
  
  <entry>
    <title>慎独</title>
    <link href="https://chensanr.gitee.io/2020/09/13/index/"/>
    <id>https://chensanr.gitee.io/2020/09/13/index/</id>
    <published>2020-09-12T16:00:00.000Z</published>
    <updated>2022-01-25T09:14:59.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>行到水穷处，坐看云起时</p></blockquote><p><img src="/images/life/daily/life.jpg" alt="出门"><a id="more"></a></p><p>所谓诚其意者，毋自欺也。如恶恶臭，如好好色，此之谓自谦。故君子必慎其独也。</p><p>小人闲居为不善，无所不至，见君子而后厌然。掩其不善，而著其善。人之视己，如见其肺肝然，则何益矣。此谓诚于中，形于外。故君子必慎独也。</p><p>曾子曰，“十目所视，十手所指，其严乎。” 富润屋，德润身，心广体胖，故君子必诚其意。</p><p>诗云：“瞻彼淇奥，菉竹漪漪，有斐君子，如切如磋，如琢如磨，瑟兮僴兮，赫兮咺兮，有斐君子，终不可喧兮，如切如磋，道学也，如琢如磨者，自修也，瑟兮僴兮者，恂栗也，赫兮咺兮者，威仪也，有斐君子，终不可喧兮者，道圣德至善，民之不能忘也。            </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;行到水穷处，坐看云起时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/life/daily/life.jpg&quot; alt=&quot;出门&quot;&gt;
    
    </summary>
    
      <category term="Life" scheme="https://chensanr.gitee.io/categories/Life/"/>
    
      <category term="idea" scheme="https://chensanr.gitee.io/categories/Life/idea/"/>
    
    
      <category term="daily" scheme="https://chensanr.gitee.io/tags/daily/"/>
    
  </entry>
  
  <entry>
    <title>vue项目配置框架</title>
    <link href="https://chensanr.gitee.io/2020/08/26/vue-config/"/>
    <id>https://chensanr.gitee.io/2020/08/26/vue-config/</id>
    <published>2020-08-26T08:42:43.000Z</published>
    <updated>2022-01-25T09:14:59.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>有时候vue单页面项目配置不满足开发需求，需要进行多页面项目配置，多端单页面和多端多页面的项目配置，本文详细介绍了单页，多页面，多端多页等项目配置的方法。</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h2 id="配置项目的前期准备"><a href="#配置项目的前期准备" class="headerlink" title="配置项目的前期准备"></a>配置项目的前期准备</h2><h3 id="知识要点储备"><a href="#知识要点储备" class="headerlink" title="知识要点储备"></a>知识要点储备</h3><p>vue项目的配置主要涉及到node,vue-cli和webpack，建议先阅读一下下面官方的配置文档</p><ul><li><a href="http://nodejs.cn/api/process.html#process_process_env" target="_blank" rel="noopener">node的process模块和fs模块</a></li><li><a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">vue-cli的webpack配置参考</a></li><li><a href="https://webpack.docschina.org/configuration/dev-server/#devserverindex" target="_blank" rel="noopener">webpack配置</a></li></ul><h3 id="配置参数publicPath"><a href="#配置参数publicPath" class="headerlink" title="配置参数publicPath"></a>配置参数publicPath</h3><p>1.publicPath参数：表示布置应用包时的基本url，详情请查阅<a href="https://cli.vuejs.org/zh/config/#publicpath" target="_blank" rel="noopener">publicpath的官方介绍</a><br>这个参数主要出现在两个地方：</p><ul><li>output：资源输出配置项，影响打包资源生成的路径，用于生产环境。设置了该项配置将会为资源添加一个前缀</li><li>devServer：静态资源服务配置项，即生成的静态文件所在的位置，影响资源在本地开发环境的访问，用于开发环境。</li></ul><p>在output里面设置了publicPath以后，若是devServer里面没有设置publicPath，则使用webpack-dev-server 在进行打包时生成的静态文件所在的位置以及引用资源的前缀都是output.publicPath里面设置的值。</p><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">* publicPath设置为空字符串 (‘’) 或是相对路径 (‘./‘)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径</div><p>2.举例：在vue.config.js配置文件设置</p><p>eg1:推荐写法，生产环境配置为相对路径’’,开发环境时devServer和output的publicPath设置为/。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === &apos;production&apos; ? &apos;&apos; : &apos;/&apos;, </span><br><span class="line">    devServer:&#123;</span><br><span class="line">        //不设置时取外面output的publicPath</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包之后的路径可放置任意路径。打包后的文件前缀如下<br><img src="/images/vue/config3.png" alt="目录"><br>在本地环境生成的静态文件所在的位置/，即静态文件都存放在当前域名下<br><img src="/images/vue/config4.png" alt="目录"></p><p>eg2:在本地环境里和html里引入的静态资源都是同一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath:  &apos;/gov/&apos;,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        //不设置时取外面output的publicPath</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/vue/config.png" alt="目录"></p><p>eg3:在本地环境里和html里引入的静态资源不同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: &apos;/outputdist/&apos;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        publicPath: &apos;/dist/&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/vue/config1.png" alt="目录"><br>如此在本地环境/dist/里（访问localhost:9001/dist），会导致html里带有/outputdist/前缀的文件都找不到<br><img src="/images/vue/config2.png" alt="目录"></p><p>参考详解：<br>webpack中的publicPath的用法:<a href="https://juejin.im/post/6844903686632636423" target="_blank" rel="noopener">webpack中的publicPath的用法</a><br>webpack配置文件中publicPath和contentBase:<a href="https://blog.csdn.net/wang839305939/article/details/85855967" target="_blank" rel="noopener">webpack配置文件中publicPath和contentBase</a></p><h3 id="static和assets"><a href="#static和assets" class="headerlink" title="static和assets"></a>static和assets</h3><p>1.static中的文件是不会经过webpack编译的，一般建议存放一些外部第三方（公用）的静态资源文件。<br>2.assets因为会经过webpack编译，建议是存放一些只有组件自己使用到的静态资源。</p><p>详解参考:<a href="http://vuejs-templates.github.io/webpack/static.html" target="_blank" rel="noopener">Static Assets</a></p><h3 id="pages和chunks参数"><a href="#pages和chunks参数" class="headerlink" title="pages和chunks参数"></a>pages和chunks参数</h3><p>1.pages参数，多页面应用配置。详情请参考<a href="https://cli.vuejs.org/zh/config/#pages" target="_blank" rel="noopener">pages的官方介绍</a><br>其值应该是一个对象，对象的 key 是入口的名字，对应的value值有两种情况：</p><ul><li>一个指定了 entry, template, filename, title 和 chunks 的对象</li><li>一个指定其 entry 的字符串</li></ul><p>2.pages的chunks参数</p><ul><li>在vue-cli3中vue.config.js中的pages参数是会编译到webpack的插件html-webpack-plugin的配置中。即pages.chunks就是插件html-webpack-plugin对应的pages.chunks参数。</li><li>插件html-webpack-plugin,会自动帮你生成一个html文件并引用相关的assets文件<br>插件html-webpack-plugin的几个参数：<ul><li>title:生成文件的标题</li><li>filename:生成html文件的文件名</li><li>template:模板文件，生成的html文件是根据这个特定的模板文件生成的</li><li>minify:对html文件压缩</li><li>hash:给生成的js文件独特的hash值</li><li>favicon:给文件生成favicon（路径）</li><li>entry:入口文件</li><li>chunks:针对多入口文件，当你有多个入口时，对应会生成多个编译后的js文件,chunks选项可以决定是否都使用这些生成的js文件。<br><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">* chunks默认会在生成的html文件中引用所有的js文件，当然你可以指定引入哪些特定的文件。例如：有两个入口文件，生成了两个js文件，如果不指定对应的chunks，则每个生成的html文件中会都引入这两个js文件</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">eg:在下文中的多页面配置中设置了如下这种pages配置：</span><br><span class="line">对应的文件引入对应的js和chunk-vendors，chunk-common。</span><br><span class="line">function getPages () &#123;</span><br><span class="line">  let obj = &#123;&#125;</span><br><span class="line">  let &#123; html: &#123; filename: template &#125;, js: &#123; filename: entry &#125; &#125; = getCreateConfig(process.env.selfDirName)</span><br><span class="line">  Object.entries(fileName).forEach(([k, v]) =&gt; &#123;</span><br><span class="line">      obj[k] = &#123;</span><br><span class="line">      entry: entry.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      template: template.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      filename: isProd ? `$&#123;k&#125;.html` : `$&#123;process.env.selfDirName&#125;/$&#123;k&#125;.html`, // process.env.NODE_ENV === &apos;production&apos; ?`$&#123;v&#125;.html`:`$&#123;process.env.selfDirName&#125;/$&#123;v&#125;.html`,</span><br><span class="line">      title: &apos;&apos;,</span><br><span class="line">      favicon: path.join(__dirname, &apos;./public/favicon.ico&apos;),</span><br><span class="line">      chunks: [&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, `$&#123;k&#125;`]</span><br><span class="line">      // multihtmlCache: true</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return obj</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>3.参考:<br>pages.chunks的参数的意义:<a href="https://segmentfault.com/q/1010000016925412/a-1020000016946034" target="_blank" rel="noopener">pages.chunks的参数的意义-Hello_World20的回答</a><br>html-webpack-plugin用法全解:<a href="https://segmentfault.com/a/1190000007294861#articleHeader9" target="_blank" rel="noopener">html-webpack-plugin用法全解</a></p><h2 id="单页面配置"><a href="#单页面配置" class="headerlink" title="单页面配置"></a>单页面配置</h2><p>顾名思义，单页面配置就是我们新建项目时默认建的项目配置，整个项目只有一个页面组成，通过vue-router进行路由配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist&apos;,// 打包时生成的生产环境构建文件的目录</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: &apos;9001&apos;,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//把当前项目的根目录的static备份到打包目录的static目录下面</span><br><span class="line">      config</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: path.resolve(__dirname, &apos;./dist/static&apos;)</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包后生成的dist目录如下：<br>/static的文件和处理后的js和css等被打包到/dist/static<br><img src="/images/vue/config5.png" alt="目录"><br>查看完整代码的地址:<a href="https://github.com/chenjing123456/single-page" target="_blank" rel="noopener">https://github.com/chenjing123456/single-page</a></p><h2 id="多页面配置"><a href="#多页面配置" class="headerlink" title="多页面配置"></a>多页面配置</h2><p>多页面配置中最重要的和单页面不一样的配置就是pages参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist&apos;,// 打包时生成的生产环境构建文件的目录</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  pages:&#123;</span><br><span class="line">    index:&#123;</span><br><span class="line">      entry: path.join(__dirname, `./src/views/index/index.js`),</span><br><span class="line">      template: path.join(__dirname, &apos;./src/views/index/index.html&apos;),</span><br><span class="line">      chunks:[&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, &apos;index&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    login:&#123;</span><br><span class="line">      entry: path.join(__dirname, `./src/views/login/login.js`),</span><br><span class="line">      template: path.join(__dirname, &apos;./src/views/login/index.html&apos;),</span><br><span class="line">      chunks:[&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, &apos;login&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: &apos;9001&apos;,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//把当前项目的根目录的static备份到打包目录的static目录下面</span><br><span class="line">      config</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: path.resolve(__dirname, &apos;./dist/static&apos;)</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果页面很多可以把pages参数单独提出来<br>查看完整代码的地址:<a href="https://github.com/chenjing123456/single-pages" target="_blank" rel="noopener">https://github.com/chenjing123456/single-pages</a></p><h2 id="多端单页面配置"><a href="#多端单页面配置" class="headerlink" title="多端单页面配置"></a>多端单页面配置</h2><p>1.前提：不管是多端单页还是多端多页，获取文件的方式都是一致的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fileName文件对应是文件入口的列表，getPages方法获取的是全部页面的配置，</span><br><span class="line">function getPages () &#123;</span><br><span class="line">  let obj = &#123;&#125;</span><br><span class="line">  let &#123; html: &#123; filename: template &#125;, js: &#123; filename: entry &#125; &#125; = getCreateConfig(process.env.selfDirName)</span><br><span class="line">  Object.entries(fileName).forEach(([k, v]) =&gt; &#123;</span><br><span class="line">    obj[k] = &#123;</span><br><span class="line">      entry: entry.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      template: template.replace(/\$&#123;filename&#125;/g, k),</span><br><span class="line">      filename: isProd ? `$&#123;k&#125;.html` : `$&#123;process.env.selfDirName&#125;/$&#123;k&#125;.html`, // process.env.NODE_ENV === &apos;production&apos; ?`$&#123;v&#125;.html`:`$&#123;process.env.selfDirName&#125;/$&#123;v&#125;.html`,</span><br><span class="line">      title: &apos;&apos;,</span><br><span class="line">      favicon: path.join(__dirname, &apos;./public/favicon.ico&apos;),</span><br><span class="line">      chunks: [&apos;chunk-vendors&apos;, &apos;chunk-common&apos;, `$&#123;k&#125;`]</span><br><span class="line">      // multihtmlCache: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return obj</span><br><span class="line">&#125;</span><br><span class="line">let pages = getPages()</span><br></pre></td></tr></table></figure></p><p>2.多端多页配置跟多端单页配置中的区别</p><ul><li>配置pages如下：若是多端多页则pages拿到全部页面，多端单页pages拿到的是当前环境的页面</li><li>多端单页在创建文件时在create.js是用的是createProj()，而多端单页createProj(pathname)。<div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">多端单页是默认创建了fielName文件中所有的页面文件，而多端指定了一个pathname，指定你需要创建文件的端，再匹配当前端（即fileName[pathname]）里所有的页面文件</div></li></ul><p>3.多页面项目配置，遵循一个页面一个端原则创建文件夹和文件，创建文件的规则写在配置文件夹config里。</p><ul><li>在config/fileName文件 新增一个文件名(相当于新建一个页面文件)</li><li>在根目录创建进程文件，规定当前进程对象(eg:.env.gov .env.govDev)</li><li>在package.json 文件创建script脚本命令，包括启动命令和打包命令 (eg:”vue-cli-service serve –open –mode govDev)</li><li>在config/template创建模板文件</li><li>运行npm run create 或者node ./create/index.js，新建的文件夹和文件即生成</li></ul><p>文件夹config内部是通过fileName指定文件夹和文件名，然后自动生成文件夹以及文件的配置<br>vue.config.js文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === &apos;production&apos; ? &apos;&apos; : &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist/&apos; + process.env.selfDirName, // + process.env.selfDirName,</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  pages:&#123;[process.env.selfDirName]:pages[process.env.selfDirName]&#125;, // 当前运行环境的入口文件的配置，只打包运行当前环境的页面（仅有一个页面）</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, process.env.selfDirName),</span><br><span class="line">    port: process.env.port,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//生产环境把当前项目的根目录的static备份到dist/static目录下面</span><br><span class="line">      let staticPath = &apos;&apos;</span><br><span class="line">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</span><br><span class="line">      config.devtool = &apos;eval-source-map&apos;</span><br><span class="line">      staticPath = path.resolve(__dirname, `./dist/` + `static`)</span><br><span class="line">      // staticPath = path.resolve(__dirname, `./dist/` + process.env.selfDirName + `/static`)</span><br><span class="line">      // config.plugins = [...config.plugins,new BundleAnalyzerPlugin()]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      staticPath = &apos;static&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config</span><br><span class="line">    // .plugin(&apos;harddisk&apos;)</span><br><span class="line">    // .use(HtmlWebpackHarddiskPlugin).end()</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: staticPath</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看完整代码的地址:<a href="https://github.com/chenjing123456/muli-page" target="_blank" rel="noopener">https://github.com/chenjing123456/muli-page</a></p><h2 id="多端多页面配置"><a href="#多端多页面配置" class="headerlink" title="多端多页面配置"></a>多端多页面配置</h2><p>多页面项目配置，遵循一个端多个页面原则创建文件夹和文件，创建文件的规则写在配置文件夹config里。</p><ul><li>在config/fileName文件 新增端和文件名</li><li>在根目录创建进程文件，规定当前进程对象(eg:.env.gov .env.govDev)</li><li>在package.json 文件创建script脚本命令，包括启动命令和打包命令 (eg:”vue-cli-service serve –open –mode govDev)</li><li>在config/template创建模板文件</li><li>运行npm run new gov ，或者可以node createGov.js 创建某个端的多页面文件</li></ul><p>文件夹config内部是通过fileName指定文件夹和文件名，然后自动生成文件夹以及文件的配置<br>vue.config.js文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === &apos;production&apos; ? &apos;&apos; : &apos;/&apos;,</span><br><span class="line">  outputDir: &apos;dist/&apos; + process.env.selfDirName, // + process.env.selfDirName,</span><br><span class="line">  assetsDir: &apos;static&apos;, //打包后的 css、js 等静态文件目录名,相对于outputDir</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === &apos;development&apos;,</span><br><span class="line">  // lintOnSave: true,//取消ESLint 校验</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  pages, //所有页面的配置</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, process.env.selfDirName),</span><br><span class="line">    port: process.env.port,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack(config)&#123;//生产环境把当前项目的根目录的static备份到dist/static目录下面</span><br><span class="line">      let staticPath = &apos;&apos;</span><br><span class="line">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</span><br><span class="line">      config.devtool = &apos;eval-source-map&apos;</span><br><span class="line">      staticPath = path.resolve(__dirname, `./dist/` + `static`)</span><br><span class="line">      // staticPath = path.resolve(__dirname, `./dist/` + process.env.selfDirName + `/static`)</span><br><span class="line">      // config.plugins = [...config.plugins,new BundleAnalyzerPlugin()]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      staticPath = &apos;static&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config</span><br><span class="line">    // .plugin(&apos;harddisk&apos;)</span><br><span class="line">    // .use(HtmlWebpackHarddiskPlugin).end()</span><br><span class="line">      .plugin(&apos;copy&apos;)</span><br><span class="line">      .init((CopyWebpackPlugin) =&gt; new CopyWebpackPlugin([&#123;</span><br><span class="line"></span><br><span class="line">        from: path.resolve(__dirname, &apos;./static&apos;),</span><br><span class="line">        to: staticPath</span><br><span class="line">      &#125;])).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看完整代码的地址:<a href="https://github.com/chenjing123456/muli-pages" target="_blank" rel="noopener">https://github.com/chenjing123456/muli-pages</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;有时候vue单页面项目配置不满足开发需求，需要进行多页面项目配置，多端单页面和多端多页面的项目配置，本文详细介绍了单页，多页面，多端多页等项目配置的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/vue/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://chensanr.gitee.io/categories/Vue/"/>
    
      <category term="config" scheme="https://chensanr.gitee.io/categories/Vue/config/"/>
    
    
      <category term="vue-cli" scheme="https://chensanr.gitee.io/tags/vue-cli/"/>
    
      <category term="node" scheme="https://chensanr.gitee.io/tags/node/"/>
    
      <category term="webpack" scheme="https://chensanr.gitee.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>单位适配</title>
    <link href="https://chensanr.gitee.io/2020/08/15/rem/"/>
    <id>https://chensanr.gitee.io/2020/08/15/rem/</id>
    <published>2020-08-15T02:30:28.000Z</published>
    <updated>2022-01-25T09:14:59.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>介绍rem，vw适配单位以及在项目中常用到的rem适配方法</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h1 id="px、em、rem的区别"><a href="#px、em、rem的区别" class="headerlink" title="px、em、rem的区别"></a>px、em、rem的区别</h1><ul><li>px是固定长度单位，不随其它元素的变化而变化</li><li>em单位的名称为相对长度单位，相对于父级元素的单位，会随父级元素的属性（font-size或其它属性）变化而变化</li><li><p>rem是css3新增的一个相对长度单位，相对于根目录（HTML元素）的，它会随HTML元素的属性（font-size）变化而变化，一般用于自适应布局</p><p>px用的比较广泛一些，可以充当更多属性的单位，而em和rem是字体大小的单位，用于充当font-size属性的单位</p><!-- <div style="color: #909399;background-color: #f4f4f5;padding:4px 10px;border-radius:4px"></div> --><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">一般来说，浏览器默认是：1em = 1rem = 16 px</div></li></ul><h1 id="视口单位-Viewport-units-：vw、vh、vmin、vmax"><a href="#视口单位-Viewport-units-：vw、vh、vmin、vmax" class="headerlink" title="视口单位(Viewport units) ：vw、vh、vmin、vmax"></a>视口单位(Viewport units) ：vw、vh、vmin、vmax</h1><ol><li><p>视口：在桌面端，视口指的是在桌面端，指的是浏览器的可视区域；而在移动端，它涉及3个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。<br>视口单位中的“视口”，桌面端指的是浏览器的可视区域；移动端指的就是Viewport中的Layout Viewport, “视区”所指为浏览器内部的可视区域大小，即window.innerWidth/window.innerHeight大小，不包含任务栏标题栏以及底部工具栏的浏览器区域大小。</p></li><li><p>视口单位主要包括以下4个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vw: 视窗宽度的百分比（1vw 代表视窗的宽度为 1%）</span><br><span class="line">vh：视窗高度的百分比</span><br><span class="line">vmin：当前 vw 和 vh 中较小的一个值</span><br><span class="line">vmax：当前 vw 和 vh 中较大的一个值</span><br></pre></td></tr></table></figure><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">vh and vw：相对于视口的高度和宽度，而不是父元素的（CSS百分比是相对于包含它的最近的父元素的高度和宽度）。1vh 等于1/100的视口高度，1vw 等于1/100的视口宽度。<br>比如：浏览器高度950px，宽度为1920px, 1 vh = 950px/100 = 9.5 px，1vw = 1920px/100 =19.2 px。<br></div><br><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">vmax相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax。<br>vmin相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin。<br>比如：如果宽度设置为800px，高度设置为1080px，1vmin将会等于8px，而1vmax将会是10.8px。<br></div></li><li><p>vw、vh 与 % 百分比的区别<br>% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。<br>vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的。</p></li><li><p>vmin、vmax 用处<br>做移动开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。<br>但是由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。</p></li><li><p>浏览器兼容<br><a href="https://caniuse.com/#feat=viewport-units" target="_blank" rel="noopener">Viewport units: vmin, vmax “兼容列表</a></p></li></ol><h1 id="使用rem适配"><a href="#使用rem适配" class="headerlink" title="使用rem适配"></a>使用rem适配</h1><ul><li><p>pc端，通常使用百分比，flex布局，但是遇到大屏或者需要适配的项目使用rem</p><p> 项目新建文件rem.js:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// 设置 rem 函数，屏幕适配</span><br><span class="line">function setRem() &#123;</span><br><span class="line">  // 320 1rem默认大小16px(1rem = 16px); 320px = 20rem;每个元素px基础上/16</span><br><span class="line">  let htmlWidth = document.documentElement.clientWidth || document.body.clientWidth</span><br><span class="line">  // console.log(htmlWidth);</span><br><span class="line">  // 得到html的Dom元素</span><br><span class="line">  let htmlDom = document.getElementsByTagName(&apos;html&apos;)[0]</span><br><span class="line">  // 设置根元素字体大小 1920表示基准值，就ui设计的尺寸</span><br><span class="line">  htmlDom.style.fontSize = ((100) / (1920 / htmlWidth)) + &apos;px&apos;</span><br><span class="line">&#125;</span><br><span class="line">function screen() &#123;//解决屏幕适配缩放问题</span><br><span class="line">    let width = $(window).width();</span><br><span class="line">    let height = document.body.offsetHeight;</span><br><span class="line">    let scaleX;</span><br><span class="line">    if (height &gt; 1080) &#123;</span><br><span class="line">        scaleX = width / 1915;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        scaleX = width / 1920;</span><br><span class="line">    &#125;</span><br><span class="line">    let scaleFunc = &quot;scale(&quot; + scaleX + &quot;)&quot;;</span><br><span class="line">    $(&apos;body&apos;).css(&#123;</span><br><span class="line">        &quot;transform&quot;: scaleFunc, //缩放比例</span><br><span class="line">        &quot;transform-origin&quot;: &quot;left top&quot;, //缩放基点</span><br><span class="line">        &quot;-ms-transform&quot;: scaleFunc, /* IE 9 */</span><br><span class="line">        &quot;-ms-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;-moz-transform&quot;: scaleFunc, /* Firefox */</span><br><span class="line">        &quot;-moz-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;-webkit-transform&quot;: scaleFunc, /* Safari 和 Chrome */</span><br><span class="line">        &quot;-webkit-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;-o-transform&quot;: scaleFunc, /* Opera */</span><br><span class="line">        &quot;-o-transform-origin&quot;: &quot;left top&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    if (width &gt; 1920) &#123;</span><br><span class="line">        $(&apos;body&apos;).css(&#123;</span><br><span class="line">            &quot;backgroundAttachment&quot;: &quot;fixed&quot;,</span><br><span class="line">            &quot;backgroundSize&quot;: &quot;100% 100%&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">setRem()</span><br><span class="line">if ($(window).width() &gt; 1920 &amp;&amp; $(window).height() &gt; 1080) &#123;</span><br><span class="line">  screen()</span><br><span class="line">&#125;</span><br><span class="line">// 改变窗口大小时重新设置 rem</span><br><span class="line">window.onresize = function() &#123;</span><br><span class="line">  setRem()</span><br><span class="line">  if ($(window).width() &gt; 1920 &amp;&amp; $(window).height() &gt; 1080) &#123;</span><br><span class="line">    screen()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移动端<br>将px转化为rem，适配移动端vant-UI等框架(postcss-pxtorem)<br>1.单页面项目：<br>安装lib-flexible,postcss-pxtorem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible --save</span><br><span class="line">npm install postcss-pxtorem -D 用于将单位转化为 rem</span><br></pre></td></tr></table></figure><p>在main.js中引入lib-flexible：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;lib-flexible/flexible&apos;</span><br></pre></td></tr></table></figure><p>通过meta标签，设置设备宽度以及缩放比例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure><p>配置postcss-pxtorem 在postcss.config.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;</span><br><span class="line">      overrideBrowserslist: [&apos;Android 4.1&apos;, &apos;iOS 7.1&apos;, &apos;Chrome &gt; 31&apos;, &apos;ff &gt; 31&apos;, &apos;ie &gt;= 8&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;postcss-pxtorem&apos;: &#123;</span><br><span class="line">      rootValue: 37.5,//vant-UI的官方根字体大小是37.5</span><br><span class="line">      unitPrecision: 5,</span><br><span class="line">      propList: [&apos;*&apos;, &apos;!font-size&apos;, &apos;!border&apos;],</span><br><span class="line">      propList: [&apos;*&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="color: #409eff;background-color: #ecf5ff;padding:4px 10px;border-radius:4px">rootValue这个配置项, 通常根据ui图尺寸来定这个值。假如ui图尺寸给的宽度是750，我们通常就会把rootValue设置为75，这样我们写样式时，可以直接按照ui图尺寸标注的宽高来1:1还原开发。</div><br><div style="color: #909399;background-color: #f4f4f5;padding:4px 10px;border-radius:4px">但是在此设为37.5，是为了引用vant、mint-ui等第三方UI框架，因为第三方框架没有兼容rem，用的是px单位，将rootValue的值设置为设计图宽度（这里为750px）75的一半，即可以1:1还原vant、mint-ui的组件，否则会样式会有变化，例如按钮会变小。</div><br><div style="color: #f56c6c;background-color: #fef0f0;padding:4px 10px;border-radius:4px">设置成了37.5后，我们在根据ui图设置样式时要将值改为设计图的一半。</div><br>2.多端项目（多页面）<br>在进程文件.env.h5Dev配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = &apos;development&apos;</span><br><span class="line">selfDirName = &apos;h5&apos;</span><br><span class="line">selfAdaption = true //用于配置postcss-pxtorem的对象</span><br><span class="line">port = 9532</span><br></pre></td></tr></table></figure><p>package.json文件 配置h5移动端的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script:&#123;</span><br><span class="line">  &quot;h5Dev&quot;: &quot;vue-cli-service serve --mode h5Dev&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue.config.js文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    sourceMap: !isProd,</span><br><span class="line">    loaderOptions: process.env.selfAdaption ? &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          // px转rem</span><br><span class="line">          require(&apos;postcss-pxtorem&apos;)(&#123;</span><br><span class="line">            rootValue: 37.5,</span><br><span class="line">            unitPrecision: 5,//允许REM单位增长的十进制数字。</span><br><span class="line">            propList: [&apos;*&apos;, &apos;!font-size&apos;, &apos;!border&apos;],//可以从px更改为rem的属性。</span><br><span class="line">            replace: !!isProd,//替换包含rems的规则，而不添加后备</span><br><span class="line">            selectorBlackList: [],//要忽略的选择器，保留为px</span><br><span class="line">            minPixelValue: 12 //设置要替换的最小像素值。</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; : &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考配置：<a href="https://www.jianshu.com/p/220a186cc033" target="_blank" rel="noopener">vue:将px转化为rem，适配移动端vant-UI等框架(postcss-pxtorem)</a></p></li></ul><h1 id="使用vw实现移动端适配"><a href="#使用vw实现移动端适配" class="headerlink" title="使用vw实现移动端适配"></a>使用vw实现移动端适配</h1><ul><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S </span><br><span class="line"></span><br><span class="line">cssnano主要用来压缩和清理CSS代码,在cssnano的配置中，使用了preset: &quot;advanced&quot;，所以我们需要另外安装：</span><br><span class="line">npm i cssnano-preset-advanced --save-dev</span><br></pre></td></tr></table></figure></li><li><p>对新安装的PostCSS插件进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    &quot;plugins&quot;: &#123;</span><br><span class="line">        &quot;postcss-import&quot;: &#123;&#125;,</span><br><span class="line">        &quot;postcss-url&quot;: &#123;&#125;,</span><br><span class="line">        &quot;postcss-aspect-ratio-mini&quot;: &#123;&#125;, 主要用来处理元素容器宽高比</span><br><span class="line">        &quot;postcss-write-svg&quot;: &#123;//主要用来处理移动端1px的解决方案</span><br><span class="line">            utf8: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;postcss-cssnext&quot;: &#123;&#125;,//该插件可以让我们使用CSS未来的特性，其会对这些特性做相关的兼容性处理</span><br><span class="line">        &quot;postcss-px-to-viewport&quot;: &#123;//主要用来把px单位转换为vw、vh、vmin或者vmax这样的视窗单位</span><br><span class="line">            viewportWidth: 750,      // 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span><br><span class="line">            viewportHeight: 1334,    // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line">            unitPrecision: 3,       // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span><br><span class="line">            viewportUnit: &apos;vw&apos;,     // 指定需要转换成的视窗单位，建议使用vw</span><br><span class="line">            selectorBlackList: [&apos;.ignore&apos;, &apos;.hairlines&apos;],  // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">            minPixelValue: 1,       // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值.</span><br><span class="line">            mediaQuery: false       // 允许在媒体查询中转换`px`</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;postcss-viewport-units&quot;:&#123;&#125;,</span><br><span class="line">        &quot;cssnano&quot;: &#123;//用来压缩和清理CSS代码</span><br><span class="line">            preset: &quot;advanced&quot;,</span><br><span class="line">            autoprefixer: false,</span><br><span class="line">            &quot;postcss-zindex&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件的详细配置内容解析查看:<a href="https://www.jianshu.com/p/1f1b23f8348f" target="_blank" rel="noopener">如何在Vue项目中使用vw实现移动端适配</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;介绍rem，vw适配单位以及在项目中常用到的rem适配方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="CSS" scheme="https://chensanr.gitee.io/categories/Web/CSS/"/>
    
    
      <category term="rem" scheme="https://chensanr.gitee.io/tags/rem/"/>
    
      <category term="vw" scheme="https://chensanr.gitee.io/tags/vw/"/>
    
  </entry>
  
  <entry>
    <title>FastClick使用</title>
    <link href="https://chensanr.gitee.io/2020/08/03/fastclick/"/>
    <id>https://chensanr.gitee.io/2020/08/03/fastclick/</id>
    <published>2020-08-03T11:10:28.000Z</published>
    <updated>2022-01-25T09:14:59.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>了解FastClick使用</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>在移动端H5开发过程中，关于点触可能会遇到如下两个问题：</p><ul><li>手动点击与真正触发click事件会存在 300ms 的延迟</li><li>点击穿透问题（点击行为会穿透元素触发非父子关系元素的事件）</li></ul><p>延迟是因为浏览器想知道你是否在进行双击操作；而点击穿透是因为 300ms 延迟触发时的副作用。<br>为了能够立即响应用户的点击事件，才有了FastClick。</p><h2 id="FastClick的使用"><a href="#FastClick的使用" class="headerlink" title="FastClick的使用"></a>FastClick的使用</h2><p>1.安装 npm install fastclick</p><p>2.初始化FastClick实例：<br>在main.js中引入并绑定到body<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import FastClick from &apos;fastclick&apos;</span><br><span class="line">//初始化FastClick实例。在页面的DOM文档加载完成后</span><br><span class="line">FastClick.attach(document.body)</span><br></pre></td></tr></table></figure></p><p>3.使用needsclick过滤特定的元素<br>如果页面上有一些特定的元素不需要使用fastclick来立刻触发点击事件，可以在元素的class上添加needsclick:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;needsclick&quot;&gt;Ignored by FastClick&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>4.不需要使用fastclick的情况</p><ul><li>对PC浏览器不需要FastClick</li><li>Android版Chrome 32+浏览器，如果设置viewport meta的值为width=device-width，这时浏览器会马上发点击事件，不会延迟。</li><li>所有版本的Android Chrome浏览器，如果设置viewport meta的值有user-scalable=no（屏幕不可缩放，双击缩放事件不需要，就不会有300ms的延迟），浏览器会马上发点击事件。</li><li>IE11+浏览器设置了css的属性touch-action: manipulation，它会在某些标签（a，button等）禁止双击事件，IE10的为-ms-touch-action: manipulation</li></ul><p>5.使用过程中存在的bug：</p><p>问题1：当使用FastClick 时，input框在ios上点击输入调取手机自带输入键盘不灵敏，有时候甚至点不出来。而安卓上完全没问题。这个原因是因为FastClick的点击穿透。<br>解决方法：<a href="https://www.jianshu.com/p/0df7a6f48c8a" target="_blank" rel="noopener">vue项目中使用fastclick时ios input点击不灵敏</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 添加Fastclick移除移动端点击延迟</span><br><span class="line">import FastClick from &apos;fastclick&apos;</span><br><span class="line">//FastClick的ios点击穿透解决方案</span><br><span class="line">FastClick.prototype.focus = function (targetElement) &#123;</span><br><span class="line">  var length;</span><br><span class="line"></span><br><span class="line">  var deviceIsWindowsPhone = navigator.userAgent.indexOf(&quot;Windows Phone&quot;) &gt;= 0;</span><br><span class="line">  var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) &amp;&amp; !deviceIsWindowsPhone;  </span><br><span class="line">    //兼容处理:在iOS7中，有一些元素（如date、datetime、month等）在setSelectionRange会出现TypeError    </span><br><span class="line">    //这是因为这些元素并没有selectionStart和selectionEnd的整型数字属性，所以一旦引用就会报错，因此排除这些属性才使用setSelectionRange方法</span><br><span class="line">  if ( deviceIsIOS &amp;&amp; targetElement.setSelectionRange &amp;&amp; targetElement.type.indexOf(&apos;date&apos;) !== 0 &amp;&amp; targetElement.type !== &apos;time&apos; &amp;&amp; targetElement.type !== &apos;month&apos; &amp;&amp; targetElement.type !== &apos;email&apos;) &#123; </span><br><span class="line">    length = targetElement.value.length; </span><br><span class="line">    targetElement.setSelectionRange(length, length);//修复bug ios 11.3不弹出键盘，这里加上聚焦代码，让其强制聚焦弹出键盘    </span><br><span class="line">    targetElement.focus(); </span><br><span class="line">  &#125; else &#123; </span><br><span class="line">    targetElement.focus(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">FastClick.attach(document.body)</span><br></pre></td></tr></table></figure><p>问题2：ios 软键盘关闭后 页面不会回弹<br>解决方法：<a href="https://segmentfault.com/a/1190000018028182?utm_source=tag-newest" target="_blank" rel="noopener">解决IOS中input失焦后，页面上移，点击不了问题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br><span class="line">var flag;</span><br><span class="line">var timer;</span><br><span class="line">var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);</span><br><span class="line">if (isIOS) &#123;</span><br><span class="line">document.body.addEventListener(&apos;focusin&apos;, () =&gt; &#123;  //软键盘弹起事件</span><br><span class="line">    flag = true;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">&#125;)</span><br><span class="line">document.body.addEventListener(&apos;focusout&apos;, () =&gt; &#123; //软键盘关闭事件</span><br><span class="line">    flag = false;</span><br><span class="line">    if (!flag) &#123;</span><br><span class="line">    timer = setTimeout( ()=&gt; &#123;</span><br><span class="line">        window.scrollTo(&#123; top: 0, left: 0, behavior: &quot;smooth&quot; &#125;)//重点  =======当键盘收起的时候让页面回到原始位置(这里的top可以根据你们个人的需求改变，并不一定要回到页面顶部)</span><br><span class="line">    &#125;, 200);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击穿透现象"><a href="#点击穿透现象" class="headerlink" title="点击穿透现象"></a>点击穿透现象</h2><p>例如页面上有A和B元素，B在A上面。在B元素的touchstart事件上注册了一个回调函数，该回调函数的作用是隐藏B元素。我们发现，当我们点击B元素，B元素被隐藏了，随后，A元素触发了click事件。<br>移动端上面，事件执行顺序是：touchstart &gt; touchend &gt; click。而 click 事件有300ms延迟，浏览器触发了click事件，但是此时B元素不见了，所以该事件被派发到了A元素身上。如果A元素是一个链接，那此时页面就会意外地跳转。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;了解FastClick使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="javaScript" scheme="https://chensanr.gitee.io/categories/Web/javaScript/"/>
    
    
      <category term="ECMAScript" scheme="https://chensanr.gitee.io/tags/ECMAScript/"/>
    
      <category term="FastClick" scheme="https://chensanr.gitee.io/tags/FastClick/"/>
    
  </entry>
  
  <entry>
    <title>收集web项目常见的库和网站</title>
    <link href="https://chensanr.gitee.io/2020/07/12/website/"/>
    <id>https://chensanr.gitee.io/2020/07/12/website/</id>
    <published>2020-07-12T09:19:28.000Z</published>
    <updated>2022-01-25T09:14:59.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>介绍一些我在项目中遇到的常用的库，工具和网站</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h1 id="前端开发常用"><a href="#前端开发常用" class="headerlink" title="前端开发常用"></a>前端开发常用</h1><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>开箱即用的跨浏览器 CSS 动画效果<a href="https://animate.style/" target="_blank" rel="noopener">Animate.css</a></li><li>按需定制 CSS 动画效果<a href="https://animista.net/" target="_blank" rel="noopener">animista</a></li><li>CSS 动画效果收集，点击某个效果即可复制相应的代码片段至剪贴板<a href="https://emilkowalski.github.io/css-effects-snippets/" target="_blank" rel="noopener">CSSeffectsSnippets</a></li><li>汇集了实现各种加载效果的 CSS 代码片段<a href="https://tobiasahlin.com/spinkit/" target="_blank" rel="noopener">SpinKit</a></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li>可供免费使用的图片<a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a></li><li>免费图片网站<a href="https://pixabay.com/" target="_blank" rel="noopener">pixabay</a></li><li>免费图片网站<a href="https://www.pexels.com/zh-cn/" target="_blank" rel="noopener">pexels</a></li><li>使用 CC0 许可的免费高分辨率图片和视频<a href="https://isorepublic.com/" target="_blank" rel="noopener">isorepublic</a></li><li>在线图片压缩工具<a href="https://imagecompressor.com/" target="_blank" rel="noopener">imagecompressor</a></li><li>在线图片缩放工具<a href="bulkresizephotos://bulkresizephotos.com/en" target="_blank" rel="noopener">unsplash</a></li></ul><h2 id="插画"><a href="#插画" class="headerlink" title="插画"></a>插画</h2><ul><li>持续更新的精美的插画集<a href="https://undraw.co/illustrations" target="_blank" rel="noopener">undraw</a></li><li>免费插画集<a href="https://www.manypixels.co/gallery/" target="_blank" rel="noopener">manypixels</a></li><li>通过调配渐变色、搭配手绘组件定制插画<a href="https://iradesign.io/gallery/illustrations" target="_blank" rel="noopener">iradesign</a></li><li>免费 SVG 插画<a href="https://lukaszadam.com/illustrations" target="_blank" rel="noopener">lukaszadam</a></li></ul><h2 id="动态效果库"><a href="#动态效果库" class="headerlink" title="动态效果库"></a>动态效果库</h2><ul><li><p>Typed.js<br> 地址：<a href="https://mattboldt.com/demos/typed-js/" target="_blank" rel="noopener">Typed-doc</a><br> 在你的页面上添加一个打字机效果。虽然用js很容易实现，但这个要更完善，有更多的自定义选项。</p></li><li><p>gallery.echarts<br> 地址：<a href="https://gallery.echartsjs.com/explore.html#sort=rank~timeframe=all~author=all" target="_blank" rel="noopener">gallery.echarts</a><br> echarts的示例库</p></li><li><p>vue-count-to<br> 地址：<a href="https://www.npmjs.com/package/vue-count-to" target="_blank" rel="noopener">vue-count-to-npm</a><br> vue数字滚动插件</p></li><li><p>vue-seamless-scroll<br> 地址：<a href="https://github.com/chenxuan0000/vue-seamless-scroll" target="_blank" rel="noopener">vue-seamless-scroll-gitbub</a><br> vue无缝滚动插件</p></li><li><p>vue-scorll<br> 地址：<a href="https://vuescrolljs.yvescoding.org/zh/" target="_blank" rel="noopener">vuescrolljs</a><br> 自定义滚动条插件</p></li></ul><h2 id="实用的图像特效库"><a href="#实用的图像特效库" class="headerlink" title="实用的图像特效库"></a>实用的图像特效库</h2><ul><li><p>imagehover / iHover<br> 地址：<a href="https://github.com/ciar4n/imagehover.css" target="_blank" rel="noopener">imagehover-github</a><br> imagehover.css- 纯CSS3鼠标滑过图片效果动画库，44种鼠标滑过效果<br> <img src="/images/web/website/imagehover.gif" alt="目录"></p></li><li><p>Magnifier.js<br> 地址：<a href="https://github.com/mark-rolich/Magnifier.js" target="_blank" rel="noopener">Magnifier-github</a><br> Magnifier 是一款实用纯js制作的图片放大镜插件。<br> <img src="/images/web/website/Magnifier.gif" alt="目录"></p></li><li><p>FollowCursor<br> 地址:<a href="https://github.com/bersLucas/FollowCursor" target="_blank" rel="noopener">FollowCursor-github</a><br> 图像的旋转跟随光标移动而变化。<br> <img src="/images/web/website/FollowCursor.gif" alt="目录"></p></li><li><p>参考：<a href="https://segmentfault.com/a/1190000023537704" target="_blank" rel="noopener">更多实用的图像特效库</a></p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><p>favicon<br> 地址:<a href="https://favicon.io/index.html" target="_blank" rel="noopener">instafavicon-website</a><br> 这个网站可以帮你快速生成一个站点图标</p></li><li><p>geojson网站<br> 用于获取geojson地图数据<br> 地址：<a href="http://datav.aliyun.com/tools/atlas/#&amp;lat=30.316551722910077&amp;lng=106.68898666525287&amp;zoom=3.5" target="_blank" rel="noopener">GEOJSON</a><br> <a href="https://blog.csdn.net/qq_36523214/article/details/106991850" target="_blank" rel="noopener">echarts获取省市区的json</a></p></li></ul><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><ul><li><p>刷题lintcode,leetcode<br> 地址：<br> <a href="https://www.lintcode.com/" target="_blank" rel="noopener">lintcode</a><br> <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">leetcode</a><br> <a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a></p></li><li><p>掘金<br> 地址:<a href="https://juejin.im/frontend" target="_blank" rel="noopener">juejin</a></p></li><li><p>css<br> 地址：<br> <a href="https://css-tricks.com/" target="_blank" rel="noopener">css-tricks</a><br> <a href="https://css-weekly.com/" target="_blank" rel="noopener">css-weekly</a></p></li><li><p>css形状<br> <a href="https://zhuanlan.zhihu.com/p/63253867" target="_blank" rel="noopener">45个CSS 形状</a></p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><p>发现中国<br> 地址:<a href="https://www.ageeye.cn/" target="_blank" rel="noopener">https://www.ageeye.cn/</a><br> 中国历史地图以及历史人物等组成的地图</p></li><li><p>全历史<br> 地址:<a href="https://www.allhistory.com/" target="_blank" rel="noopener">https://www.allhistory.com/</a><br> 中国历史古籍，人物等构成的图谱</p></li><li><p>中国古诗文网<br> 地址:<a href="https://www.gushiwen.cn/" target="_blank" rel="noopener">https://www.gushiwen.cn/</a></p></li><li><p>知妖（中国妖怪百集）<br> 地址:<a href="https://www.cbaigui.com/" target="_blank" rel="noopener">https://www.cbaigui.com/</a></p></li><li><p>书格<br> 地址:<a href="https://new.shuge.org/" target="_blank" rel="noopener">https://new.shuge.org/</a><br> 中国古籍资源</p></li><li><p>中华珍宝馆<br> 地址:<a href="http://www.ltfc.net/" target="_blank" rel="noopener">http://www.ltfc.net/</a><br> 中国古画资源</p></li></ul><h1 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h1><p><a href="https://juejin.im/post/6875943665597546510" target="_blank" rel="noopener">前端开发常用免费资源</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;介绍一些我在项目中遇到的常用的库，工具和网站&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="CSS" scheme="https://chensanr.gitee.io/categories/Web/CSS/"/>
    
    
      <category term="web项目" scheme="https://chensanr.gitee.io/tags/web%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>高德地图实战</title>
    <link href="https://chensanr.gitee.io/2020/06/20/Amap/"/>
    <id>https://chensanr.gitee.io/2020/06/20/Amap/</id>
    <published>2020-06-20T07:06:00.000Z</published>
    <updated>2022-01-25T09:14:59.639Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>数据可视化-高德地图</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a></p><h2 id="创建行政区域"><a href="#创建行政区域" class="headerlink" title="创建行政区域"></a>创建行政区域</h2><h3 id="1-创建背景地图"><a href="#1-创建背景地图" class="headerlink" title="1.创建背景地图"></a>1.创建背景地图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//初始化背景地图(创建的完整中国地图，作为某块区域地图的背景)</span><br><span class="line">export const mapInit = (id = &apos;index-overView&apos;, opts = &#123;&#125;,styleId=&apos;amap://styles/f147564119361754e6372bfbef57548a&apos;) =&gt; &#123;</span><br><span class="line">    map = new AMap.Map(id, Object.assign(&#123;</span><br><span class="line">        mapStyle: styleId,</span><br><span class="line">        zoom: 8,</span><br><span class="line">        center:[119.92388,36.251768],</span><br><span class="line">        pitch: 50,</span><br><span class="line">        viewMode: &apos;3D&apos;,</span><br><span class="line">        features: [&apos;bg&apos;, &apos;road&apos;],</span><br><span class="line">    &#125;, opts));</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-查询行政区并绘制"><a href="#2-查询行政区并绘制" class="headerlink" title="2.查询行政区并绘制"></a>2.查询行政区并绘制</h3><p>行政区查询服务文档：<a href="https://lbs.amap.com/api/javascript-api/reference/search#m_AMap.DistrictSearch" target="_blank" rel="noopener">AMap.DistrictSearch 行政区查询</a></p><p>由于行政区查询服务只能具体查询到区县及以上，所以绘制不同级别有不同对应方式：</p><ol><li><p>绘制区县的行政区域<br>eg:绘制出胶州市（县级市）的行政区域<br>涉及的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//渲染边界线</span><br><span class="line">export const renderPolyline = (bounds, &#123;</span><br><span class="line">    strokeColor,</span><br><span class="line">    strokeWeight</span><br><span class="line">&#125; = &#123;</span><br><span class="line">    strokeColor: &apos;#FFFEC43B&apos;,</span><br><span class="line">    strokeWeight: 4</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    console.log(bounds);</span><br><span class="line">    if (!bounds || (bounds &amp;&amp; bounds.length == 0)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    let arr = []</span><br><span class="line">    for (var i = 0, l = bounds.length; i &lt; l; i++) &#123;</span><br><span class="line">        let p = new AMap.Polyline(&#123;</span><br><span class="line">            path: bounds[i],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        arr.push(p)</span><br><span class="line">    &#125;</span><br><span class="line">    var overlayGroup = new AMap.OverlayGroup(arr);</span><br><span class="line">    overlayGroup.setOptions(&#123;</span><br><span class="line">        strokeColor: strokeColor,</span><br><span class="line">        strokeWeight: strokeWeight,</span><br><span class="line">    &#125;);</span><br><span class="line">    map.add(overlayGroup);</span><br><span class="line">    //添加高度面</span><br><span class="line">    var object3Dlayer = new AMap.Object3DLayer(&#123;zIndex:1&#125;);</span><br><span class="line">    map.add(object3Dlayer)</span><br><span class="line">    var height = 0;</span><br><span class="line">    var color = &apos;rgba(155, 90, 0, 0.08)&apos;;//rgba</span><br><span class="line">    var wall = new AMap.Object3D.Wall(&#123;</span><br><span class="line">        path:bounds,</span><br><span class="line">        height:height,</span><br><span class="line">        color:color,</span><br><span class="line">    &#125;);</span><br><span class="line">    wall.transparent = true</span><br><span class="line">    object3Dlayer.add(wall)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//创建行政查询对象</span><br><span class="line">const district = new AMap.DistrictSearch(&#123;</span><br><span class="line">    level: &apos;district&apos;,</span><br><span class="line">    showbiz: false,</span><br><span class="line">    extensions: &apos;all&apos;,</span><br><span class="line">    subdistrict: 1</span><br><span class="line">&#125;);</span><br><span class="line">//根据名字查询</span><br><span class="line">district.search(&apos;胶州市&apos;, function (status, result) &#123;</span><br><span class="line">  if (status == &quot;complete&quot;) &#123;</span><br><span class="line">      let &#123; adcode, center, districtList, level, name, boundaries &#125; = result.districtList[0];</span><br><span class="line">      let originalBounds = boundaries;//boundaries返回行政区的边界坐标集合，为经纬度的二维数组</span><br><span class="line">      let bounds = originalBounds.filter(v =&gt; v.length &gt; 300);</span><br><span class="line">      if (bounds) &#123;</span><br><span class="line">          renderPolyline(bounds, &#123;</span><br><span class="line">              strokeColor: &apos;blue&apos;,</span><br><span class="line">              strokeWeight: 4</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>图示：胶州市（县级市）<img src="/images/web/visable/jz1.png" alt="目录"></p></li><li><p>绘制行政区划大于区县上的行政区域<br>eg:绘制出青岛市或者山东省（胶州市的上级或上上级）内的行政区域，district.search可查找出省市下面边界信息boundaries，所以可以直接使用district.search直接循环查找当前区域下面的行政区域然后绘制出来。<br>涉及的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//获取行政区域下面的信息（boundaries行政区的边界坐标集合，districtList下级行政区信息列表）</span><br><span class="line">export const getBounds = (&#123;</span><br><span class="line">      searchName,</span><br><span class="line">      opts</span><br><span class="line">  &#125;) =&gt; &#123;</span><br><span class="line">    if (opts) &#123;</span><br><span class="line">        opts.level &amp;&amp; district.setLevel(opts.level);</span><br><span class="line">        opts.subdistrict &amp;&amp; district.setSubdistrict(opts.subdistrict);</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      district.search(searchName, function (status, result) &#123;</span><br><span class="line">          if (status == &quot;complete&quot;) &#123;</span><br><span class="line">              let &#123; adcode, center, districtList, level, name, boundaries &#125; = result.districtList[0];</span><br><span class="line">              resolve(&#123;</span><br><span class="line">                  adcode,</span><br><span class="line">                  center: [center.lng, center.lat],</span><br><span class="line">                  districtList,</span><br><span class="line">                  boundaries,</span><br><span class="line">                  name,</span><br><span class="line">                  level</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              reject(result)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const filterBounds = (res) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        bounds: res.boundaries,</span><br><span class="line">        name: res.name,</span><br><span class="line">        adcode: res.adcode,</span><br><span class="line">        center: res.center</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 渲染行政覆盖物</span><br><span class="line">* citys 城市名称数组：[]</span><br><span class="line">* opts</span><br><span class="line">* usePolyline : 是否使用边界线，默认true</span><br><span class="line">* polyLineOpts : 边界线配置项</span><br><span class="line">* polygonOpts : 覆盖物配置项</span><br><span class="line">* mapClearFlag:是否清空所有覆盖物标志，默认为空清空所有</span><br><span class="line">* linearColor:各区块颜色是否为渐变</span><br><span class="line">* commonFillColor: 各区块颜色不一样，由polygonOpts设置各区块样式</span><br><span class="line">*  */</span><br><span class="line">export const rendPolygon = (&#123;</span><br><span class="line">        citys,</span><br><span class="line">        opts,</span><br><span class="line">        usePolyline = true,</span><br><span class="line">        polyLineOpts = &#123;&#125;,</span><br><span class="line">        polygonOpts = &#123;&#125;,</span><br><span class="line">        mapClearFlag = true,</span><br><span class="line">        linearColor = false,</span><br><span class="line">        commonFillColor=false,</span><br><span class="line">    &#125; = &#123;</span><br><span class="line">    citys,</span><br><span class="line">    opts,</span><br><span class="line">    usePolyline,</span><br><span class="line">    polyLineOpts,</span><br><span class="line">    polygonOpts,</span><br><span class="line">    linearColor,</span><br><span class="line">    commonFillColor</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    if (mapClearFlag) &#123;</span><br><span class="line">        // map.clearMap();</span><br><span class="line">    &#125;</span><br><span class="line">    let polygons = [];</span><br><span class="line">    return Promise.all(citys.map((v) =&gt; &#123; //获取边界线经纬度</span><br><span class="line">        return getBounds(&#123;</span><br><span class="line">            searchName: v,</span><br><span class="line">            opts</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)).then(res =&gt; &#123; //过滤边界线经纬度</span><br><span class="line">        return res.map(v =&gt; &#123;</span><br><span class="line">            return filterBounds(v)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(res =&gt; &#123; //绘制polygon和polyline</span><br><span class="line">        res.map((&#123;</span><br><span class="line">                    bounds,</span><br><span class="line">                    name,</span><br><span class="line">                    adcode,</span><br><span class="line">                &#125;) =&gt; &#123;</span><br><span class="line">            let v = bounds;</span><br><span class="line">            let Opt = opts;</span><br><span class="line">            for (let i = 0, l = v.length; i &lt; l; i++) &#123;</span><br><span class="line">                </span><br><span class="line">                let opts = &#123;</span><br><span class="line">                    strokeWeight: 3,</span><br><span class="line">                    path: v[i],</span><br><span class="line">                    fillOpacity: 0.5,</span><br><span class="line">                    fillColor: &apos;rgba(195, 244, 255, 0.46)&apos;,</span><br><span class="line">                    strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">                    strokeOpacity: 1</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                opts.strokeOpacity = (usePolyline ? 0.6 : 0)</span><br><span class="line">                opts.extData = &#123;</span><br><span class="line">                    areaName: name,</span><br><span class="line">                    adcode: adcode,</span><br><span class="line">                    ...opts.extData</span><br><span class="line">                &#125;</span><br><span class="line">                opts = &#123;...opts,...polygonOpts&#125;</span><br><span class="line">                // console.log(&apos;11111111111111111&apos;+name);</span><br><span class="line">                let polygon = new AMap.Polygon(opts);</span><br><span class="line">                polygons.push(polygon);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        map.add(polygons);</span><br><span class="line">        </span><br><span class="line">        let streets = res.map(v =&gt; &#123; return &#123;name: v.name, center: v.center&#125; &#125;);</span><br><span class="line"></span><br><span class="line">        return &#123;polygons, streets&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">initMap(para) &#123;</span><br><span class="line">  let that = this;</span><br><span class="line">  getBounds(&#123;</span><br><span class="line">      searchName: para,</span><br><span class="line">  &#125;).then(res =&gt; &#123;</span><br><span class="line">      let originalBounds = res.boundaries;</span><br><span class="line">      setLocalStorage(&apos;originalBounds&apos;,JSON.stringify(originalBounds));</span><br><span class="line">      this.citysCenter = res.districtList.map(item =&gt; &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">              name:item.name,</span><br><span class="line">              center:item.center</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      this.citys = this.citysCenter.map(v =&gt; v.name);</span><br><span class="line">      let opts = &#123;</span><br><span class="line">          level: &apos;district&apos;,</span><br><span class="line">          subdistrict: 1</span><br><span class="line">      &#125;;</span><br><span class="line">      rendPolygon(&#123;</span><br><span class="line">          citys: this.citys,</span><br><span class="line">          opts,</span><br><span class="line">          usePolyline: true,</span><br><span class="line">          polygonOpts: &#123;</span><br><span class="line">              fillColor:&apos;rgba(195, 244, 255, 1)&apos;,</span><br><span class="line">              strokeOpacity:0.6,</span><br><span class="line">              strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">              strokeWeight: 4,</span><br><span class="line">          &#125;,</span><br><span class="line">          polyLineOpts:&#123;</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">          mapClearFlag: true,</span><br><span class="line">          linearColor:false,</span><br><span class="line">      &#125;).then((&#123;polygons, streets&#125;) =&gt; &#123;</span><br><span class="line">          let that = this;</span><br><span class="line">          that.polygonList = polygons;</span><br><span class="line">          that.streets = streets;</span><br><span class="line">          if(this.currentUrl == &apos;landAnalysis&apos;)&#123;</span><br><span class="line">                polygons.map(cu=&gt;&#123;</span><br><span class="line">                    cu.off(&apos;click&apos;,this.polygonClick)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                polygons.map(cu=&gt;&#123;</span><br><span class="line">                    cu.on(&apos;click&apos;,this.polygonClick)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          // 设置区县文字</span><br><span class="line">          this.map.add(</span><br><span class="line">              streets.map((city,i)=&gt;&#123;</span><br><span class="line">                  let citys = new AMap.Text(&#123;</span><br><span class="line">                      text: city.name,</span><br><span class="line">                      cursor: &apos;default&apos;,</span><br><span class="line">                      position: city.center,</span><br><span class="line">                      color: &apos;white&apos;</span><br><span class="line">                  &#125;)</span><br><span class="line">                  citys.setStyle(&#123;</span><br><span class="line">                      &apos;background-color&apos;: &apos;transparent&apos;,</span><br><span class="line">                      color: &apos;#0015A5&apos;,</span><br><span class="line">                      &apos;font-size&apos;: &apos;50%&apos;,</span><br><span class="line">                      border: &apos;none&apos;</span><br><span class="line">                  &#125;);</span><br><span class="line">                  return citys</span><br><span class="line">              &#125;)</span><br><span class="line">          )</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>图示：青岛市<img src="/images/web/visable/jz2.png" alt="目录"></p></li><li><p>绘制区县下的街道等行政区域<br>eg:绘制出胶州市（县级市）下面街道的行政区域，district.search查不出区县下面行政区域的边界信息boundaries，所以需要自己提供每个街道乡镇的边界信息。<br>文件./lngLat/amap.jiaozhou放胶州市下的街镇以及各街镇边界信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const jiaozhou = &#123;</span><br><span class="line">  &quot;citycode&quot;:&quot;0532&quot;,&quot;adcode&quot;:&quot;370281&quot;,&quot;name&quot;:&quot;胶州市&quot;,&quot;polyline&quot;:&quot;&quot;,&quot;districts&quot;:[</span><br><span class="line">    &quot;citycode&quot;:&quot;0532&quot;,&quot;adcode&quot;:&quot;370281&quot;,&quot;name&quot;:&quot;阜安街道&quot;,&quot;polyline&quot;:&quot;&quot;,&quot;districts&quot;:[],....</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">先拿到胶州市下乡镇的边界信息</span><br><span class="line">import &#123;</span><br><span class="line">    jiaozhou</span><br><span class="line">&#125; from &quot;./lngLat/amap.jiaozhou&quot;</span><br><span class="line"></span><br><span class="line">let jzMapper = &#123;&#125;</span><br><span class="line">jiaozhou.districts.map(v =&gt; &#123;</span><br><span class="line">    jzMapper[v.name] = v</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const mapper = &#123;</span><br><span class="line">    ...jzMapper,//把胶州下面所有的街镇放在mapper里面</span><br><span class="line">&#125;</span><br><span class="line">const processMapper = &#123;&#125;</span><br><span class="line">const district = new AMap.DistrictSearch(&#123;</span><br><span class="line">    level: &apos;province&apos;,</span><br><span class="line">    showbiz: false,</span><br><span class="line">    extensions: &apos;all&apos;,</span><br><span class="line">    subdistrict: 3</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function createLngLat(polyline) &#123;</span><br><span class="line">    let result = []</span><br><span class="line">    let arr = polyline.split(&quot;|&quot;).filter(v =&gt; v.length);</span><br><span class="line">    let arr1 = arr.map(v =&gt; &#123;</span><br><span class="line">        return v.split(&quot;;&quot;).map(v1 =&gt; v1.split(&quot;,&quot;).map(v2 =&gt; (v2 - 0)))</span><br><span class="line">    &#125;)</span><br><span class="line">    result = arr1.filter(v =&gt; v.length &gt; 0)</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">function processLngLat(districts) &#123;</span><br><span class="line">    return districts.map(v =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            adcode: v.adcode,</span><br><span class="line">            center: v.center.split(&quot;,&quot;).map(v =&gt; (v - 0)),</span><br><span class="line">            districtList: processLngLat(v.districts),</span><br><span class="line">            boundaries: (v.polyline ? createLngLat(v.polyline) : []),</span><br><span class="line">            name: v.name,</span><br><span class="line">            level: v.level</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function createAMapResponse(areaName) &#123;</span><br><span class="line">    let districts = mapper[areaName].districts;</span><br><span class="line">    let v = mapper[areaName];</span><br><span class="line">    processMapper[areaName] = &#123;</span><br><span class="line">        adcode: v.adcode,</span><br><span class="line">        center: v.center.split(&quot;,&quot;).map(v =&gt; (v - 0)),</span><br><span class="line">        districtList: processLngLat(v.districts),</span><br><span class="line">        boundaries: (v.polyline ? createLngLat(v.polyline) : []),</span><br><span class="line">        name: v.name,</span><br><span class="line">        level: v.level</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return processMapper[areaName]</span><br><span class="line">&#125;</span><br><span class="line">export const getBounds = (&#123;</span><br><span class="line">                              searchName,</span><br><span class="line">                              opts</span><br><span class="line">                          &#125;) =&gt; &#123;</span><br><span class="line">    if (opts) &#123;</span><br><span class="line">        opts.level &amp;&amp; district.setLevel(opts.level);</span><br><span class="line">        opts.subdistrict &amp;&amp; district.setSubdistrict(opts.subdistrict);</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        if (processMapper[searchName]) &#123;</span><br><span class="line">            resolve(processMapper[searchName])</span><br><span class="line">        &#125; else if (mapper[searchName]) &#123;//如果是胶州的街镇则取自定义的街镇边界信息</span><br><span class="line">            resolve(createAMapResponse(searchName))</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            district.search(searchName, function (status, result) &#123;</span><br><span class="line">                console.log(result);</span><br><span class="line">                if (status == &quot;complete&quot;) &#123;</span><br><span class="line">                    let &#123; adcode, center, districtList, level, name, boundaries &#125; = result.districtList[0];</span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        adcode,</span><br><span class="line">                        center: [center.lng, center.lat],</span><br><span class="line">                        districtList,</span><br><span class="line">                        boundaries,</span><br><span class="line">                        name,</span><br><span class="line">                        level</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reject(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">export const filterBounds = (res) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        bounds: res.boundaries,</span><br><span class="line">        name: res.name,</span><br><span class="line">        adcode: res.adcode,</span><br><span class="line">        center: res.center</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">* 渲染行政覆盖物</span><br><span class="line">* citys 城市名称数组：[]</span><br><span class="line">* opts</span><br><span class="line">* usePolyline : 是否使用边界线，默认true</span><br><span class="line">* polyLineOpts : 边界线配置项</span><br><span class="line">* polygonOpts : 覆盖物配置项</span><br><span class="line">* mapClearFlag:是否清空所有覆盖物标志，默认为空清空所有</span><br><span class="line">* linearColor:各区块颜色是否为渐变</span><br><span class="line">* commonFillColor: 各区块颜色不一样，由polygonOpts设置各区块样式</span><br><span class="line">*  */</span><br><span class="line">export const rendPolygon = (&#123;</span><br><span class="line">      citys,</span><br><span class="line">      opts,</span><br><span class="line">      usePolyline = true,</span><br><span class="line">      polyLineOpts = &#123;&#125;,</span><br><span class="line">      polygonOpts = &#123;&#125;,</span><br><span class="line">      mapClearFlag = true,</span><br><span class="line">      linearColor = false,</span><br><span class="line">      commonFillColor=false,</span><br><span class="line">  &#125; = &#123;</span><br><span class="line">    citys,</span><br><span class="line">    opts,</span><br><span class="line">    usePolyline,</span><br><span class="line">    polyLineOpts,</span><br><span class="line">    polygonOpts,</span><br><span class="line">    linearColor,</span><br><span class="line">    commonFillColor</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    if (mapClearFlag) &#123;</span><br><span class="line">        // map.clearMap();</span><br><span class="line">    &#125;</span><br><span class="line">    let polygons = [];</span><br><span class="line">    return Promise.all(citys.map((v) =&gt; &#123; //获取边界线经纬度</span><br><span class="line">        return getBounds(&#123;</span><br><span class="line">            searchName: v,</span><br><span class="line">            opts</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)).then(res =&gt; &#123; //过滤边界线经纬度</span><br><span class="line">        </span><br><span class="line">        return res.map(v =&gt; &#123;</span><br><span class="line">            return filterBounds(v)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(res =&gt; &#123; //绘制polygon和polyline</span><br><span class="line">        res.map((&#123;</span><br><span class="line">                bounds,</span><br><span class="line">                name,</span><br><span class="line">                adcode,</span><br><span class="line">            &#125;) =&gt; &#123;</span><br><span class="line">            let v = bounds;</span><br><span class="line">            let Opt = opts;</span><br><span class="line">            for (let i = 0, l = v.length; i &lt; l; i++) &#123;</span><br><span class="line">                let opts = &#123;</span><br><span class="line">                    strokeWeight: 3,</span><br><span class="line">                    path: v[i],</span><br><span class="line">                    fillOpacity: 0.5,</span><br><span class="line">                    fillColor: &apos;rgba(195, 244, 255, 0.46)&apos;,</span><br><span class="line">                    strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">                    strokeOpacity: 1</span><br><span class="line">                &#125;;</span><br><span class="line">                opts.strokeOpacity = (usePolyline ? 0.6 : 0)</span><br><span class="line">                opts.extData = &#123;</span><br><span class="line">                    areaName: name,</span><br><span class="line">                    adcode: adcode,</span><br><span class="line">                    ...opts.extData</span><br><span class="line">                &#125;</span><br><span class="line">                opts = &#123;...opts,...polygonOpts&#125;</span><br><span class="line">                let polygon = new AMap.Polygon(opts);</span><br><span class="line">                polygons.push(polygon);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            // for (let i = 0, l = v.length; i &lt; l; i++) &#123;</span><br><span class="line">            //     if(usePolyline)&#123;</span><br><span class="line">            //         // console.log(v[i])</span><br><span class="line">            //         let opts = &#123;</span><br><span class="line">            //             path:v[i],</span><br><span class="line">            //             strokeColor:&apos;#FFFEC43B&apos;,</span><br><span class="line">            //             strokeWeight:2,</span><br><span class="line">            //             strokeOpacity:.3,</span><br><span class="line">            //             map:map</span><br><span class="line">            //         &#125;</span><br><span class="line">            //         Object.assign(opts,polyLineOpts);</span><br><span class="line">            //         new AMap.Polyline(opts)</span><br><span class="line">            //     &#125;</span><br><span class="line">            //</span><br><span class="line">            // &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        map.add(polygons);</span><br><span class="line">        let streets = res.map(v =&gt; &#123; return &#123;name: v.name, center: v.center&#125; &#125;);</span><br><span class="line">        return &#123;polygons, streets&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    // return polygons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    this.map = mapInit(&apos;map-main&apos;,&#123;viewMode: &apos;3D&apos;,&#125;,&apos;amap://styles/069da364079e3b5bdce1f621f8ac52ea&apos;);</span><br><span class="line">    if(this.map)&#123;</span><br><span class="line">        this.setMapCenterSpot(120.02382574526537,36.212799916381756);</span><br><span class="line">        this.setMapZoom(10.9);</span><br><span class="line">        this.setMapPitch(50);</span><br><span class="line">        this.initMap(&apos;胶州市&apos;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">initMap(para) &#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    getBounds(&#123;</span><br><span class="line">        searchName: para,</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">        //let originalBounds = res.boundaries;</span><br><span class="line">        //setLocalStorage(&apos;originalBounds&apos;,JSON.stringify(originalBounds));</span><br><span class="line">        this.citysCenter = res.districtList.map(item =&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:item.name,</span><br><span class="line">                center:item.center</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        this.citys = this.citysCenter.map(v =&gt; v.name);</span><br><span class="line">        //let bounds = originalBounds.filter(v =&gt; v.length &gt; 300);</span><br><span class="line">        let opts = &#123;</span><br><span class="line">            level: &apos;district&apos;,</span><br><span class="line">            subdistrict: 1</span><br><span class="line">        &#125;;</span><br><span class="line">        // if (bounds) &#123;</span><br><span class="line">        //     renderPolyline(bounds, &#123;</span><br><span class="line">        //         strokeColor: &apos;red&apos;,</span><br><span class="line">        //         strokeWeight: 4</span><br><span class="line">        //     &#125;)</span><br><span class="line">        // &#125;</span><br><span class="line">        rendPolygon(&#123;</span><br><span class="line">            citys: this.citys,</span><br><span class="line">            opts,</span><br><span class="line">            usePolyline: true,</span><br><span class="line">            polygonOpts: &#123;</span><br><span class="line">                fillColor:&apos;rgba(195, 244, 255, 1)&apos;,</span><br><span class="line">                strokeOpacity:0.6,</span><br><span class="line">                strokeColor: &apos;#0015A5&apos;,</span><br><span class="line">                strokeWeight: 4,</span><br><span class="line">            &#125;,</span><br><span class="line">            polyLineOpts:&#123;&#125;,</span><br><span class="line">            mapClearFlag: true,</span><br><span class="line">            linearColor:false,</span><br><span class="line">        &#125;).then((&#123;polygons, streets&#125;) =&gt; &#123;</span><br><span class="line">            let that = this;</span><br><span class="line">            that.polygonList = polygons;</span><br><span class="line">            that.streets = streets;</span><br><span class="line">            // 设置区县文字</span><br><span class="line">            this.map.add(</span><br><span class="line">                streets.map((city,i)=&gt;&#123;</span><br><span class="line">                    let citys = new AMap.Text(&#123;</span><br><span class="line">                        text: city.name,</span><br><span class="line">                        cursor: &apos;default&apos;,</span><br><span class="line">                        position: city.center,</span><br><span class="line">                        color: &apos;white&apos;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    citys.setStyle(&#123;</span><br><span class="line">                        &apos;background-color&apos;: &apos;transparent&apos;,</span><br><span class="line">                        color: &apos;#0015A5&apos;,</span><br><span class="line">                        &apos;font-size&apos;: &apos;50%&apos;,</span><br><span class="line">                        border: &apos;none&apos;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    return citys</span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>图示：胶州市下的镇街<img src="/images/web/visable/jz3.png" alt="目录"></p></li></ol><p>上面三种方式概括了大部分行政区域绘制的情况，其中第三种属于通用性方式，通过第三种方式可以绘制出大部分行政区域的地图。<br>若是需要绘制其他区县级行政区域只需按照格式替换相应json文件即可。</p><p>完整代码地址：<a href="https://gitee.com/Chensanr/daily-code/tree/master/visable/qdjz" target="_blank" rel="noopener">胶州市区域绘制</a></p><h2 id="楼宇图层-AMap-Buildings"><a href="#楼宇图层-AMap-Buildings" class="headerlink" title="楼宇图层 - AMap.Buildings"></a>楼宇图层 - AMap.Buildings</h2><h3 id="功能1：根据不同图例的范围显示楼宇不同的颜色"><a href="#功能1：根据不同图例的范围显示楼宇不同的颜色" class="headerlink" title="功能1：根据不同图例的范围显示楼宇不同的颜色"></a>功能1：根据不同图例的范围显示楼宇不同的颜色</h3><p><img src="/images/web/visable/build1.png" alt="目录"></p><p>template组件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;landAnalysis&quot; class=&quot;analysis-container mapAnalysis&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;select-position&quot;&gt;</span><br><span class="line">      &lt;el-autocomplete</span><br><span class="line">        class=&quot;decision-input&quot;</span><br><span class="line">        v-model=&quot;keyword&quot;</span><br><span class="line">        :fetch-suggestions=&quot;querySearchAsync1&quot;</span><br><span class="line">        value-key=&quot;entName&quot;</span><br><span class="line">        prefix-icon=&quot;el-icon-search&quot;</span><br><span class="line">        clearable</span><br><span class="line">        :trigger-on-focus=&quot;false&quot;</span><br><span class="line">        placeholder=&quot;请输入企业名称进行查询&quot;</span><br><span class="line">        @select=&quot;handleSelect1&quot;</span><br><span class="line">      &gt;&lt;/el-autocomplete&gt;</span><br><span class="line">      &lt;!-- &lt;div id=&quot;pickerBox&quot;&gt;</span><br><span class="line">        &lt;input id=&quot;pickerInput&quot; class=&quot;decision-input&quot; placeholder=&quot;输入关键字选取地点&quot; /&gt;</span><br><span class="line">        &lt;div id=&quot;poiInfo&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;--&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;type&quot; placeholder=&quot;请选择&quot; @change=&quot;changeItem&quot; class=&quot;decision-select&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">          v-for=&quot;item in landMuOption&quot;</span><br><span class="line">          :key=&quot;item.value&quot;</span><br><span class="line">          :label=&quot;item.name&quot;</span><br><span class="line">          :value=&quot;item.value&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;div class=&quot;dictList&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dict_item&quot; v-for=&quot;(items,i) in dictList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;i_btn&quot; :style=&quot;&#123;background:landMuColors[i].color,borderColor:items.color,borderStyle:&apos;solid&apos;,borderWidth:&apos;1px&apos;&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123;items.label&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;text-position&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;text-position-first&quot;&gt;胶州市地图&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;text-position-second&quot;&gt;企业分布经纬度坐标分布图&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;cash_box&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;cash_item&quot; @click=&quot;changeLay&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont iconweixing&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span&gt;卫星地图&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span&gt;|&lt;/span&gt;</span><br><span class="line">      &lt;div class=&quot;cash_item&quot; @click=&quot;startDraw&quot; :style=&quot;pickUpStyle&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont iconbianqushibie&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span&gt;边界拾取&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span&gt;|&lt;/span&gt;</span><br><span class="line">      &lt;div class=&quot;cash_item&quot; @click=&quot;resetDraw&quot;&gt;</span><br><span class="line">        &lt;span style=&quot;&quot;&gt;清除&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;dataset_box&quot; v-show=&quot;isShowRight&quot;&gt;</span><br><span class="line">      &lt;section class=&quot;box_head&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left_head&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;title_or1 head_item&quot;&gt;企业边界信息&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">      &lt;section class=&quot;boundary_content&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          面积：</span><br><span class="line">          &lt;span&gt;&#123;&#123;boundaryInfo.mapArea&#125;&#125;&lt;/span&gt;平方米</span><br><span class="line">          &lt;span&gt;&#123;&#123;boundaryInfo.area2&#125;&#125;&lt;/span&gt;亩</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          企业名称：</span><br><span class="line">          &lt;el-autocomplete</span><br><span class="line">            v-model=&quot;boundaryInfo.entName&quot;</span><br><span class="line">            :fetch-suggestions=&quot;querySearchAsync&quot;</span><br><span class="line">            value-key=&quot;entName&quot;</span><br><span class="line">            placeholder=&quot;请搜索&quot;</span><br><span class="line">            clearable</span><br><span class="line">            :trigger-on-focus=&quot;false&quot;</span><br><span class="line">            @select=&quot;handleSelect&quot;</span><br><span class="line">          &gt;&lt;/el-autocomplete&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          经纬度范围：</span><br><span class="line">          &lt;el-input</span><br><span class="line">            type=&quot;textarea&quot;</span><br><span class="line">            :rows=&quot;4&quot;</span><br><span class="line">            placeholder=&quot;请输入经纬度范围&quot;</span><br><span class="line">            v-model=&quot;boundaryInfo.locationRange&quot;</span><br><span class="line">            disabled</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          经纬度点：</span><br><span class="line">          &lt;el-input v-model=&quot;boundaryInfo.lngLat&quot; placeholder=&quot;请输入经纬度点&quot; disabled&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">      &lt;section class=&quot;boundary_footer&quot;&gt;</span><br><span class="line">        &lt;span @click=&quot;cancalBind&quot;&gt;取消&lt;/span&gt;</span><br><span class="line">        &lt;span @click=&quot;confirmBind&quot;&gt;确定&lt;/span&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>1.定义楼宇图例的颜色和范围(常量)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">//楼宇样式 </span><br><span class="line">export const landMuColors = [</span><br><span class="line">    &#123;</span><br><span class="line">        color:&apos;rgba(251, 139, 16, 0.25)&apos;,//楼宇的fillColor</span><br><span class="line">        color1:&apos;FFFFDBA9&apos;,//楼顶颜色</span><br><span class="line">        borderColor:&apos;#FB8B10&apos;,//外部polygon的填充颜色和楼宇的borderColor</span><br><span class="line">        color2:&apos;FFE05100&apos;//楼面颜色</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        color:&apos;rgba(173, 198, 253, 0.5)&apos;,</span><br><span class="line">        borderColor:&apos;#4060E4&apos;,</span><br><span class="line">        color1:&apos;FFADC6FD&apos;,</span><br><span class="line">        color2:&apos;FF0036B1&apos;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        color:&apos;rgba(231, 62, 21, 0.4)&apos;,</span><br><span class="line">        borderColor:&apos;#FF6910&apos;,</span><br><span class="line">        color1:&apos;FFFF987F&apos;,</span><br><span class="line">        color2:&apos;FFD30000&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        color:&apos;rgba(247, 181, 0, 0.4)&apos;,</span><br><span class="line">        borderColor:&apos;#FFBC04&apos;,</span><br><span class="line">        color1:&apos;FFFFE59D&apos;,</span><br><span class="line">        color2:&apos;FFD28300&apos;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line">//专题分析图例列表</span><br><span class="line">export const landMuOption = [</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位用地税收&apos;,</span><br><span class="line">        value:1,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~0.5万元/亩&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0.5~2万元/亩&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;2~5万元/亩&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;5万元/亩以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位用地主营业务收入&apos;,</span><br><span class="line">        value:2,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~100万元/亩&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;100~200万元/亩&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;200~300万元/亩&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;300万元/亩以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位能耗主营业务收入&apos;,</span><br><span class="line">        value:3,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~25万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;25~60万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;60~150万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;150以上万元/吨标准煤&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;单位污染物排放主营业务收入&apos;,</span><br><span class="line">        value:4,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~3万元/当量吨&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;3~10万元/当量吨&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;10~30万元/当量吨&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;30万元以上/当量吨&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;研发经费投入占主营业务收入比重&apos;,</span><br><span class="line">        value:5,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~4%&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;4%~5%&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;5%~7%&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;7%以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;全员劳动生产率&apos;,</span><br><span class="line">        value:6,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;0~40万元/人·年&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;40~70万元/人·年&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;70~120万元/人·年&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;120万元/人·年以上&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;分档&apos;,</span><br><span class="line">        value:7,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;A档&apos;,</span><br><span class="line">                color:&apos;#FB8B10&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;B档&apos;,</span><br><span class="line">                color:&apos;#0091FF&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;C档&apos;,</span><br><span class="line">                color:&apos;#E02020&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label:&apos;D档&apos;,</span><br><span class="line">                color:&apos;#F7B500&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">后台返回的楼宇数据格式：</span><br><span class="line">data:[</span><br><span class="line">    &#123;</span><br><span class="line">        name:&apos;0~0.5万元/亩&apos;, //当前选择图例的第一项图例name，依次类推</span><br><span class="line">        data:[&#123;</span><br><span class="line">            allWorkRate: 607.355</span><br><span class="line">            creditCode: &quot;91370281740398747R&quot;</span><br><span class="line">            dataYear: 2018</span><br><span class="line">            entName: &quot;青岛德全食品有限公司&quot;</span><br><span class="line">            entType: &quot;B&quot;</span><br><span class="line">            id: 5803</span><br><span class="line">            lat: &quot;36.4493852655075600&quot;</span><br><span class="line">            lng: &quot;120.0681803666910500&quot;</span><br><span class="line">            locationRange: &quot;120.0681803666910500,36.4493852655075600,120.0681803666910500,36.4493852655075600,120.0681803666910500,36.4493852655075600,120.0681803666910500,36.4493852655075600&quot;</span><br><span class="line">            mapArea: null</span><br><span class="line">            muConsumeIncome: 533.3106</span><br><span class="line">            muEmissionsIncome: null</span><br><span class="line">            muMainIncome: 664.3298</span><br><span class="line">            muPerTax: 0.2605</span><br><span class="line">            rangeList: [[&quot;120.0681803666910500&quot;, &quot;36.4493852655075600&quot;], [&quot;120.0681803666910500&quot;, &quot;36.4493852655075600&quot;],…] //楼宇需要的边界值path</span><br><span class="line">            researchRate: 4.2149</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&apos;0.5~2万元/亩&apos;,</span><br><span class="line">        data:[]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&apos;2~5万元/亩&apos;,</span><br><span class="line">        data:[]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&apos;5万元/亩以上&apos;,</span><br><span class="line">        data:[]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.初始化地图，根据后台数据添加楼宇<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">//初始化某个市的地图</span><br><span class="line">initSearch() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      //卫星图层</span><br><span class="line">      this.satelliteLayer = new AMap.TileLayer.Satellite();</span><br><span class="line">      //楼块图层</span><br><span class="line">      this.buildingLayer = new AMap.Buildings(&#123;</span><br><span class="line">        zIndex: 130,</span><br><span class="line">        merge: false,</span><br><span class="line">        sort: false,</span><br><span class="line">        heightFactor: 2,</span><br><span class="line">        zooms: [16, 18]</span><br><span class="line">      &#125;);</span><br><span class="line">      this.map.setFeatures([&quot;bg&quot;, &quot;road&quot;, &quot;building&quot;, &quot;point&quot;]);</span><br><span class="line">      this.map.setLayers([new AMap.TileLayer(&#123;&#125;), this.buildingLayer]);</span><br><span class="line">      this.map.setPitch(60);</span><br><span class="line">      this.map.setRotation(35);</span><br><span class="line">      //调视角控件</span><br><span class="line">      this.map.plugin([&quot;AMap.ControlBar&quot;], function() &#123;</span><br><span class="line">        let Options = &#123;</span><br><span class="line">          position: &#123;</span><br><span class="line">            bottom: &quot;-100px&quot;,</span><br><span class="line">            right: 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        that.controlBar = new AMap.ControlBar(Options);</span><br><span class="line">        that.map.addControl(that.controlBar);</span><br><span class="line">      &#125;);</span><br><span class="line">      this.mouseTool = new AMap.MouseTool(this.map);</span><br><span class="line">      this.mouseTool.close();</span><br><span class="line">      //拿到所有楼块的位置并设置</span><br><span class="line">      this.getbuildingLayer();</span><br><span class="line">    &#125;,</span><br><span class="line">    //获取后台数据 设置楼宇</span><br><span class="line">    getbuildingLayer() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      landAnalysisEntList(&#123; type: this.type, dataYear: 2018 &#125;).then(res =&gt; &#123;</span><br><span class="line">        let arr = res.data || [];</span><br><span class="line">        let options = &#123;&#125;;</span><br><span class="line">        let allData = arr.map((v, i) =&gt; &#123;</span><br><span class="line">          let eveItemData = v.data.map(val =&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              rejectTexture: true, //是否屏蔽自定义地图的纹理</span><br><span class="line">              color1: that.landMuColors[i].color1,</span><br><span class="line">              color2: that.landMuColors[i].color2,</span><br><span class="line">              entName: val.entName,</span><br><span class="line">              creditCode: val.creditCode,</span><br><span class="line">              lng: val.lng,</span><br><span class="line">              lat: val.lat,</span><br><span class="line">              entType: val.entType,</span><br><span class="line">              fillColor: that.landMuColors[i].color,</span><br><span class="line">              borderColor: that.landMuColors[i].borderColor,</span><br><span class="line">              path: val.rangeList || []</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125;);</span><br><span class="line">          return eveItemData;</span><br><span class="line">        &#125;);</span><br><span class="line">        //所有楼块的位置</span><br><span class="line">        that.areas = allData.reduce(function(a, b) &#123;</span><br><span class="line">          return a.concat(b);</span><br><span class="line">        &#125;).filter((v)=&gt;&#123;</span><br><span class="line">          return v.lng&amp;&amp;v.lat;</span><br><span class="line">        &#125;);</span><br><span class="line">        //设置楼块的位置</span><br><span class="line">        that.buildingLayer.setStyle(&#123;</span><br><span class="line">          hideWithoutStyle: false,</span><br><span class="line">          areas: that.areas</span><br><span class="line">        &#125;);</span><br><span class="line">        //所有楼块上面的地面矩形Polygon</span><br><span class="line">        this.polygonFloorList = that.areas.map((v, i) =&gt; &#123;</span><br><span class="line">          let somePolygon = new AMap.Polygon(&#123;</span><br><span class="line">            bubble: true,</span><br><span class="line">            fillColor: v.fillColor || &quot;green&quot;,</span><br><span class="line">            // fillOpacity: 0.2,</span><br><span class="line">            strokeWeight: 1,</span><br><span class="line">            strokeColor: v.borderColor,</span><br><span class="line">            strokeWeight: 2,</span><br><span class="line">            path: v.path,</span><br><span class="line">            map: that.map</span><br><span class="line">          &#125;);</span><br><span class="line">          //地面Polygon设置点击事件-清除当前楼层</span><br><span class="line">          // somePolygon.on(&quot;click&quot;, function(e) &#123;</span><br><span class="line">          //   that.currentIndex = i;</span><br><span class="line">          //   // console.log(that.currentIndex);</span><br><span class="line">          //   that.clearLayBuding();</span><br><span class="line">          // &#125;);</span><br><span class="line">          return somePolygon;</span><br><span class="line">        &#125;);</span><br><span class="line">        //给每个楼块标记点marker</span><br><span class="line">        pointShow(</span><br><span class="line">          this.map,</span><br><span class="line">          function(current) &#123;</span><br><span class="line">            iconPoint(that.map, function(curr) &#123;&#125;, [current], 2); //2表示土地的infowindow</span><br><span class="line">          &#125;,</span><br><span class="line">          that.areas,</span><br><span class="line">          2</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    clearLayBuding() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      //清除当前楼层 - 拿不到当前polygon上的楼层- （去掉areas中当前点击的index之后重新设置style的areas）</span><br><span class="line">      let areas = [...that.areas];</span><br><span class="line">      areas.splice(that.currentIndex, 1);</span><br><span class="line">      that.buildingLayer.setStyle(&#123;</span><br><span class="line">        hideWithoutStyle: false,</span><br><span class="line">        areas</span><br><span class="line">      &#125;);</span><br><span class="line">      //清除当前楼层下polygon</span><br><span class="line">      let current = this.polygonFloorList[this.currentIndex];</span><br><span class="line">      current.setMap(null);</span><br><span class="line">      current = null;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>如下：能清晰看到楼宇效果图<br><img src="/images/web/visable/build2.png" alt="目录"></p><h3 id="功能2：边界拾取"><a href="#功能2：边界拾取" class="headerlink" title="功能2：边界拾取"></a>功能2：边界拾取</h3><p>在地图上拾取一个范围边界圈出企业的范围保存楼宇到后台，改拾取的边界区域就是企业的位置和楼宇</p><p><img src="/images/web/visable/build3.png" alt="目录"></p><p><a href="https://lbs.amap.com/api/javascript-api/reference/plugin#AMap.MouseTool" target="_blank" rel="noopener">AMap.MouseTool 插件api文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">//点击拾取</span><br><span class="line">startDraw() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      this.pickUpStyle = &#123;</span><br><span class="line">        color:&apos;#54CFFF&apos;</span><br><span class="line">      &#125;</span><br><span class="line">      //边界拾取 - 绘制polyon</span><br><span class="line">      this.mouseTool.polygon(&#123;</span><br><span class="line">        fillColor: &quot;#00b0ff&quot;,</span><br><span class="line">        strokeColor: &quot;#80d8ff&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">      //   that.mouseTool.close(); //绘制结束后先关闭绘制工具   that.mouseTool.close(true)关闭绘制并清除绘制图形</span><br><span class="line">      this.mouseTool.on(&quot;draw&quot;, function(e) &#123;</span><br><span class="line">        //结束绘制</span><br><span class="line">        let obj = e.obj;</span><br><span class="line">        that.overlays.push(obj);</span><br><span class="line">        that.mouseTool.close();</span><br><span class="line">        that.pickUpStyle = &#123;</span><br><span class="line">          color:&apos;#fff&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        //双击点开右侧数据栏，</span><br><span class="line">        obj.on(&quot;dblclick&quot;, function(event) &#123;</span><br><span class="line">          that.isShowRight = true;</span><br><span class="line">          //获取当前绘制的边界值范围</span><br><span class="line">          let arr = obj.getPath();</span><br><span class="line">          let lngLat =</span><br><span class="line">            arr &amp;&amp; arr.length &gt; 0</span><br><span class="line">              ? arr</span><br><span class="line">                  .map((v, i) =&gt; &#123;</span><br><span class="line">                    return v.lng + &quot;,&quot; + v.lat;</span><br><span class="line">                  &#125;)</span><br><span class="line">                  .join(&quot;,&quot;)</span><br><span class="line">              : &quot;&quot;;</span><br><span class="line">          that.boundaryInfo.locationRange = lngLat;</span><br><span class="line">          let area = obj.getArea();</span><br><span class="line">          that.boundaryInfo.mapArea = area;</span><br><span class="line">          that.boundaryInfo.area2 = (area * 0.0015).toFixed(2);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    //把右侧的数据提交后台，再重新获取楼宇则刚才绘制的边界就显示出来</span><br><span class="line">    confirmBind() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      let &#123;</span><br><span class="line">        id,</span><br><span class="line">        creditCode,</span><br><span class="line">        entName,</span><br><span class="line">        dataYear,</span><br><span class="line">        mapArea,</span><br><span class="line">        locationRange</span><br><span class="line">      &#125; = this.boundaryInfo;</span><br><span class="line">      let con = &#123; id, creditCode, entName, dataYear, mapArea, locationRange &#125;;</span><br><span class="line">      if (id &amp;&amp; entName) &#123;</span><br><span class="line">        landAnalysisUpdateEntRange(con).then(res =&gt; &#123;</span><br><span class="line">          if (res.code == &quot;0000&quot;) &#123;</span><br><span class="line">            that.isShowRight = false;</span><br><span class="line">            that.getbuildingLayer();</span><br><span class="line">            that.$message(&#123;</span><br><span class="line">              type: &quot;success&quot;,</span><br><span class="line">              message: &quot;绘制成功&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            that.resetBoundary();</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            that.$message(&#123;</span><br><span class="line">              type: &quot;error&quot;,</span><br><span class="line">              message: res.msg</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        that.$message(&#123;</span><br><span class="line">          type: &quot;warning&quot;,</span><br><span class="line">          message: &quot;请选择绘制范围的公司&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/Chensanr/daily-code/blob/master/visable/jz-buildings.js" target="_blank" rel="noopener">完整代码地址</a></p><p>文档:<a href="https://lbs.amap.com/api/javascript-api/reference/layer#buildings" target="_blank" rel="noopener">楼宇图层api文档</a><br>示例:<a href="https://lbs.amap.com/api/javascript-api/example/personalized-map/building-style" target="_blank" rel="noopener">楼宇图层设置楼块颜色示例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;数据可视化-高德地图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/other/hexo/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="Visualization" scheme="https://chensanr.gitee.io/categories/Web/Visualization/"/>
    
    
      <category term="Visualization" scheme="https://chensanr.gitee.io/tags/Visualization/"/>
    
      <category term="高德地图" scheme="https://chensanr.gitee.io/tags/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>前端兼容问题</title>
    <link href="https://chensanr.gitee.io/2020/06/13/hack/"/>
    <id>https://chensanr.gitee.io/2020/06/13/hack/</id>
    <published>2020-06-13T04:21:26.000Z</published>
    <updated>2022-01-25T09:14:59.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>常见的前端兼容问题</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="移动端兼容问题"><a href="#移动端兼容问题" class="headerlink" title="移动端兼容问题"></a>移动端兼容问题</h2><ol><li>移动端屏幕 1px 边框问题</li></ol><ul><li><p>使用伪类 + transform 实现，原理是把原先元素的 border 去掉，然后利用 :before 或者 :after 重做 border ，并 transform 的 scale 缩小一半，原先的元素相对定位，新做的 border 绝对定位。</p></li><li><p>单条 border 样式设置：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.scale-1px&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  border:none;</span><br><span class="line">&#125;</span><br><span class="line">.scale-1px:after&#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background: #000;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 1px;</span><br><span class="line">  -webkit-transform: scaleY(0.5);</span><br><span class="line">  transform: scaleY(0.5);</span><br><span class="line">  -webkit-transform-origin: 0 0;</span><br><span class="line">  transform-origin: 0 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>四条 boder 样式设置:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.scale-1px&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin-bottom: 20px;</span><br><span class="line">  border:none;</span><br><span class="line">&#125;</span><br><span class="line">.scale-1px:after&#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  border: 1px solid #000;</span><br><span class="line">  -webkit-box-sizing: border-box;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  width: 200%;</span><br><span class="line">  height: 200%;</span><br><span class="line">  -webkit-transform: scale(0.5);</span><br><span class="line">  transform: scale(0.5);</span><br><span class="line">  -webkit-transform-origin: left top;</span><br><span class="line">  transform-origin: left top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>new Date(date).getTime()在 ios 下的兼容性问题。</li></ol><ul><li>new Date(“2018-12-12 00:00:01”).getTime()获取时间戳的时候在 ios 下面为 NaN.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new Date(&quot;2018-12-12 00:00:01&quot;)</span><br><span class="line">/*</span><br><span class="line">*chrome浏览器以及安卓下面都可以正常输出-&gt;Wed Dec 12 2018 00:00:01 GMT+0800 (中国标准时间)</span><br><span class="line">*在ios下面输出是Invalid Date。因为ios下面必须传new Date(&quot;2018/12/12 00:00:01&quot;)，这种格式的日期参数</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*所以在ios下面就相当于是new Date(&quot;Invalid Date&quot;).getTime()，所以自然输出的结果是：NaN</span><br><span class="line">*/</span><br><span class="line">new Date(&quot;2018-12-12 00:00:01&quot;).getTime()//NaN</span><br></pre></td></tr></table></figure><ul><li>解决方法：直接将时间格式化为“YYYY/MM/DD HH:MM:SS”即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Date(dataTime.replace(/-/g,&apos;/&apos;)).getTime()</span><br></pre></td></tr></table></figure><h2 id="pc-端兼容问题"><a href="#pc-端兼容问题" class="headerlink" title="pc 端兼容问题"></a>pc 端兼容问题</h2><ol><li><p>window.open()在 ie 浏览器打开空白<br>解决方式：用 window.location.href 方式打开</p></li><li><p>文件下载</p></li></ol><p>IE 浏览器：使用微软自带的msSaveBlob 方法，a标签的download属性不支持IE<br>谷歌浏览器：创建a标签 ，添加download属性，模拟鼠标点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">downloadProposal(params).then(res =&gt; &#123;</span><br><span class="line">               const blob = new Blob([res]);</span><br><span class="line">               if (window.navigator.msSaveBlob) &#123;</span><br><span class="line">                 try &#123;</span><br><span class="line">                   window.navigator.msSaveBlob(blob, &apos;下载的文件命名&apos;)</span><br><span class="line">                 &#125; catch (e) &#123;</span><br><span class="line">                   console.log(e);</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                 // 谷歌浏览器 创建a标签 添加download属性下载</span><br><span class="line">                 const a = document.createElement(&quot;a&quot;);</span><br><span class="line">                 // 兼容webkix浏览器，处理webkit浏览器中herf自动添加blob前缀，默认在浏览器打开而不是下载</span><br><span class="line">                 const URL = window.URL || window.webkitURL;</span><br><span class="line">                 // 根据blob对象创建URL 对象，生成本地URL</span><br><span class="line">                 const herf = URL.createObjectURL(blob);</span><br><span class="line">                 // 下载链接</span><br><span class="line">                 a.href = herf;</span><br><span class="line">                 //当前时间</span><br><span class="line">                 const time = timeNow();</span><br><span class="line">                 // 下载文件名,如果后端没有返回，可以自己写a.download = &apos;文件.pdf&apos;</span><br><span class="line">                 a.download = &quot;项目审核意见书&quot; + time + &quot;.doc&quot;;</span><br><span class="line">                 document.body.appendChild(a);</span><br><span class="line">                 a.click();</span><br><span class="line">                 document.body.removeChild(a);</span><br><span class="line">                 // 在内存中移除URL 对象</span><br><span class="line">                 window.URL.revokeObjectURL(herf);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;常见的前端兼容问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
    
      <category term="兼容" scheme="https://chensanr.gitee.io/tags/%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>ES 2020 新特性</title>
    <link href="https://chensanr.gitee.io/2020/05/26/ES-2020-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://chensanr.gitee.io/2020/05/26/ES-2020-新特性/</id>
    <published>2020-05-26T03:18:18.000Z</published>
    <updated>2022-01-25T09:14:59.639Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>ES 2020 比较好用的几个新特性</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h3 id="空值合并-（-）"><a href="#空值合并-（-）" class="headerlink" title="空值合并 （??）"></a>空值合并 （??）</h3><ul><li><p>空值合并运算符（??）是一个逻辑运算符。当左侧操作数为 null 或 undefined 时，其返回右侧的操作数。否则返回左侧的操作数。</p></li><li><p>与逻辑或（||）操作符不同，逻辑或会在左操作数为 假值（0,null,undefined,’’,NAN） 时返回右侧操作数见下面的例子.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onst foo = (null||undefined) ?? &apos;default string&apos;;</span><br><span class="line">console.log(foo);</span><br><span class="line">// expected output: &quot;default string&quot;</span><br><span class="line"></span><br><span class="line">const baz = 0||&apos;&apos;||NAN ?? 42;</span><br><span class="line">console.log(baz);</span><br><span class="line">// expected output: 0 &apos;&apos; NAN</span><br></pre></td></tr></table></figure></li></ul><h3 id="可选链式操作符-（-）"><a href="#可选链式操作符-（-）" class="headerlink" title="可选链式操作符 （?.）"></a>可选链式操作符 （?.）</h3><ul><li><p>如果访问对象上不存在的属性上的属性，使用.操作符会直接报错.</p></li><li><p>而使用可选链式操作符 ?.，如果没有值，则返回 undefined 而不是直接报错</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 如果person对象不包含profile会报错</span><br><span class="line">console.log(person.profile.name ?? &quot;Anonymous&quot;); // person.profile is undefined</span><br><span class="line">// 下面的路径是可选的，如果person对象不包含profile属性直接返回&quot;Anonymous&quot;</span><br><span class="line">console.log(person?.profile?.name ?? &quot;Anonymous&quot;);</span><br><span class="line">console.log(person?.profile?.age ?? 18);</span><br><span class="line"></span><br><span class="line">var age = user &amp;&amp; user.info &amp;&amp; user.info.getAge &amp;&amp; user.info.getAge();</span><br><span class="line">var age = user?.info?.getAge?.();</span><br></pre></td></tr></table></figure></li></ul><h3 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h3><p>JavaScript 在不同的环境获取全局对象有不同的方式，NodeJS 中通过 global, Web 中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 JavaScript 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">过去获取全局对象，可通过一个全局函数:</span><br><span class="line">var getGlobal = function () &#123;</span><br><span class="line">  if (typeof self !== &apos;undefined&apos;) &#123; return self; &#125;</span><br><span class="line">  if (typeof window !== &apos;undefined&apos;) &#123; return window; &#125;</span><br><span class="line">  if (typeof global !== &apos;undefined&apos;) &#123; return global; &#125;</span><br><span class="line">  throw new Error(&apos;unable to locate global object&apos;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">var globals = getGlobal();</span><br><span class="line"></span><br><span class="line">而限制 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis后，你可以在任意上下文，任意时刻都能获取到全局对象，不需要调用函数判断</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;ES 2020 比较好用的几个新特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="javaScript" scheme="https://chensanr.gitee.io/categories/Web/javaScript/"/>
    
    
      <category term="ECMAScript" scheme="https://chensanr.gitee.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>热爱可抵岁月漫长</title>
    <link href="https://chensanr.gitee.io/2020/05/21/%E7%94%9F%E6%B4%BB/"/>
    <id>https://chensanr.gitee.io/2020/05/21/生活/</id>
    <published>2020-05-21T05:51:25.000Z</published>
    <updated>2022-01-25T09:14:59.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>热爱生活<br>遍历山河<br>依然觉得人间值得</p></blockquote><p><img src="/images/life/daily/qdh1.jpg" alt="出门"><a id="more"></a></p><p>不得不说杭州确实适合生活，有酒有肉有朋友。自从来杭州，幸福感已经上了一个度。</p><p>早上八点半起床洗漱，走十分钟到办公室，</p><p>九点半开始工作，忙时敲代码，闲时听听同事吐槽昨日趣事。</p><p>下午混到三点半开始点水果喝下午茶讲黄段子。</p><p>晚上六点下班回家，偶尔忙时加加班。</p><p>周末就逗猫喝茶。</p><p><img src="/images/life/daily/cat.jpg" alt="出门"></p><p><img src="/images/life/daily/tea.jpg" alt="出门"></p><p>图来自爱喝茶爱摄影的室友。</p><p>在杭州已经一年多了，有一群可爱的90后同事和一个对生活热枕的闺蜜室友，幸福感爆棚。</p><p>公司周年，千岛湖玩耍。</p><p><img src="/images/life/daily/qdh1.jpg" alt="出门"><br><img src="/images/life/daily/qdh2.jpg" alt="出门"><br><img src="/images/life/daily/qdh3.jpg" alt="出门"></p><p>和闺蜜花花海南演唱会撞上，一人场周董演唱会。</p><p><img src="/images/life/daily/ych.jpg" alt="出门"></p><p>我家投影小6的营业日常</p><p><img src="/images/life/daily/ty1.jpg" alt="出门"><br><img src="/images/life/daily/ty2.jpg" alt="出门"></p><p>以前只是周末做饭加餐，现在已经每天做饭带去公司吃</p><p><img src="/images/life/daily/f1.jpg" alt="出门"><br><img src="/images/life/daily/f2.jpg" alt="出门"><br><img src="/images/life/daily/f3.jpg" alt="出门"></p><p>把种子放进去就能长出的花花草草</p><p><img src="/images/life/daily/flower1.jpg" alt="出门"><br><img src="/images/life/daily/flower2.jpg" alt="出门"></p><p>经历了很多，觉得日子终究是自己过的舒适才是最重要的。</p><p>看过千帆，不必苦求有人同行。</p><p>渡尽长路，不必执着有无所得。</p><p>将遇之人皆为挚友，去往之地皆为热土。</p><p>愿你遍历山河，依然觉得人间值得。</p><p>最后，谁说程序员是秃子，我有头发！！！</p><p><img src="/images/life/daily/wo.jpg" alt="出门"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;热爱生活&lt;br&gt;遍历山河&lt;br&gt;依然觉得人间值得&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/life/daily/qdh1.jpg&quot; alt=&quot;出门&quot;&gt;
    
    </summary>
    
      <category term="Life" scheme="https://chensanr.gitee.io/categories/Life/"/>
    
      <category term="daily" scheme="https://chensanr.gitee.io/categories/Life/daily/"/>
    
    
      <category term="生活" scheme="https://chensanr.gitee.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>钉钉登录</title>
    <link href="https://chensanr.gitee.io/2020/04/27/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/"/>
    <id>https://chensanr.gitee.io/2020/04/27/钉钉登录/</id>
    <published>2020-04-27T09:31:08.000Z</published>
    <updated>2022-01-25T09:14:59.644Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>钉钉登录</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h3 id="钉钉内部微应用免登"><a href="#钉钉内部微应用免登" class="headerlink" title="钉钉内部微应用免登"></a>钉钉内部微应用免登</h3><p>文档：<a href="https://ding-doc.dingtalk.com/doc#/dev/ep7bpq" target="_blank" rel="noopener">钉钉内部微应用免登</a></p><ul><li><p>安装 npm install dingtalk-jsapi –save</p></li><li><p>引入 import * as dd from ‘dingtalk-jsapi’;</p></li><li><p>获取微应用免登授权码，再根据code登录应用</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">export const ddLogin = ()=&gt;&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        axios.post(&apos;/api/dtalk/getDingParam&apos;).then((res)=&gt;&#123;</span><br><span class="line">            if (res.data.code == &apos;0000&apos;) &#123;</span><br><span class="line">                let corpId = res.data.data.corpId;//公司的corpId</span><br><span class="line">                dd.ready(function() &#123;</span><br><span class="line">                //获取微应用免登授权码</span><br><span class="line">                    dd.runtime.permission.requestAuthCode(&#123;</span><br><span class="line">                        corpId: corpId, // 企业id</span><br><span class="line">                        onSuccess: function (info) &#123;</span><br><span class="line">                            let code = info.code; // 通过该免登授权码可以获取用户身份</span><br><span class="line">                            // alert(code,corpId);</span><br><span class="line">                            axios(&#123;</span><br><span class="line">                                method: &apos;post&apos;,</span><br><span class="line">                                url: &apos;/api/dtalkLogin&apos;, // 路径</span><br><span class="line">                                data: &#123;</span><br><span class="line">                                    code</span><br><span class="line">                                &#125;,</span><br><span class="line">                                transformRequest: [function (data) &#123;</span><br><span class="line">                                    let ret = &apos;&apos;;</span><br><span class="line">                                    ret = qs.stringify(data);</span><br><span class="line">                                    return ret;</span><br><span class="line">                                &#125;],</span><br><span class="line">                                headers: &#123;</span><br><span class="line">                                    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;).then(res=&gt;&#123;</span><br><span class="line">                                if(res.data.code == &apos;0000&apos;)&#123;</span><br><span class="line">                                    setLocalStorage(&apos;token&apos;,res.data.data.token.token);</span><br><span class="line">                                    setLocalStorage(&quot;curl&quot;, res.data.data.permission);</span><br><span class="line">                                    setLocalStorage(&quot;grider&quot;, res.data.data.grider);</span><br><span class="line">                                    setLocalStorage(&quot;permissionDing&quot;, res.data.data.permissionDing);</span><br><span class="line">                                    setLocalStorage(&quot;level&quot;, res.data.data.level);</span><br><span class="line">                                    resolve(res.data);</span><br><span class="line">                                &#125;else&#123;</span><br><span class="line">                                    // _this.$router.go(-1);</span><br><span class="line">                                    Toast(&apos;登录失败&apos;);</span><br><span class="line">                                    location.href = localStorage.getItem(&quot;loginUrl&quot;);//登录页</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;,</span><br><span class="line">                        onFail: function (err) &#123;</span><br><span class="line">                            Toast(err.errorMessage);</span><br><span class="line">                            location.href = localStorage.getItem(&quot;loginUrl&quot;);//登录页</span><br><span class="line">                            reject();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast(&apos;登录失败&apos;);</span><br><span class="line">                location.href = localStorage.getItem(&quot;loginUrl&quot;);//登录页</span><br><span class="line">                reject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三方网站钉钉扫码登录"><a href="#第三方网站钉钉扫码登录" class="headerlink" title="第三方网站钉钉扫码登录"></a>第三方网站钉钉扫码登录</h3><p>采用官网中的方式二 ：支持网站将钉钉登录二维码内嵌到自己页面中<br>文档：<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/kymkv6/jfDu3" target="_blank" rel="noopener">第三方网站钉钉扫码登录</a></p><p>1.创建一个div，用于显示钉钉带过来的二维码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;scan_box&quot; id=&quot;scan_box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2.通过公司的appid拿到二维码，<br>用户扫码-扫码成功-跳转空白页登录应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">this.codeLogin();</span><br><span class="line">&#125;,</span><br><span class="line">codeLogin()&#123;</span><br><span class="line">            let that = this;</span><br><span class="line">            api.getQrDingParam().then(res=&gt;&#123;</span><br><span class="line">//                console.log(res);</span><br><span class="line">                if(res.code == &apos;0000&apos;)&#123;</span><br><span class="line">                    //1.调用后台接口拿到公司的appid</span><br><span class="line">                    this.appid = res.data.appId;</span><br><span class="line">                    //2.在需要使用钉钉登录的地方实例以下JS对象</span><br><span class="line">                    let obj = DDLogin(&#123;</span><br><span class="line">                        id: &apos;scan_box&apos;,</span><br><span class="line">                        goto: encodeURIComponent(&apos;https://oapi.dingtalk.com/connect/oauth2/sns_authorize?appid=&apos; + this.appid + &apos;&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri=&apos; + this.redirect_uri + &apos;&apos;),</span><br><span class="line">                        style: &apos;border:none;background-color:#FFFFFF;&apos;,</span><br><span class="line">                        width: &apos;220&apos;,</span><br><span class="line">                        height: &apos;300&apos;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    let hanndleMessage = function (event) &#123;</span><br><span class="line">                        let origin = event.origin;</span><br><span class="line">                        // 判断是否来自ddLogin扫码事件</span><br><span class="line">                        if (origin === &apos;https://login.dingtalk.com&apos;) &#123;</span><br><span class="line">                            let loginTmpCode = event.data;</span><br><span class="line">                            // 这里url不用进行urlencode编码</span><br><span class="line">                            let url = &apos;https://oapi.dingtalk.com/connect/oauth2/sns_authorize?appid=&apos; + that.appid + &apos;&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri=&apos; + that.redirect_uri + &apos;&amp;loginTmpCode=&apos; + loginTmpCode;</span><br><span class="line">                            //跳转链接到新页面</span><br><span class="line">                            window.location.href = url;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    if (typeof window.addEventListener !== &apos;undefined&apos;) &#123; // 添加事件</span><br><span class="line">                        window.addEventListener(&apos;message&apos;, hanndleMessage, false)</span><br><span class="line">                    &#125; else if (typeof window.attachEvent !== &apos;undefined&apos;) &#123;</span><br><span class="line">                        window.attachEvent(&apos;onmessage&apos;, hanndleMessage)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return this.$message.error(res.msg)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></p><p>3.新页面的代码：后台会在新页面带上code,根据code进行登录；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//登录接口</span><br><span class="line">getdd()&#123;</span><br><span class="line">        let code=getLocation().query.code;</span><br><span class="line">                api.dtalkPcQrLogin(&#123;code&#125;).then(res=&gt;&#123;</span><br><span class="line">                    if (res.code == &quot;0000&quot;) &#123;</span><br><span class="line">                        setLocalStorage(&quot;token&quot;, res.data.token.token);</span><br><span class="line">                        setLocalStorage(&quot;curl&quot;, res.data.permission);</span><br><span class="line">                        setLocalStorage(&quot;department&quot;, res.data.department);</span><br><span class="line">                        setLocalStorage(&quot;level&quot;, res.data.level);</span><br><span class="line">                        setLocalStorage(&quot;grider&quot;, res.data.grider);</span><br><span class="line">                        setLocalStorage(&quot;username&quot;, res.data.username);</span><br><span class="line">                        setLocalStorage(&quot;name&quot;, res.data.realName);</span><br><span class="line">                        setLocalStorage(&quot;permissionDing&quot;, res.data.permissionDing);</span><br><span class="line">                        document.cookie = &quot;token=&quot; + res.data.token.token;</span><br><span class="line">                        let arr = JSON.parse(res.data.permission);</span><br><span class="line">                        let item = arr[0];</span><br><span class="line">                        let child = item.child[0];</span><br><span class="line">                        if (item.url &amp;&amp; item.child.length==0) &#123;</span><br><span class="line">                            gotoGovURL(`$&#123;item.url&#125;`);</span><br><span class="line">                        &#125; else if (child) &#123;</span><br><span class="line">                            gotoGovURL(`$&#123;item.url&#125;#/$&#123;child.url&#125;`);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        this.$message(&#123;</span><br><span class="line">                            message: res.msg,</span><br><span class="line">                            type: &apos;warning&apos;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure></p><p>项目: <a href="http://lylobsysc.cet0570.com/gov/login.html#/" target="_blank" rel="noopener">登录页</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;钉钉登录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/vue/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://chensanr.gitee.io/categories/Vue/"/>
    
      <category term="login" scheme="https://chensanr.gitee.io/categories/Vue/login/"/>
    
    
      <category term="login" scheme="https://chensanr.gitee.io/tags/login/"/>
    
  </entry>
  
  <entry>
    <title>vue单页面动态路由权限配置</title>
    <link href="https://chensanr.gitee.io/2020/03/23/vueSingleRoutePage/"/>
    <id>https://chensanr.gitee.io/2020/03/23/vueSingleRoutePage/</id>
    <published>2020-03-23T11:39:00.000Z</published>
    <updated>2022-01-25T09:14:59.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>vue单页面动态路由</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司最近涉及的亩均项目大多类似，打算做一个模块化亩均产品，提高代码复用性。采用的是vue-element-admin的单页面路由创建项目。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h4><p>使用的是vue-element-admin的基本模板搭建项目，具体的使用过程参考他的官方文档，本文主要介绍这个项目的权限路由验证</p><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><p>项目的路由全部在router文件夹，根据后台路由权限配置动态路由；每个模块都新建文件引入到index里。</p><p>路由分为两类：</p><ul><li><p>constantRoutes固定路由，不因角色变量改变而一直存在的路由对象，例如首页，登录页，404页面等；</p></li><li><p>asyncRoutes变动路由，有权限的路由对象，一般在登录时根据当前用户的后台权限去筛选出asyncRoutes中的路由，组成当前用户的路由权限。</p></li><li><p>注意：404页面一定要放在最后</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.在初始router时把constantRoutes固定路由塞进去</span><br><span class="line">const createRouter = () =&gt; new Router(&#123;</span><br><span class="line">  // mode: &apos;history&apos;, // require service support</span><br><span class="line">  scrollBehavior: () =&gt; (&#123; y: 0 &#125;),</span><br><span class="line">  routes: constantRoutes</span><br><span class="line">&#125;)</span><br><span class="line">2.在登陆成功时通过addRoutes动态添加路由</span><br><span class="line">//accessRoutes-筛选后的路由权限</span><br><span class="line">router.addRoutes(accessRoutes)</span><br></pre></td></tr></table></figure><h4 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h4><p>1.在router.beforeEach中做路由权限验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(async(to, from, next) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  NProgress.start()</span><br><span class="line">  const hasToken = getToken()</span><br><span class="line"></span><br><span class="line">  if (hasToken) &#123;</span><br><span class="line">    if (to.path === &apos;/login&apos;) &#123;</span><br><span class="line">      </span><br><span class="line">      next(&#123; path: &apos;/&apos; &#125;)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const hasRoles = store.getters.roles &amp;&amp; store.getters.roles.length &gt; 0</span><br><span class="line">      if (hasRoles) &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          //获取用户基本信息</span><br><span class="line">          const &#123; roles &#125; = await store.dispatch(&apos;user/getInfo&apos;)</span><br><span class="line">          </span><br><span class="line">          // 获取动态路由权限</span><br><span class="line">          const accessRoutes = await store.dispatch(&apos;permission/generateRoutes&apos;, roles)</span><br><span class="line">          </span><br><span class="line">          //通过router.addRoutes给设置动态路由</span><br><span class="line">          router.addRoutes(accessRoutes)</span><br><span class="line">          next(&#123; ...to, replace: true &#125;)</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">          await store.dispatch(&apos;user/resetToken&apos;)</span><br><span class="line">          Message.error(error || &apos;Has Error&apos;)</span><br><span class="line">          next(`/login?redirect=$&#123;to.path&#125;`)</span><br><span class="line">          NProgress.done()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if (whiteList.indexOf(to.path) !== -1) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(`/login?redirect=$&#123;to.path&#125;`)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>2.获取动态路由权限 :在store的permission/generateRoutes中</p><p>项目的原方案（方案一）是通过roles[admin,editor]字段和本地写的router配置的route.meta.roles匹配来筛选出动态路由；但是这种方式不满足公司角色很多的情况，所以我改造了一下，根据不同角色返回权限列表筛选出动态路由（方案二）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">import &#123; asyncRoutes, constantRoutes &#125; from &apos;@/router&apos;</span><br><span class="line">import &#123; getUserMenu,getMenuList &#125; from &quot;@/api/organization/permission&quot;;</span><br><span class="line">// asyncRoutes 前台需要获取权限的总路由</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Use meta.role to determine if the current user has permission</span><br><span class="line"> * @param roles</span><br><span class="line"> * @param route</span><br><span class="line"> */</span><br><span class="line">function hasPermission(roles, route) &#123;</span><br><span class="line">  if (route.meta &amp;&amp; route.meta.roles) &#123;</span><br><span class="line">    return roles.some(role =&gt; route.meta.roles.includes(role))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Filter asynchronous routing tables by recursion</span><br><span class="line"> * @param routes asyncRoutes</span><br><span class="line"> * @param roles</span><br><span class="line"> */</span><br><span class="line">export function filterAsyncRoutes(routes, roles) &#123;</span><br><span class="line">  const res = []</span><br><span class="line"></span><br><span class="line">  routes.forEach(route =&gt; &#123;</span><br><span class="line">    const tmp = &#123; ...route &#125;</span><br><span class="line">    if (hasPermission(roles, tmp)) &#123;</span><br><span class="line">      if (tmp.children) &#123;</span><br><span class="line">        tmp.children = filterAsyncRoutes(tmp.children, roles)</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//方案二</span><br><span class="line">export function filterAsyncRoutes2(menuList, asyncRoutes) &#123;</span><br><span class="line">  const res = []</span><br><span class="line">  menuList.forEach(route =&gt; &#123;</span><br><span class="line">    const tmp = &#123; ...route &#125;</span><br><span class="line">    let currentAsyn = asyncRoutes.find((v)=&gt;&#123;</span><br><span class="line">      return tmp.href == v.path</span><br><span class="line">    &#125;)</span><br><span class="line">    // console.log(tmp,currentAsyn);</span><br><span class="line">    if (currentAsyn) &#123;</span><br><span class="line">      if (tmp.sonMenu) &#123;</span><br><span class="line">        tmp.sonMenu = filterAsyncRoutes2(tmp.sonMenu,currentAsyn.sonMenu||[])</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(currentAsyn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  //404页面 必须再动态路由最后面加上</span><br><span class="line">  res.push(&#123; path: &apos;*&apos;, redirect: &apos;/404&apos;, hidden: true &#125;)</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const state = &#123;</span><br><span class="line">  routes: [],</span><br><span class="line">  appHeaderRoutes:[],//头部应用的路由列表 - 用于头部切换应用</span><br><span class="line">  currentRoute: &apos;&apos;,//当前应用名 - 用于筛选当前应用的路由对象</span><br><span class="line">  addRoutes: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">  SET_ROUTES: (state, routes) =&gt; &#123;</span><br><span class="line">    //constantRoutes-固定存在的路由  addRoutes- （过滤权限后的后台路由）</span><br><span class="line">    state.addRoutes = routes;</span><br><span class="line">    state.routes = constantRoutes.concat(routes)</span><br><span class="line">  &#125;,</span><br><span class="line">  SET_CURRENTROUTE: (state, name) =&gt; &#123;</span><br><span class="line">    state.currentRoute = name;</span><br><span class="line">  &#125;,</span><br><span class="line">  SET_APPHEADERROUTES:(state, routes) =&gt; &#123;</span><br><span class="line">    state.appHeaderRoutes = routes;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const actions = &#123;</span><br><span class="line">  setCurrentRoue(&#123;commit&#125;,item)&#123;</span><br><span class="line">    commit(&apos;SET_CURRENTROUTE&apos;, item.name)</span><br><span class="line">    let &#123;origin,pathname&#125; =  window.location;</span><br><span class="line">    window.location.href = `$&#123;origin&#125;$&#123;pathname&#125;#$&#123;item.href&#125;`</span><br><span class="line">  &#125;,</span><br><span class="line">  generateRoutes(&#123; commit &#125;, roles) &#123;</span><br><span class="line">    /**方案1.</span><br><span class="line">     * 根据roles(角色的列表) 过滤出动态路由 - 原方案</span><br><span class="line">     * */</span><br><span class="line">    // return new Promise(resolve =&gt; &#123;</span><br><span class="line">    //   let accessedRoutes;</span><br><span class="line">    //   if (roles.includes(&apos;admin&apos;)) &#123; //管理员可以看全部的asyncRoutes</span><br><span class="line">    //     accessedRoutes = asyncRoutes || []</span><br><span class="line">    //   &#125; else &#123; //其他成员只能看过滤权限后的</span><br><span class="line">    //     accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)</span><br><span class="line">    //   &#125;</span><br><span class="line">    //   //设置当前应用平台名 - 可拿到当前的路由对象</span><br><span class="line">    //   let name = accessedRoutes.length&gt;0 ? accessedRoutes[0].meta.title : &apos;系统设置&apos;;</span><br><span class="line">    //   commit(&apos;SET_ROUTES&apos;, accessedRoutes)</span><br><span class="line">    //   commit(&apos;SET_CURRENTROUTE&apos;,name)</span><br><span class="line">    //   resolve(accessedRoutes)</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 方案2.-现在使用</span><br><span class="line">     * 后台根据不同角色返回权限列表 </span><br><span class="line">     * 前端再与asyncRoutes对比，过滤出本用户可查看的菜单权限accessedRoutes</span><br><span class="line">     * 再返回给addRoutes ；再通过router.addRoutes(accessRoutes)动态添加进router</span><br><span class="line">     * */</span><br><span class="line">    return new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">      getUserMenu().then(response =&gt; &#123;</span><br><span class="line">        let res = response.data;</span><br><span class="line">        let menuList = [], accessedRoutes = [];</span><br><span class="line">        if (res.code == &quot;000000&quot;) &#123;</span><br><span class="line">          menuList = res.data || [];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          menuList = [];</span><br><span class="line">        &#125;</span><br><span class="line">        //设置头部应用的路由列表</span><br><span class="line">        commit(&apos;SET_APPHEADERROUTES&apos;, menuList);</span><br><span class="line">        //过滤出文件夹以外的菜单列表（二维变一维数组）</span><br><span class="line">        let menus = menuList.reduce((prev, cur, index) =&gt; &#123;</span><br><span class="line">          if (cur.sonMenu &amp;&amp; cur.sonMenu.length &gt; 0) &#123;</span><br><span class="line">            return prev.concat(cur.sonMenu);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            return prev.concat([]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, [], 0);</span><br><span class="line">        // console.log(menus);</span><br><span class="line">        accessedRoutes = filterAsyncRoutes2(menus, asyncRoutes);</span><br><span class="line">        //设置当前应用平台名 - 可拿到当前的路由对象</span><br><span class="line">        let name = accessedRoutes.length &gt; 0 ? accessedRoutes[0].meta.title : &apos;系统设置&apos;;</span><br><span class="line">        let item = accessedRoutes.length &gt; 0 ? accessedRoutes[0] :&#123;&#125;</span><br><span class="line">        commit(&apos;SET_ROUTES&apos;, accessedRoutes)</span><br><span class="line">        commit(&apos;SET_CURRENTROUTE&apos;, name)</span><br><span class="line">        resolve(accessedRoutes)</span><br><span class="line">      &#125;).catch(error =&gt; &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/images/vue/vue-router-page.png" alt=""><br>切换头部应用台菜单的时候 左侧菜单栏会相应改变；当前用户的路由权限通过filterAsyncRoutes2来筛选。</p><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/" target="_blank" rel="noopener">vue-element-admin官方文档</a></p><p><a href="https://github.com/chenjing123456/vue-singe-frame" target="_blank" rel="noopener">项目完整代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;vue单页面动态路由&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/vue/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://chensanr.gitee.io/categories/Vue/"/>
    
      <category term="vue-router" scheme="https://chensanr.gitee.io/categories/Vue/vue-router/"/>
    
    
      <category term="vue-router" scheme="https://chensanr.gitee.io/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>element-ui 组件使用</title>
    <link href="https://chensanr.gitee.io/2020/02/26/element/"/>
    <id>https://chensanr.gitee.io/2020/02/26/element/</id>
    <published>2020-02-26T11:59:00.000Z</published>
    <updated>2022-01-25T09:14:59.640Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>element-ui 组件</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h3 id="自动搜索-autocomplete"><a href="#自动搜索-autocomplete" class="headerlink" title="自动搜索 autocomplete"></a>自动搜索 autocomplete</h3><ul><li><p>远程搜索 属性fetch-suggestions（从服务器获取数据）</p><p>功能：搜索企业名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1.设置:fetch-suggestions</span><br><span class="line">&lt;el-autocomplete</span><br><span class="line">     v-model=&quot;defaultObj.entName&quot;</span><br><span class="line">     class=&quot;gov-input&quot;</span><br><span class="line">     :fetch-suggestions=&quot;querySearchAsync&quot;</span><br><span class="line">     value-key=&quot;entName&quot;</span><br><span class="line">     placeholder=&quot;请搜索&quot;</span><br><span class="line">     @select=&quot;handleSelect&quot;</span><br><span class="line">&gt;&lt;/el-autocomplete&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  //2.远程搜索方法</span><br><span class="line">   querySearchAsync(queryString,cb)&#123;</span><br><span class="line">        queryString ? this.fuzzySearchEnt(queryString).then((results)=&gt;&#123;</span><br><span class="line">       cb(results);</span><br><span class="line">      &#125;) : [];</span><br><span class="line">   &#125;,</span><br><span class="line">   //后台接口-根据entName搜索企业</span><br><span class="line">   async fuzzySearchEnt(queryString)&#123;</span><br><span class="line">    let results = await new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        fuzzySearchEnt(&#123;entName:queryString&#125;).then((res)=&gt;&#123;</span><br><span class="line">          if(res.code==&apos;0000&apos;)&#123;</span><br><span class="line">            resolve(res.data.results||[])</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            this.$message.error(res.msg);</span><br><span class="line">            reject()</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return results;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="时间选择器-date-picker"><a href="#时间选择器-date-picker" class="headerlink" title="时间选择器 date-picker"></a>时间选择器 date-picker</h3><ul><li>开始时间不限制，结束时间不小于当前时间；开始时间小于结束时间。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line">  &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;公示日期&quot; prop=&quot;publicityTimeStart&quot;&gt;</span><br><span class="line">      &lt;el-date-picker clearable :type=&quot;dateType&quot; placeholder=&quot;选择开始时间&quot; :format=&quot;dateFormat&quot; :value-format=&quot;dateFormat&quot; v-model=&quot;ruleForm.publicityTimeStart&quot; :picker-options=&quot;pickerOptions0&quot; style=&quot;width: 100%;&quot;&gt; &lt;/el-date-picker&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">  &lt;el-col class=&quot;line&quot; style=&quot;text-align:center&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;</span><br><span class="line">  &lt;el-col :span=&quot;10&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;&quot; prop=&quot;publicityTimeEnd&quot; class=&quot;publicityTimeEnd&quot;&gt;</span><br><span class="line">      &lt;el-date-picker :type=&quot;dateType&quot; placeholder=&quot;选择结束时间&quot; :format=&quot;dateFormat&quot; :value-format=&quot;dateFormat&quot; v-model=&quot;ruleForm.publicityTimeEnd&quot; :picker-options=&quot;pickerOptions1&quot; style=&quot;width: 100%;&quot; clearable&gt; &lt;/el-date-picker&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">export default class ConfirmDialog extends Vue &#123;</span><br><span class="line">  dateFormat: string = &apos;yyyy-MM-dd&apos;;</span><br><span class="line">  dateType: string = &apos;date&apos;;</span><br><span class="line">  ruleForm: &#123; publicityTimeStart: string; publicityTimeEnd: string; title: string; content: string; id: any &#125; = &#123;</span><br><span class="line">    id: null,</span><br><span class="line">    title: &apos;&apos;,</span><br><span class="line">    content: &apos;&apos;,</span><br><span class="line">    publicityTimeStart: &apos;&apos;,</span><br><span class="line">    publicityTimeEnd: &apos;&apos;,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  //pickerOptions:&#123;</span><br><span class="line">    // 此处调用this this的指向不是vue实例 而是undefined</span><br><span class="line">   // disabledDate()&#123;&#125;</span><br><span class="line">  //&#125;</span><br><span class="line">  get pickerOptions0() &#123;</span><br><span class="line">    //用计算属性解决this指向问题</span><br><span class="line">    let that = this;</span><br><span class="line">    return &#123;</span><br><span class="line">      disabledDate: (time) =&gt; &#123;</span><br><span class="line">        let endDateVal = new Date(that.ruleForm.publicityTimeEnd).getTime();</span><br><span class="line">        if (endDateVal) &#123;</span><br><span class="line">          return time.getTime() &gt; endDateVal - 8.64e7;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get pickerOptions1() &#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    return &#123;</span><br><span class="line">      disabledDate(time) &#123;</span><br><span class="line">        let beginDateVal = new Date(that.ruleForm.publicityTimeStart).getTime();</span><br><span class="line">        if (beginDateVal) &#123;</span><br><span class="line">          // 等于的时候是临界值00:00:00  一天= 8.64e7毫秒</span><br><span class="line">          if (beginDateVal &lt; Date.now()) &#123;</span><br><span class="line">            return time.getTime() &lt; Date.now();</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            return time.getTime() &lt; beginDateVal;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return time.getTime() &lt; Date.now();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="级联选择器-cascader"><a href="#级联选择器-cascader" class="headerlink" title="级联选择器 cascader"></a>级联选择器 cascader</h3><ul><li><p>动态加载 属性lazyLoad</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    return &#123;</span><br><span class="line">    //1.设置在props设置lazy和lazyLoad属性</span><br><span class="line">        addProps: &#123;</span><br><span class="line">        lazy: true,</span><br><span class="line">        value: &quot;code&quot;,</span><br><span class="line">        children: &quot;childList&quot;,</span><br><span class="line">        label: &quot;name&quot;,</span><br><span class="line">        lazyLoad(node, resolve) &#123;</span><br><span class="line">          const &#123; level &#125; = node;</span><br><span class="line">          if (level === 0) &#123;//一级</span><br><span class="line">            that.queryRegions(0, resolve) </span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            that.queryRegions(node, resolve);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">** 注意点：动态加载级联选择框时，如果有默认选中的需求，emitPath必须为true,既v-model绑定数组并且checkStrictly: true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">methods:()&#123;</span><br><span class="line">// 调用后台接口，根据父级的code获取子集，若是一级parentCode传0 </span><br><span class="line">    queryRegions(node, resolve) &#123;</span><br><span class="line">      let parentCode = node ? node.data.code : 0;</span><br><span class="line">      queryRegions(&#123; parentCode &#125;).then(res =&gt; &#123;</span><br><span class="line">        let &#123; code, data &#125; = res.data;</span><br><span class="line">        if (code == &quot;000000&quot; &amp;&amp; data) &#123;</span><br><span class="line">          resolve(data);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          resolve([]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>远程搜索 filterable-method</p></li><li><p>多选并且只能选中最后一级 disabled属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  &lt;el-cascader</span><br><span class="line">  :options=&quot;industry&quot;</span><br><span class="line">  :props=&quot;&#123;</span><br><span class="line">    label: &quot;name&quot;,</span><br><span class="line">    children: &quot;child&quot;,</span><br><span class="line">    value: &quot;name&quot;,</span><br><span class="line">    checkStrictly: true,</span><br><span class="line">    emitPath: false,</span><br><span class="line">    multiple: true,</span><br><span class="line">    &#125;&quot;</span><br><span class="line">  :show-all-levels=&quot;false&quot;</span><br><span class="line">  popper-class=&quot;cascaderIndustry&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;/el-cascader&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.设置除最后一项其余的disabled属性都不可选的方法</span><br><span class="line">/**</span><br><span class="line"> * @description 数组嵌套 级联数据设置disabled，最后一项数据设置可选,其余为不可选</span><br><span class="line"> * @author xiaomeng</span><br><span class="line"> * @param &#123;String&#125; childStr 数组的每个数据项里用来接收children的字段</span><br><span class="line"> * @param &#123;Array&#125; arr 要处理的源数组</span><br><span class="line"> * @return &#123;Array&#125; 返回处理后的数组</span><br><span class="line"> */</span><br><span class="line">export const handleChildDisAbled = (arr, childStr) =&gt; &#123;</span><br><span class="line">  const handledArr = arr.map(item =&gt; &#123;</span><br><span class="line">    if (!item[childStr] || item[childStr].length === 0) &#123;</span><br><span class="line">      item[childStr] = null</span><br><span class="line">      item[&apos;disabled&apos;] = false</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const childArr = handleChildDisAbled(item[childStr], childStr)</span><br><span class="line">      item[childStr] = childArr</span><br><span class="line">      item[&apos;disabled&apos;] = true</span><br><span class="line">    &#125;</span><br><span class="line">    return item</span><br><span class="line">  &#125;)</span><br><span class="line">  return handledArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2. this.industry = handleChildDisAbled(data,&apos;child&apos;)</span><br><span class="line"></span><br><span class="line">3.设置样式，除最后一级之外，其余的多选框都隐藏</span><br><span class="line"></span><br><span class="line">//适用行业</span><br><span class="line">.cascaderIndustry &#123;</span><br><span class="line">  .el-checkbox__input.is-disabled .el-checkbox__inner &#123;</span><br><span class="line">    display: none !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>disabled属性<br>需求：后台菜单可配置，在配置某菜单的上级菜单时，要求该菜单的上级菜单不能选中某菜单本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-cascader</span><br><span class="line">  :options=&quot;[&#123;id:0,name:&apos;root&apos;&#125;,...menuList]&quot;</span><br><span class="line">  v-model=&quot;menuItem.parentId&quot;</span><br><span class="line">  :show-all-levels=&quot;false&quot;</span><br><span class="line">  :props=&quot;props&quot;</span><br><span class="line">  clearable</span><br><span class="line">&gt;&lt;/el-cascader&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    menuList:[],//菜单列表</span><br><span class="line">    value: &apos;id&apos;,</span><br><span class="line">        checkStrictly: true, // 设置父子菜单不相互关联， 确保当前此菜单不可选，但是此菜单的子菜单可以选择</span><br><span class="line">        label: &apos;name&apos;,</span><br><span class="line">        children: &apos;sonMenu&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * @description 设置当前菜单不可选中项 （上级菜单不可为本身）</span><br><span class="line">  * @param &#123;Array&#125; list 菜单列表</span><br><span class="line">  */</span><br><span class="line">setDisAbled(list) &#123;</span><br><span class="line">  let parentId = this.menuItem.id</span><br><span class="line">  for (var i = 0; i &lt;= list.length - 1; i++) &#123;</span><br><span class="line">    if (list[i].id === parentId) &#123;</span><br><span class="line">      list[i].disabled = true</span><br><span class="line">      break</span><br><span class="line">    &#125;</span><br><span class="line">    if (list[i].sonMenu &amp;&amp; list[i].sonMenu.length &gt; 0) &#123;</span><br><span class="line">      this.setDisAbled(list[i].sonMenu)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.setDisAbled(this.menuList) //调用即可改变menuList的不可选项配置</span><br></pre></td></tr></table></figure><p><img src="/images/vue/disabled-cas.png" alt="目录"></p></li></ul><h3 id="表格全选问题-el-table"><a href="#表格全选问题-el-table" class="headerlink" title="表格全选问题 el-table"></a>表格全选问题 el-table</h3><p>需求：要求全选时选中同一个工作流的数据</p><ul><li><p>vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;ctable&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      ref=&quot;multipleTable&quot;</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      @select-all=&quot;selectAll&quot;</span><br><span class="line">      @select=&quot;handleSelectionChange&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot; :selectable=&quot;selectable&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;流程名称&quot; width=&quot;180&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;div</span><br><span class="line">            class=&quot;processName&quot;</span><br><span class="line">            :title=&quot;scope.row.processName&quot;</span><br><span class="line">            @click=&quot;gotoDetail(scope.row)&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;&#123; scope.row.processName &#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/section&gt;</span><br></pre></td></tr></table></figure></li><li><p>data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 手动勾选数据行的 Checkbox 时触发的事件</span><br><span class="line">handleSelectionChange(val) &#123;</span><br><span class="line">  this.multipleSelection = val;</span><br><span class="line">&#125;,</span><br><span class="line">// 全选点击事件</span><br><span class="line">selectAll(val) &#123;</span><br><span class="line">  const that = this;</span><br><span class="line">  if (this.tableData.length === 1) &#123;</span><br><span class="line">    this.multipleSelection = val;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const len = this.multipleSelection.length;</span><br><span class="line">  // 没有选中项</span><br><span class="line">  if (len === 0) &#123;</span><br><span class="line">    const item = this.tableData[0];</span><br><span class="line">    const filterList = this.tableData.filter(</span><br><span class="line">      v =&gt; v.processDefinitionId === item.processDefinitionId</span><br><span class="line">    );</span><br><span class="line">    // 所有数据不在同一工作流</span><br><span class="line">    if (filterList &amp;&amp; filterList.length !== this.tableData.length) &#123;</span><br><span class="line">      this.$warnMsg(&apos;只有数据都属于同一个工作流，才能全选&apos;);</span><br><span class="line">      this.multipleSelection = [];</span><br><span class="line">      this.$refs.multipleTable.clearSelection();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this.multipleSelection = [...this.tableData];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 有选中项</span><br><span class="line">    const currentItem = this.multipleSelection[0];</span><br><span class="line">    const filterCurrList = this.tableData.filter(</span><br><span class="line">      v =&gt; v.processDefinitionId === currentItem.processDefinitionId</span><br><span class="line">    );</span><br><span class="line">    // 选中项 === 可以被选中项（processDefinitionId相同的） --&gt;相当于取消全选操作</span><br><span class="line">    if (filterCurrList.length === len) &#123;</span><br><span class="line">      this.multipleSelection = [];</span><br><span class="line">      this.$refs.multipleTable.clearSelection();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 选中项 !== 可以被选中项   --&gt;相当于全选操作（把所有可以被选中项 勾选）</span><br><span class="line">      filterCurrList.forEach(row =&gt; &#123;</span><br><span class="line">        that.$refs.multipleTable.setCurrentRow(row);</span><br><span class="line">      &#125;);</span><br><span class="line">      this.multipleSelection = [...filterCurrList];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // console.log(this.multipleSelection, &apos;finally&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">selectable(row) &#123;</span><br><span class="line">  //默认没有选中项，是全部都可以选中；如果已经有选中项时，则只有processDefinitionId相同的才能被选中。</span><br><span class="line">  if (</span><br><span class="line">    this.multipleSelection.length &gt; 0 &amp;&amp;</span><br><span class="line">    row.processDefinitionId !==</span><br><span class="line">      this.multipleSelection[0].processDefinitionId</span><br><span class="line">  ) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="无限滚动-InfiniteScroll"><a href="#无限滚动-InfiniteScroll" class="headerlink" title="无限滚动 InfiniteScroll"></a>无限滚动 InfiniteScroll</h3><p>调用后台使用步骤：</p><ul><li><p>vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;info-list&quot; v-infinite-scroll=&quot;load&quot; infinite-scroll-disabled=&quot;disabled&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;info-item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot; @click=&quot;gotoDetail(item)&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;info-left&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;info-left-h&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;entName&quot;&gt;&#123;&#123;item.entName&#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;span class=&quot;creditCode&quot;&gt;&#123;&#123;item.creditCode&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;info-left-b&quot;&gt;</span><br><span class="line">              &lt;span&gt;注册地址：&lt;/span&gt;</span><br><span class="line">              &lt;span class=&quot;add&quot;&gt;&#123;&#123;item.address&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;info-right&quot;&gt;</span><br><span class="line">            &lt;span&gt;审核状态&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;status&quot;&gt;&#123;&#123;item.flowStatus&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div v-if=&quot;loading&quot; class=&quot;loading&quot;&gt;</span><br><span class="line">          &lt;span&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div v-if=&quot;noMore&quot; class=&quot;data-text&quot;&gt;没有更多了&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      属性 ：</span><br><span class="line">      v-infinite-scroll表示滚动加载</span><br><span class="line">      infinite-scroll-disabled是否禁用（起始页数大于等于总页数时停止加载）</span><br></pre></td></tr></table></figure></li><li><p>data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">      loading: false,//加载中</span><br><span class="line">      count: 1,//页数</span><br><span class="line">      totalPages: 0,//总页数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    noMore() &#123;</span><br><span class="line">      //当起始页数大于总页数时停止加载</span><br><span class="line">      return this.count &gt;= this.totalPages;</span><br><span class="line">    &#125;,</span><br><span class="line">    disabled() &#123;</span><br><span class="line">      return this.loading || this.noMore;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getList(1);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>methods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">methods：&#123;</span><br><span class="line">// 分页查询待审核的直报</span><br><span class="line">  getList(pageNum) &#123;</span><br><span class="line">    if (pageNum) &#123;</span><br><span class="line">      this.count = 1;</span><br><span class="line">      this.list = [];</span><br><span class="line">    &#125;</span><br><span class="line">    let &#123; flowStatus, keyword, town &#125; = this.conditions;</span><br><span class="line">    if (flowStatus == &quot;全部&quot;) flowStatus = &quot;&quot;;</span><br><span class="line">    let params = &#123;</span><br><span class="line">      pageNum: this.count,</span><br><span class="line">      pageSize: 6, //每页查询条数</span><br><span class="line">      flowStatus,</span><br><span class="line">      keyword,</span><br><span class="line">      town</span><br><span class="line">    &#125;;</span><br><span class="line">    describeAuditEntCheckDataByPage(params).then(response =&gt; &#123;</span><br><span class="line">      let &#123; data, code &#125; = response;</span><br><span class="line">      this.list = this.list.concat(data.results); //因为每次后端返回的都是数组，所以这边把数组拼接到一起</span><br><span class="line">      this.total = data.totalRecord; //总数</span><br><span class="line">      this.totalPages = data.totalPage; //总页数</span><br><span class="line">      this.loading = false;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  load() &#123;</span><br><span class="line">    //滑到底部时进行加载</span><br><span class="line">    this.loading = true;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.count += 1; //页数+1</span><br><span class="line">      this.getList(); //调用接口，此时页数+1，查询下一页数据</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="上传组件-upload"><a href="#上传组件-upload" class="headerlink" title="上传组件 upload"></a>上传组件 upload</h3><ul><li><p>手动上传 http-request方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">//功能：上传文件</span><br><span class="line">//1:vue</span><br><span class="line">&lt;el-upload</span><br><span class="line">            class=&quot;upload-demo&quot;</span><br><span class="line">            ref=&quot;upload&quot;</span><br><span class="line">            drag</span><br><span class="line">            :show-file-list=&quot;false&quot;</span><br><span class="line">            :limit=&quot;1&quot;</span><br><span class="line">            :file-list=&quot;fileList&quot;</span><br><span class="line">            :http-request=&quot;httpRequest&quot;</span><br><span class="line">            action=&quot;#&quot;</span><br><span class="line">            accept=&quot;.xls, .xlsx&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;div class=&quot;preview&quot;&gt;</span><br><span class="line">              &lt;div</span><br><span class="line">                class=&quot;fail_icon&quot;</span><br><span class="line">                v-bind:key=&quot;jobnumberKey&quot;</span><br><span class="line">                v-if=&quot;uploadStatus == &apos;fail&apos;&amp;&amp;isShowText&quot;</span><br><span class="line">                @click.stop=&quot;shuan()&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;i class=&quot;el-icon-circle-close&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;span&gt;上传失败&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div</span><br><span class="line">                class=&quot;success_icon&quot;</span><br><span class="line">                v-bind:key=&quot;jobnumberKey&quot;</span><br><span class="line">                v-if=&quot;uploadStatus == &apos;success&apos;&amp;&amp;isShowText&quot;</span><br><span class="line">                @click.stop=&quot;shuan()&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;i class=&quot;el-icon-circle-check&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;span&gt;上传成功&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;i</span><br><span class="line">                :class=&quot;[&apos;iconfont&apos;, &apos;iconyulan&apos;,isPreview?&apos;isPreview&apos;:&apos;&apos;]&quot;</span><br><span class="line">                @click.stop=&quot;previewOnHtml&quot;</span><br><span class="line">              &gt;&lt;/i&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;wait&apos;&quot; class=&quot;wait&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconshangchuanwenjian&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;status_cen&quot;&gt;将文件拖拽至此&lt;/span&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  或</span><br><span class="line">                  &lt;span style=&quot;color:#0091FF&quot;&gt;点击上传&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;success&apos;&quot; class=&quot;success&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconexcelbiaodan&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;status_cen&quot;&gt;&#123;&#123;fileName&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  &lt;span style=&quot;color:#0091FF&quot;&gt;重新上传&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;uploading&apos;&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconexcelbiaodan&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;el-progress class=&quot;progress&quot; :show-text=&quot;false&quot; :percentage=&quot;progressPercent&quot;&gt;&lt;/el-progress&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  &lt;span&gt;正在上传...&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-if=&quot;uploadStatus == &apos;fail&apos;&quot; class=&quot;fail&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;iconfont iconexcelbiaodan fail_icon&quot; /&gt;</span><br><span class="line">              &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;status_cen&quot;&gt;&#123;&#123;fileName&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;div class=&quot;status&quot;&gt;</span><br><span class="line">                  &lt;span style=&quot;color:#0091FF&quot;&gt;重新上传&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;</span><br><span class="line">              &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(item) in tips&quot; :key=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//2.data</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        jobnumberKey: +new Date(),</span><br><span class="line">        uploadStatus: &quot;wait&quot;,</span><br><span class="line">        isShowText: false,</span><br><span class="line">        progressPercent: 0,//上传进度</span><br><span class="line">        fileName:&quot;&quot;,</span><br><span class="line">        fileList:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//3.methods</span><br><span class="line">  methods:&#123;</span><br><span class="line">    //上传失败-刷新</span><br><span class="line">    shuan() &#123;</span><br><span class="line">      this.isShowText = false;</span><br><span class="line">      this.jobnumberKey = +new Date(); //强制刷新</span><br><span class="line">    &#125;,</span><br><span class="line">    // config 是自带参数。 this.$refs.upload.submit() 会自动调用 httpRequest方法.在里面取得file</span><br><span class="line">    httpRequest(file) &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      that.uploadStatus = &quot;uploading&quot;; //上传中</span><br><span class="line">      let fd = new FormData();</span><br><span class="line">      let fileObj = file.file;</span><br><span class="line">      fd.append(&quot;file&quot;, fileObj);</span><br><span class="line">      fd.append(&quot;labelId&quot;, this.labelId);</span><br><span class="line">      fd.append(&quot;updateType&quot;, this.updateType);</span><br><span class="line">      that.fileName = file.file.name;</span><br><span class="line">      const config = &#123;</span><br><span class="line">        headers: &#123; Authorization: this.token &#125;,</span><br><span class="line">        onUploadProgress: progressEvent =&gt; &#123;</span><br><span class="line">          // progressEvent.loaded:已上传文件大小</span><br><span class="line">          // progressEvent.total:被上传文件的总大小</span><br><span class="line">          this.progressPercent = Number(</span><br><span class="line">            ((progressEvent.loaded / progressEvent.total) * 100).toFixed(2)</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">     //调用后台上传方法</span><br><span class="line">     uploadLabelFile(fd, config)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          if (res.code === &quot;000000&quot;) &#123;</span><br><span class="line">            that.uploadStatus = &quot;success&quot;;</span><br><span class="line">            that.fileId = res.data;</span><br><span class="line">            that.fileList = [];</span><br><span class="line">            that.isPreview = true;</span><br><span class="line">            that.isShowText = true;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            that.uploadStatus = &quot;fail&quot;;</span><br><span class="line">            that.fileList = [];</span><br><span class="line">            that.isPreview = false;</span><br><span class="line">            that.isShowText = true;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(res =&gt; &#123;</span><br><span class="line">          that.uploadStatus = &quot;fail&quot;;</span><br><span class="line">          that.fileList = [];</span><br><span class="line">          that.isPreview = false;</span><br><span class="line">          that.isShowText = true;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>上传组件在表单验证时的必填项的验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  //设置prop属性</span><br><span class="line">  &lt;el-form-item prop=&quot;attachmentList&quot; label=&quot;租赁合同：&quot; required&gt;</span><br><span class="line">  &lt;el-upload</span><br><span class="line">    action=&quot;/api/ent/file/upload&quot;</span><br><span class="line">    list-type=&quot;picture-card&quot;</span><br><span class="line">    accept=&quot;.jpg, .png, .jpeg&quot;</span><br><span class="line">    :on-remove=&quot;(file,fileList)=&gt;handleRemove(file,fileList,&apos;in&apos;)&quot;</span><br><span class="line">    :file-list=&quot;rentInItem.attachmentList&quot;</span><br><span class="line">    :on-success=&quot;(data)=&gt;uploadSuccess(data,&apos;in&apos;)&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  //设置自定义的验证方式</span><br><span class="line">var validatorRentImg = (rule, value, callback) =&gt; &#123;</span><br><span class="line">    if (value.length === 0) &#123;</span><br><span class="line">      callback(new Error(&quot;请上传租赁合同&quot;));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  return &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      attachmentList: [&#123; validator: validatorRentImg, trigger: &quot;change&quot; &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    rentInItem: &#123;</span><br><span class="line">      lessor: &quot;&quot;,</span><br><span class="line">      lessorCreditCode: &quot;&quot;,</span><br><span class="line">      lessorEntType: &quot;&quot;,</span><br><span class="line">      areaOfInLand: &quot;&quot;,</span><br><span class="line">      rentPeriod: &quot;&quot;,</span><br><span class="line">      attachmentList: []</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;element-ui 组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/vue/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://chensanr.gitee.io/categories/Vue/"/>
    
      <category term="element" scheme="https://chensanr.gitee.io/categories/Vue/element/"/>
    
    
      <category term="element" scheme="https://chensanr.gitee.io/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>前端编码规范</title>
    <link href="https://chensanr.gitee.io/2020/01/29/web-rules/"/>
    <id>https://chensanr.gitee.io/2020/01/29/web-rules/</id>
    <published>2020-01-29T02:49:54.000Z</published>
    <updated>2022-01-25T09:14:59.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>了解前端编码规范</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a></p><h2 id="一般代码规范"><a href="#一般代码规范" class="headerlink" title="一般代码规范"></a>一般代码规范</h2><p>1.文件/资源命名：在 web 项目中，所有的文件名应该都遵循同一命名约定。</p><ul><li><p>减号（-）是用来分隔文件名</p></li><li><p>确保文件命名总是以字母开头而不是数字</p></li><li><p>资源的字母名称必须全为小写</p></li><li><p>对文件增加前后缀或特定的扩展名时，建议使用点分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my-script.js</span><br><span class="line">my-camel-case-name.css</span><br><span class="line">i-love-underscores.html</span><br><span class="line">thousand-and-one-scripts.js</span><br><span class="line">my-file.min.css</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>协议</p><ul><li>不要指定引入资源所带的具体协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当引入图片或其他媒体文件，还有样式和脚本时，URLs 所指向的具体路径，不要指定协议部分（http:, https:），除非这两者协议都不可用</span><br><span class="line">&lt;script src=&quot;http://cdn.com/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">而可采用这种方式&lt;script src=&quot;//cdn.com/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">.example &#123;</span><br><span class="line">    &lt;!-- background: url(http://static.example.com/images/bg.jpg); --&gt;</span><br><span class="line">    background: url(//static.example.com/images/bg.jpg);采用下面这种</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注释</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 筛选条件</span><br><span class="line"> * @param &#123;Number&#125; dataYear - 年份</span><br><span class="line"> * @author xiaomeng</span><br><span class="line"> * @constructor - 构造函数声明注释</span><br><span class="line"> * @returns &#123;string|*&#125; 返回值注释</span><br><span class="line"> * @example 示例注释</span><br><span class="line"> * @date 2017年12月05日17:22:43</span><br><span class="line"> * @version 当前代码的版本</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p>文本缩进<br> 一次缩进两个空格</p></li><li><p>代码检查<br> 严格遵循编码规范和格式化风格指南</p></li></ol><h2 id="Vue代码规范"><a href="#Vue代码规范" class="headerlink" title="Vue代码规范"></a>Vue代码规范</h2><p>官方给定风格指南分为四个等级的类型，来推荐用户使用相对规范的写法避免出现错误。</p><h3 id="优先级-A-的规则：必要的-规避错误"><a href="#优先级-A-的规则：必要的-规避错误" class="headerlink" title="优先级 A 的规则：必要的 (规避错误)"></a>优先级 A 的规则：必要的 (规避错误)</h3><ul><li><p>组件名为多个单词<br>组件名应该始终是多个单词的，根组件 App 以及 <transition>、<component> 之类的 Vue 内置组件除外。避免跟现有的以及未来的 HTML 元素相冲突。</component></transition></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;todo-item&apos;, &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件的 data 必须是一个函数。<br>当 data 的值是一个对象时，它会在这个组件的所有实例之间共享。重用这个组件，这时就会产生问题。因为每个组件的实例都引用了相同的数据对象，更改其中一个列表的标题就会改变其它每一个列表的标题。因此每个实例必须生成一个独立的数据对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    listTitle: &apos;&apos;,</span><br><span class="line">    todos: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Prop 定义应该尽量详细<br>至少需要指定其类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  status: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">    validator: function (value) &#123;</span><br><span class="line">      return [</span><br><span class="line">        &apos;syncing&apos;,</span><br><span class="line">        &apos;synced&apos;,</span><br><span class="line">        &apos;version-conflict&apos;,</span><br><span class="line">        &apos;error&apos;</span><br><span class="line">      ].indexOf(value) !== -1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为 v-for 设置键值<br>总是用 key 配合 v-for。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;li</span><br><span class="line">  v-for=&quot;todo in todos&quot;</span><br><span class="line">  :key=&quot;todo.id&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>避免 v-if 和 v-for 用在一起<br>当 Vue 处理指令时，v-for 比 v-if 具有更高的优先级<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul v-if=&quot;shouldShowUsers&quot;&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;user in users&quot;</span><br><span class="line">    :key=&quot;user.id&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>为组件样式设置作用域</li></ul><h3 id="优先级-B：强烈推荐"><a href="#优先级-B：强烈推荐" class="headerlink" title="优先级 B：强烈推荐"></a>优先级 B：强烈推荐</h3><ul><li><p>单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyComponent.vue</span><br><span class="line">my-component.vue</span><br></pre></td></tr></table></figure></li><li><p>基础组件名:应用特定样式和约定的基础组件 (也就是展示类的、无逻辑的或无状态的组件) 应该全部以一个特定的前缀开头，比如 Base、App 或 V。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|- BaseButton.vue</span><br><span class="line">|- AppTable.vue</span><br><span class="line">|- VIcon.vue</span><br></pre></td></tr></table></figure></li><li><p>单例组件名:只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。不意味着组件只可用于一个单页面,而是每个页面只使用一次,永远不接受任何 prop （TheHeading.vue）</p></li><li><p>和父组件紧密耦合的子组件应该以父组件名作为前缀命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|- TodoList.vue</span><br><span class="line">|- TodoListItem.vue</span><br><span class="line">|- TodoListItemButton.vue</span><br></pre></td></tr></table></figure></li><li><p>模板中的组件名大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在所有地方 --&gt;</span><br><span class="line">import MyComponent from &apos;./MyComponent.vue&apos;</span><br><span class="line">&lt;my-component&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure></li><li><p>Prop 名大小写:在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  greetingText:&#123;</span><br><span class="line">    type:String</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">&lt;WelcomeMessage greeting-text=&quot;hi&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="优先级-C：推荐"><a href="#优先级-C：推荐" class="headerlink" title="优先级 C：推荐"></a>优先级 C：推荐</h3><ul><li>组件/实例的选项应该有统一的顺序。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">副作用 (触发组件外的影响)</span><br><span class="line">el</span><br><span class="line">全局感知</span><br><span class="line">name</span><br><span class="line">parent</span><br><span class="line">模板依赖 (模板内使用的资源)</span><br><span class="line">components</span><br><span class="line">directives</span><br><span class="line">filters</span><br><span class="line">组合</span><br><span class="line">extends</span><br><span class="line">mixins</span><br><span class="line">接口</span><br><span class="line">props/propsData</span><br><span class="line">本地状态</span><br><span class="line">data</span><br><span class="line">computed</span><br><span class="line">事件</span><br><span class="line">watch</span><br><span class="line">生命周期钩子函数</span><br><span class="line">methods</span><br><span class="line">渲染 (组件输出的声明式描述)</span><br><span class="line">template</span><br><span class="line"></span><br><span class="line">script - template - css</span><br></pre></td></tr></table></figure></li></ul><h3 id="优先级-D-谨慎使用"><a href="#优先级-D-谨慎使用" class="headerlink" title="优先级 D: 谨慎使用"></a>优先级 D: 谨慎使用</h3><h2 id="git代码提交规范"><a href="#git代码提交规范" class="headerlink" title="git代码提交规范"></a>git代码提交规范</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><p>其中，Header 是必需的，Body 和 Footer 可以省略<br>Header部分只有一行，包括两个字段：type（必需）和subject（必需）。<br>type用于说明 commit 的类别，只允许使用下面9个标识，subject是 commit 目的的简短描述，不超过50个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">feat: 新功能（feature）</span><br><span class="line">fix: 修补bug</span><br><span class="line">docs: 文档（documentation）</span><br><span class="line">style: 格式（不影响代码运行的变动）</span><br><span class="line">refactor: 重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">chore: 构建过程或辅助工具的变动</span><br><span class="line">revert: 撤销，版本回退</span><br><span class="line">perf: 性能优化</span><br><span class="line">test：测试</span><br><span class="line">improvement: 改进</span><br><span class="line">build: 打包</span><br><span class="line">ci: 持续集成</span><br><span class="line"></span><br><span class="line">举例说明：</span><br><span class="line">feat: 增加订单详情  closes xxxx (closes非必需)</span><br><span class="line">fix: 修复xx情况下xx问题  closes xxxx (closes非必需)</span><br><span class="line">docs: 修改md文件</span><br><span class="line">style: 修改订单列表样式</span><br><span class="line">refactor: 重构utils.js下部分方法</span><br><span class="line">chore: 增加xxx插件/xxxxloader</span><br><span class="line">revert: 回退当前版本667ec到 sssee2</span><br><span class="line">perf: 优化了xxx，提高了渲染速度</span><br><span class="line">test：增加测试</span><br><span class="line">improvement: 改进</span><br><span class="line">build: 打包</span><br><span class="line">ci: 持续集成</span><br></pre></td></tr></table></figure></p><p>在有数编制的规范：<a href="https://gitee.com/Chensanr/daily-code/blob/master/js-basis/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3.docx" target="_blank" rel="noopener">前端编码规范-有数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;了解前端编码规范&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="javaScript" scheme="https://chensanr.gitee.io/categories/Web/javaScript/"/>
    
    
      <category term="ECMAScript（核心js）" scheme="https://chensanr.gitee.io/tags/ECMAScript%EF%BC%88%E6%A0%B8%E5%BF%83js%EF%BC%89/"/>
    
      <category term="API标准库" scheme="https://chensanr.gitee.io/tags/API%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>在路上</title>
    <link href="https://chensanr.gitee.io/2020/01/26/life2/"/>
    <id>https://chensanr.gitee.io/2020/01/26/life2/</id>
    <published>2020-01-26T01:30:28.000Z</published>
    <updated>2022-01-25T09:14:59.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>身体和心总有一个在路上</p></blockquote><p><img src="/images/life/daily/default.jpg" alt="目录"><a id="more"></a></p><p>也不知道是不是错觉，最近发生的很多事让我觉得，有些东西好像悄悄在改变。亦或是人心，亦或是人性。</p><p>但是，世界本就良莠不齐。好坏不能一言以论之，每个人心里都有一杆秤，作为我们普通人以其量之自身，而后向世之大者看齐。</p><p>世间美好皆由自身，而非外事外物。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;身体和心总有一个在路上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/life/daily/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Life" scheme="https://chensanr.gitee.io/categories/Life/"/>
    
      <category term="idea" scheme="https://chensanr.gitee.io/categories/Life/idea/"/>
    
    
      <category term="daily" scheme="https://chensanr.gitee.io/tags/daily/"/>
    
  </entry>
  
  <entry>
    <title>一人场演唱会</title>
    <link href="https://chensanr.gitee.io/2019/11/16/jackZhou/"/>
    <id>https://chensanr.gitee.io/2019/11/16/jackZhou/</id>
    <published>2019-11-15T16:00:00.000Z</published>
    <updated>2022-01-25T09:14:59.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>没有稻香<br>没有七里香<br>但是有说好不哭</p></blockquote><p><img src="/images/life/daily/jackzhou.jpg" alt="出门"><a id="more"></a></p><p>醒来已经九点，拉开窗帘推开门，微光照射进来，外面的喧闹声渐缓清晰，街道边几个行人稀稀落落的漫步行走。抬头深吸一口气，今天确实是个好天，又忍不住长叹，原来已经毕业一年半了。</p><p>室友几天前去海南看花花的演唱会了，在那之前凭借她多年追星的手速给我抢了一张周杰伦的票。晚上开场，时间很充裕，在家里悠哉的荒度白日，直到下午五点，才开始不紧不慢收拾自己。出门去公交车站等车，站台零散的站着几对情侣，站在最角落的一对情侣应该是从外地过来的，女孩子拿着相机环顾四周，似乎在寻找能入镜的实物。直到她的镜头对准身侧的男孩，男孩似乎也有感应似的侧头对她笑，伸手摸摸她的头，对她低语几句。这一刻我变柠檬酱了，忍不住喟叹年轻真好，如果朋友在身侧，应该会吐槽我又老干部了。</p><p>从四方而来的杰迷熙来攘往地聚集在体育场外，我在九号门前的草地找了一块可以落座的石头等待开场。等到薄暮冥冥，场内外的灯光渐渐明晰，我起来走向人数还算稀少的队伍中站定，站在我前面的是一个白净的大男孩，和他的朋友在讨论今晚的演唱会以及他们票的由来。记录这段单纯是因为我跟他说话了并且他长的好看，虽然能预感，但到最后结束事实也证明今晚我真的只说了一句话。我的票是抢的，虽然不是我自己抢的。</p><p>我的位置在26排，进去的时候发现后排的荧光棒被人收走拿去卖了，所以整场我就干巴巴的看着遥远的舞台，听着熟悉的旋律，哼着轻快的调调。没有稻香没有七里香但是有说好不哭，献给我第一次听的演唱会，如果不是露天的话，我会更开心的，毕竟十一月份的杭州夜晚确实算不上暖和。</p><p>将近十点散场，等我走出人群坐上公交的时候已经十一点多了。司机师傅载着一车杰迷，拿起手机拍了视频发给同事，抱怨他请不到假烂在手里的票，抱怨为了生活但是开心遇到，陪我们一起嬉笑。可惜我还是没有赶上一号线的最后一趟，只能蹲在路边等滴滴师傅赶来。室友海南那边最后一场也刚散场，我们俩分享这片刻的开心和悲伤。回到家已经凌晨，今天短暂又漫长，确是个好天。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;没有稻香&lt;br&gt;没有七里香&lt;br&gt;但是有说好不哭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/life/daily/jackzhou.jpg&quot; alt=&quot;出门&quot;&gt;
    
    </summary>
    
      <category term="Life" scheme="https://chensanr.gitee.io/categories/Life/"/>
    
      <category term="daily" scheme="https://chensanr.gitee.io/categories/Life/daily/"/>
    
    
      <category term="生活" scheme="https://chensanr.gitee.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>阿里云轻量服务器Centos 7.3开发环境配置</title>
    <link href="https://chensanr.gitee.io/2019/09/29/centos-1/"/>
    <id>https://chensanr.gitee.io/2019/09/29/centos-1/</id>
    <published>2019-09-28T16:00:00.000Z</published>
    <updated>2022-01-25T09:14:59.640Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>阿里云轻量服务器</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想自己开发一个小程序，需要服务器和后台给小程序提供接口。所以记录了一下，服务器在开发前必须要准备的开发环境。<br>本人是前端小菜鸡，后台用的是node,数据库用mysql，顺便用nginx反向代理。</p><p>在操作前，你需要准备：<br>一台服务器（我的是学生价的轻量云服务器 centos 7.3的）<br>域名（顺便备案）<br>本地安装个xshell和xftp</p><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>安装步骤：<br>1、 wget命令下载Node.js安装包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></p><p>2.解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf node-v6.9.5-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></p><p>3.全局配置node,创建软链，不进行这一步操作你在别的目录是启动不了node的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/node-v6.9.5-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /root/node-v6.9.5-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></p><p>4.检测是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><p>5.若是想要修改默认安装目录(比如/opt/node),则执行下面操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/node/</span><br><span class="line">mv /root/node-v6.9.5-linux-x64/* /opt/node/</span><br><span class="line">rm -f /usr/local/bin/node</span><br><span class="line">rm -f /usr/local/bin/npm</span><br><span class="line">ln -s /opt/node/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /opt/node/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></p><p>6.安装cnpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm - -registry=https://registry.npm.taobao.org </span><br><span class="line">ln -s opt/node/bin/cnpm /usr/bin/cnpm  创建软链 全局使用（opt/node/bin/cnpm是你的安装目录）。</span><br></pre></td></tr></table></figure></p><p>以后通过cnpm或者npm安装的包，都需要将它添加至全局，不然使用的时候会出现bug</p><p>参考地址：<a href="https://yq.aliyun.com/articles/162294?spm=a2c4e.11153940.0.0.127743eddvPiAR" target="_blank" rel="noopener">node</a></p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>1.安装mysql，mysql-devel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql</span><br><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure></p><p>2.官网下载安装mysql-server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure></p><p>3.安装成功后重启mysql服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure></p><p>4.进入数据库，修改初始密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root </span><br><span class="line">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;123&apos;);  //123表示你的root账号的密码</span><br></pre></td></tr></table></figure></p><p>安装参考地址：<a href="https://yq.aliyun.com/articles/49808" target="_blank" rel="noopener">mysql</a></p><p>5.配置mysql</p><ol><li><p>中文编码问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/my.cnf 编辑数据库配置文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">因为我的配置文件没有client,只有mysqld。所以第一步先加上client</span><br><span class="line">   ［client］</span><br><span class="line">   default-character-set=utf8 </span><br><span class="line">第二步在加上mysqld的配置</span><br><span class="line">   [mysqld]</span><br><span class="line">   default-storage-engine=INNODB </span><br><span class="line">   character-set-server=utf8 </span><br><span class="line">   collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入数据库，输入</span><br><span class="line">show varibales like &apos;charcter%&apos;;</span><br><span class="line">若是除了character_set_filesystem之外都显示utf-8的话则成功</span><br></pre></td></tr></table></figure><p>参考地址：<a href="https://yq.aliyun.com/articles/71424?spm=5176.2000012.0.0.78e75e860s69i4" target="_blank" rel="noopener">mysql</a></p><p>2.远程连接（workbence连接服务器数据库时）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>技术胖的视频，比较详细<br>参考地址：<a href="https://jspang.com/posts/2018/10/05/nginx.html" target="_blank" rel="noopener">nginx</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;阿里云轻量服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/other/hexo/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Other" scheme="https://chensanr.gitee.io/categories/Other/"/>
    
      <category term="server" scheme="https://chensanr.gitee.io/categories/Other/server/"/>
    
    
      <category term="centos" scheme="https://chensanr.gitee.io/tags/centos/"/>
    
      <category term="server" scheme="https://chensanr.gitee.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://chensanr.gitee.io/2019/08/28/git/"/>
    <id>https://chensanr.gitee.io/2019/08/28/git/</id>
    <published>2019-08-28T07:06:00.000Z</published>
    <updated>2022-01-26T06:36:29.937Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>git命令日常学习</p></blockquote><p><img src="/images/other/hexo/default.jpg" alt="目录"><a id="more"></a></p><h1 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h1>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init 初始化仓库（.git）</span><br><span class="line">git add . 把文件添加到缓存区</span><br><span class="line">git commit -m &apos;&apos; 把缓存区文件提交到仓库 </span><br><span class="line">git status 查看当前仓库状态</span><br><span class="line">git log 查看版本历史提交记录</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git branch 查看当前分支 </span><br><span class="line"></span><br><span class="line">git branch -r 查看远程分支</span><br><span class="line"></span><br><span class="line">git branch -a 查看所有分支（本地和远程）</span><br><span class="line"></span><br><span class="line">git branch &lt;branchname&gt; //新建分支</span><br><span class="line"></span><br><span class="line">git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; //重命名本地分支</span><br><span class="line"></span><br><span class="line">git branch -d &lt;branchname&gt; //删除本地分支</span><br><span class="line"></span><br><span class="line">git branch -d -r &lt;branchname&gt; //删除远程分支，删除后还需推送到服务器</span><br><span class="line">git push origin:&lt;branchname&gt;  //删除后推送至服务器</span><br></pre></td></tr></table></figure><h2 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h2><h3 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.先有本地库，后有远程库时。把本地仓库关联到远程库。（本地和远程都有库）</span><br><span class="line">(1) 在远程创建一个仓库（空仓库，不勾选readme.txt文件）</span><br><span class="line"></span><br><span class="line">(2) 在本地init了的仓库里运行关联仓库命令， git remote add origin 远程仓库地址</span><br><span class="line"></span><br><span class="line">(3) 关联后，使用命令git push -u origin master 进行第一次提交</span><br><span class="line"></span><br><span class="line">另外也可以关联多个远程仓库地址：关联多个远程仓库时，只需要取不同的远程仓库名，再push到不同远程仓库名上即可</span><br><span class="line">git remote add gitlab gitlab地址</span><br><span class="line">git push gitlab(远程仓库名) master(分支)</span><br><span class="line"></span><br><span class="line">2.本地无库，远程有库，从远程仓库克隆即可（推荐使用）</span><br><span class="line">git clone 远程仓库地址</span><br><span class="line"></span><br><span class="line">3.取消关联</span><br><span class="line">git remote remove origin/gitlab(远程仓库名)</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>  场景：当前dev分支,dev分支要合并到线上master分支</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchname&gt; 切换到要合并的分支</span><br><span class="line"></span><br><span class="line">git pull 拉最新代码</span><br><span class="line"></span><br><span class="line">git merge dev 把dev合并到当前分支</span><br><span class="line"></span><br><span class="line">git push 把更新推送到远程</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>  HEAD表示当前版本（最新提交版本），HEAD^表示上一版本</p><p>  回退命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 简洁/完整哈希索引值   ：回到指定哈希值所对应的版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD：强制工作区、暂存区、本地库为当前HEAD指针所在的版本</span><br><span class="line"></span><br><span class="line">  git reset --hard HEAD^：后退一个版本(上一个版本)</span><br><span class="line"></span><br><span class="line">  tip：一个^表示回退一个版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~1：后退一个版本</span><br><span class="line"></span><br><span class="line">  tip：波浪线~后面的数字表示后退几个版本</span><br></pre></td></tr></table></figure></p><p>  回退场景：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.在add 和 commit之前。想把当前工作区的修改返回原来状态用此命令。</span><br><span class="line">git chackout -- file(文件名)</span><br><span class="line">适用乱改文件后未进行git add和commit</span><br><span class="line"></span><br><span class="line">2.把暂存区的修改回退到工作区</span><br><span class="line">git reset HEAD file(文件名)</span><br><span class="line">适用乱改文件后add操作但是没有commit，可以使用git reset HEAD file(文件名)回到工作区，若是需要再回到最原来状态需要git checkout -- file</span><br><span class="line"></span><br><span class="line">3.回退版本，已经add和commit了之后的操作则需要</span><br><span class="line">git reset --hard 版本号/HEAD^</span><br></pre></td></tr></table></figure></p><h3 id="拉取远程分支到本地"><a href="#拉取远程分支到本地" class="headerlink" title="拉取远程分支到本地"></a>拉取远程分支到本地</h3><ol><li><p>首先把远程分支先拉到本地（情况：本地无远程分支dev,想拉取同名dev分支到本地）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin dev（dev为远程仓库的分支名）</span><br></pre></td></tr></table></figure></li><li><p>在本地创建分支dev并切换到该分支，然后跟远程的origin地址上的dev分支关联起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev(本地分支名称) origin/dev(远程分支名称)   </span><br><span class="line">注：origin/dev表示跟远程的origin地址上的dev分支关联起来</span><br></pre></td></tr></table></figure></li><li><p>把远程某个分支上的内容都拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev(远程分支名称)</span><br></pre></td></tr></table></figure></li><li><p>再git add ,git commit ,git push代码</p></li></ol><h3 id="本地未切换分支修改代码"><a href="#本地未切换分支修改代码" class="headerlink" title="本地未切换分支修改代码"></a>本地未切换分支修改代码</h3><ul><li>master分支代码提交（此次版本要修改的分支地址dev_20210101，未切换分支直接在master上修改代码）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;&apos;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>若要切换本地不存在的远程分支，先将远程git仓库里的指定分支拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.本地没有分支，切换并关联远程分支</span><br><span class="line">git checkout -b dev_20210101 origin/dev_20210101</span><br><span class="line">2.本地已经有建分支</span><br><span class="line">切换新分支</span><br><span class="line">git checkout dev_20210101</span><br><span class="line">关联远程分支</span><br><span class="line">git push --set-upstream origin branch_name</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>合并master分支到dev_20210101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge master</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>提交dev_20210101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>切换到master分支,进行master分支回退版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git reset hard HEAD</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;git命令日常学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/other/hexo/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Other" scheme="https://chensanr.gitee.io/categories/Other/"/>
    
      <category term="git" scheme="https://chensanr.gitee.io/categories/Other/git/"/>
    
    
      <category term="git" scheme="https://chensanr.gitee.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>uniapp</title>
    <link href="https://chensanr.gitee.io/2019/07/10/miniPro/"/>
    <id>https://chensanr.gitee.io/2019/07/10/miniPro/</id>
    <published>2019-07-09T16:00:00.000Z</published>
    <updated>2022-01-25T09:14:59.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>uniapp项目实现一套代码多端发布，可适用小程序，app，h5等项目</p></blockquote><p><img src="/images/vue/default.jpg" alt="目录"><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>公司最近要开发一个受益人所有认查询的小程序。第一次接触，踩了很多坑，包括小程序登录获取授权信息等逻辑，故记录下来。<br>开发工具：HBuilder 和微信开发者工具。<br>主要采用uni-app代替原生进行开发。</p><h2 id="多端项目框架-uniapp"><a href="#多端项目框架-uniapp" class="headerlink" title="多端项目框架(uniapp)"></a>多端项目框架(uniapp)</h2><p>写了一个包括不限于http，network等封装后形成一个基础的项目框架配置。<br>项目框架包括基础的接口请求和网络诊断。</p><ul><li><p>http.js文件内部是请求request的构造函数 通过Vue.prototype.$ysHttp = http;绑定到Vue，可以通过this.$ysHttp请求接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import &#123; config &#125;  from &quot;./config.js&quot;</span><br><span class="line">import &#123;login&#125; from &apos;./utils.js&apos;;</span><br><span class="line">class Http &#123;</span><br><span class="line">    constructor(options) &#123;</span><br><span class="line">        this.options = options;</span><br><span class="line">        this.config = &#123;</span><br><span class="line">            url: config.DOMAIN,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            header: &#123;&#125;,</span><br><span class="line">            method: &quot;&quot;,</span><br><span class="line">            dataType: &quot;json&quot;,</span><br><span class="line">            responseType: &quot;text&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">        this.init();</span><br><span class="line">        return this.request();</span><br><span class="line">    &#125;</span><br><span class="line">    setToken()&#123;</span><br><span class="line">        this.config.header = &#123;&quot;token&quot;: uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">        this.config.data = &#123;...this.config.data,&apos;token&apos;:uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    init() &#123;</span><br><span class="line">        this.config.header = &#123;&quot;token&quot;: uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">        this.options.data = &#123;...this.options.data,&apos;token&apos;:uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">        this.options.url = this.options.url.indexOf(&quot;http&quot;) &gt; -1 ? this.options.url :(this.config.url + this.options.url);</span><br><span class="line">        this.options.method = this.options.method ? this.options.method.toUpperCase() : &apos;GET&apos;;</span><br><span class="line">        this.config = Object.assign(&#123;&#125;, this.config, this.options);</span><br><span class="line">    &#125;</span><br><span class="line">    request() &#123;</span><br><span class="line">        if(!config.netWork.hasNet())&#123;</span><br><span class="line">            uni.showToast(&#123;</span><br><span class="line">                title:&quot;请检查网络&quot;,</span><br><span class="line">                icon:&apos;loading&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">            return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">                setTimeout(function()&#123;</span><br><span class="line">                    uni.hideToast();</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;,3000)</span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        return uni.request(this.config).then(res=&gt; &#123;</span><br><span class="line">            let data = res[1];</span><br><span class="line">            if(data.statusCode == &apos;401&apos;)&#123;//token失效</span><br><span class="line">                return login().then(res=&gt;&#123;</span><br><span class="line">                    this.setToken();</span><br><span class="line">                    return this.request();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;else if(data.statusCode == &apos;200&apos;)&#123;</span><br><span class="line">                return data.data</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">export const http = function(options)&#123;</span><br><span class="line">    return new Http(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NetWork.js文件是定义了当前网络状态的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">export default class NetWork&#123;</span><br><span class="line">constructor() &#123;</span><br><span class="line">    this.netWorkStatus = 0 ;//0 无网络，1，网络正常</span><br><span class="line">this.init();</span><br><span class="line">&#125;</span><br><span class="line">init = ()=&gt;&#123;</span><br><span class="line">let that = this;</span><br><span class="line">uni.getNetworkType(&#123;</span><br><span class="line">complete(res)&#123;</span><br><span class="line">that.netWorkStatus = res.networkType === &quot;none&quot; ? 0 : 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">that._event();</span><br><span class="line">&#125;</span><br><span class="line">_event()&#123;</span><br><span class="line">let that = this;</span><br><span class="line">uni.onNetworkStatusChange((res) =&gt; &#123;</span><br><span class="line">that.netWorkStatus = res.networkType === &quot;none&quot; ? 0 : 1;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">getStatus = ()=&gt;&#123;</span><br><span class="line">return this.netWorkStatus;</span><br><span class="line">&#125;</span><br><span class="line">hasNet = ()=&gt;&#123;</span><br><span class="line">return this.netWorkStatus === 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>utils.js文件定义了项目能用到的所有方法</p></li><li><p>config.js文件定义全局配置（包括了network对象）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import NetWork from &quot;./NetWork.js&quot;;</span><br><span class="line">export const config = &#123;</span><br><span class="line">    // production</span><br><span class="line">    // DOMAIN : &quot;https://yscredit.com&quot;,</span><br><span class="line">    </span><br><span class="line">    //dev</span><br><span class="line">    DOMAIN : &quot;http://10.1.5.7:8081&quot;,</span><br><span class="line">    // reqConfig:&#123;</span><br><span class="line">    // exeQueue : true,</span><br><span class="line">    // promiseQueue : []</span><br><span class="line">    // &#125;,</span><br><span class="line">    //h5</span><br><span class="line">    //DOMAIN :&quot;&quot;,</span><br><span class="line">    netWork :new NetWork()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DOMAIN域名常量：</span><br><span class="line">在h5页面打开或者打包时 DOMAIN :&quot;&quot;；开发时通过vue.config.js进行代理设置解决跨域问题（或者使用xbuilder内置浏览器）</span><br><span class="line">在微信小程序打开或打包时 域名改为相对应的域名地址。</span><br></pre></td></tr></table></figure></li><li><p>constant.js定义了全局的常量</p></li></ul><p>项目地址：<a href="https://github.com/chenjing123456/uniapp-frame" target="_blank" rel="noopener">https://github.com/chenjing123456/uniapp-frame</a></p><h2 id="小程序登录逻辑"><a href="#小程序登录逻辑" class="headerlink" title="小程序登录逻辑"></a>小程序登录逻辑</h2><h3 id="判断授权"><a href="#判断授权" class="headerlink" title="判断授权"></a>判断授权</h3><p>判断用户是否已授权过。已授权则跳过授权逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isAuth()&#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    uni.getSetting(&#123;</span><br><span class="line">        success(res) &#123;</span><br><span class="line">            //res.authSetting //所有设置项</span><br><span class="line">            if(res.authSetting[&apos;scope.userInfo&apos;])&#123;//获取用户是否已授权用户信息项</span><br><span class="line">                that.isShow = false;   //this.isShow用于判断是否显示用户授权弹框</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                that.isShow = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>uni.openSetting获取用户的当前设置，即可获取用户是否已经授权。</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>未授权则弹框进行授权登录。注意，微信未防止授权泛滥，修改了授权逻辑，必须通过按钮获取授权。<br>1.弹框代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;uni-popup :show=&quot;isShow&quot; type=&quot;middle&quot; mode=&quot;fixed&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;auth-modal&quot;&gt;</span><br><span class="line">        &lt;image class=&quot;modal-img&quot; src=&quot;../../static/copy@2x.png&quot;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;view class=&quot;modal-text&quot;&gt;</span><br><span class="line">            &lt;text&gt;&#123;&#123;contant[0]&#125;&#125;&lt;/text&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;button class=&apos;modal-foot bottom&apos; plain=&apos;false&apos; type=&apos;default&apos; open-type=&quot;getUserInfo&quot; withCredentials=&quot;true&quot; lang=&quot;zh_CN&quot; @getuserinfo=&quot;getUserInfo&quot;&gt;</span><br><span class="line">            &#123;&#123;contant[1]&#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/uni-popup&gt;</span><br></pre></td></tr></table></figure></p><p>其中button是用于调取授权弹框的， open-type=”getUserInfo”表示想授权获取用户信息<br>如图：<img src="/images/vue/login.png" alt="login"></p><p>2.点击授权按钮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo(userInfo) &#123;//用户是否允许获取授权信息</span><br><span class="line">    let d = userInfo.detail;</span><br><span class="line">    if(d.errMsg == &quot;getUserInfo:ok&quot;)&#123;//允许</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.isShow = false;</span><br><span class="line">        login();//登录</span><br><span class="line">    &#125;else&#123;//拒绝</span><br><span class="line">        this.isShow = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>如图：<img src="/images/vue/auth.png" alt="auth"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>若用户同意授权则登录获取code,把code传给后台获取token，把token放进请求头或者请求参数即可。若token失效则重新调用login获取新token。</p><p>1.登录方法(封装在util.js中)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">export const login=()=&gt;&#123;</span><br><span class="line">// 1.获取登录用户code</span><br><span class="line">return new Promise(function(resolve, reject)&#123;</span><br><span class="line">uni.login(&#123;</span><br><span class="line">    provider: &apos;weixin&apos;,</span><br><span class="line">    success: function(loginRes) &#123;</span><br><span class="line">        let code = loginRes.code;</span><br><span class="line">                //2.将用户登录code传递到后台置换用户SessionKey、OpenId等信息</span><br><span class="line">                if(code)&#123;</span><br><span class="line">                    uni.request(&#123;</span><br><span class="line">                        url:`$&#123;config.DOMAIN&#125;/weixin/getTokenByWexin`, //后台接口</span><br><span class="line">                        data:&#123;</span><br><span class="line">                            code:code</span><br><span class="line">                        &#125;,</span><br><span class="line">                        success(res) &#123;</span><br><span class="line">                            let data = res.data;</span><br><span class="line">                            if(data.code == &apos;00&apos;)&#123;</span><br><span class="line">                                uni.setStorageSync(&apos;token&apos;, data.data.token);//token存入本地</span><br><span class="line">                                //uni.setStorageSync(&apos;code&apos;, code);</span><br><span class="line">                            &#125;</span><br><span class="line">                            resolve();</span><br><span class="line">                        &#125;,</span><br><span class="line">                        fail(res) &#123;</span><br><span class="line">                            reject();</span><br><span class="line">                            uni.showToast(&#123;</span><br><span class="line">                                title: res.data.codeMsg,</span><br><span class="line">                                duration: 2000</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            fail(loginRes) &#123;</span><br><span class="line">                reject();</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.在封装uni.request时，在请求头或者请求参数里把token放进去.在登录成功之后就能通过token获取后台接口信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.config.header = &#123;&quot;token&quot;: uni.getStorageSync(&apos;token&apos;)&#125;;</span><br><span class="line">this.config.data = &#123;...this.config.data,&apos;token&apos;:uni.getStorageSync(&apos;token&apos;)&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="小程序开发注意点"><a href="#小程序开发注意点" class="headerlink" title="小程序开发注意点"></a>小程序开发注意点</h3><p>1.设置背景图片</p><p>在内联样式中可以直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image class=&quot;modal-img&quot; src=&quot;../../static/copy@2x.png&quot;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure></p><p>但是在内部样式中必须通过~@去拿，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background-image: url(&apos;~@/static/bgmin@2x.png&apos;);</span><br><span class="line">// background-color: #005CFF;</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-position: center center;</span><br><span class="line">background-size:cover;</span><br></pre></td></tr></table></figure></p><p>2.背景图片小于40kb的微信会自动转成base64的格式，但是大于40kb的需要开发者自己转化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;search-content&quot; :style=&quot;&#123;backgroundImage:`url($&#123;bgImg&#125;)`&#125;&quot;&gt;</span><br><span class="line">//bgImg是base64的路径</span><br></pre></td></tr></table></figure></p><p>3.uni.navigateTo跳转，保留当前页面，跳转到应用内的某个页面<br>参数url有长度限制，太长的字符串会传递失败，可使用窗体通信、全局变量，或encodeURIComponent等多种方式解决。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator :url=&quot;&apos;/pages/test/test?item=&apos;+ encodeURIComponent(JSON.stringify(item))&quot;&gt;&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line">// 在test.vue页面接受参数</span><br><span class="line">onLoad: function (option) &#123;</span><br><span class="line">    const item = JSON.parse(decodeURIComponent(option.item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 假设item的字段内部有html元素或者是富文本时，需要再做一次处理，不然会报错。</span><br><span class="line">因为url加密传参有时候会出现Uncaught URIError: URI malformed的错误，这是因为你的url中包含了“%”字符，浏览器在对“%”执行decodeURIComponent时报错，正确的解决是将%全部替换为%25再进行传输：</span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">url:&quot;/pages/appCenter/yqDetail?item=&quot;+encodeURIComponent(JSON.stringify(item).replace(/%/g,&apos;%25&apos;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="uniapp多端登录"><a href="#uniapp多端登录" class="headerlink" title="uniapp多端登录"></a>uniapp多端登录</h2><p>uniapp通过条件编译实现一套代码多端登录。<br>文档：<a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">uniapp跨端兼容</a><br>eg:包括微信小程序、浙政钉、和h5等登录；代码逻辑在微信小程序使用微信免登，在浙政钉使用浙政钉的钉钉免登，其余情况使用h5登录（填写账号密码）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;config&#125; from &apos;../../common/config&apos;</span><br><span class="line">import secret from &apos;../../components/secret.vue&apos;</span><br><span class="line">import userAgreement from &apos;../../components/userAgreement.vue&apos;</span><br><span class="line">import uniPopup from &apos;@/components/uni-popup/uni-popup.vue&apos;</span><br><span class="line">//#ifdef H5</span><br><span class="line">import dd from &apos;gdt-jsapi&apos;;//浙政钉jsapi</span><br><span class="line">//#endif</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">query:&#123;</span><br><span class="line">phone:&quot;&quot;,</span><br><span class="line">validCode:&quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">code:&quot;&quot;,</span><br><span class="line">countdown:&quot;获取验证码&quot;,</span><br><span class="line">timestatus:false,</span><br><span class="line">clear:&apos;&apos;,</span><br><span class="line">disabled:false,</span><br><span class="line">codes:&quot;&quot;,</span><br><span class="line">isShow:false,</span><br><span class="line">checked:[],</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">onReady()&#123;</span><br><span class="line">if(this.isShow==&apos;true&apos;)&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">this.isShow==true</span><br><span class="line">//#ifdef  MP-WEIXIN</span><br><span class="line">this.wxLogin()</span><br><span class="line">//#endif</span><br><span class="line">//#ifdef H5</span><br><span class="line">this.ddLogin()</span><br><span class="line">//#endif</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">onLoad(option) &#123;</span><br><span class="line">this.isShow=option.isShow</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">secret,</span><br><span class="line">userAgreement,</span><br><span class="line">uniPopup</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">//获取token 判断是否登陆过</span><br><span class="line">getToken(data)&#123;</span><br><span class="line">// 发起网络请求</span><br><span class="line">return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">this.$http(&#123;</span><br><span class="line">url:&apos;/wxLogin/getToken&apos;,</span><br><span class="line">data:data, </span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">if(res.status==200)&#123;</span><br><span class="line">resolve(res.data)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">reject(res.data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(()=&gt;&#123;</span><br><span class="line">reject()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">//微信小程序免登</span><br><span class="line">wxLogin()&#123;</span><br><span class="line">let that=this</span><br><span class="line">uni.login(&#123;</span><br><span class="line">provider: &apos;weixin&apos;,</span><br><span class="line">success(res) &#123; </span><br><span class="line">console.log(res)</span><br><span class="line">if (res.code) &#123;</span><br><span class="line">   that.codes=res.code</span><br><span class="line">    // 发起网络请求</span><br><span class="line">that.getToken(&#123;</span><br><span class="line">code:res.code,</span><br><span class="line">source:&apos;wx&apos;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">uni.setStorageSync(&apos;token&apos;,res.token);</span><br><span class="line">uni.setStorageSync(&apos;user&apos;,res.username);</span><br><span class="line">uni.switchTab(&#123;</span><br><span class="line">url: &apos;/pages/index/index&apos;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).catch(res=&gt;&#123;</span><br><span class="line">that.isShow=true</span><br><span class="line">&#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">that.isShow=true</span><br><span class="line">console.log(&apos;登录失败！&apos; + res.errMsg)</span><br><span class="line">&#125;</span><br><span class="line">&#125; ,</span><br><span class="line">fail: (err) =&gt; &#123;  </span><br><span class="line">console.log(&apos;uni.login 接口调用失败，将无法正常使用开放接口等服务&apos;, err)  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">            //判断当前是浙政钉还是其他h5端</span><br><span class="line">ddGetAuthCode()&#123;</span><br><span class="line">return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">dd.ready(function() &#123;</span><br><span class="line">dd.getAuthCode().then((result) =&gt;&#123;</span><br><span class="line">console.log(result)</span><br><span class="line">if(result)&#123;</span><br><span class="line">resolve(result.code)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">resolve(&apos;&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">console.error(err);</span><br><span class="line">resolve(&apos;&apos;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">//钉钉免登,如果非钉钉端则为h5</span><br><span class="line">ddLogin()&#123;</span><br><span class="line">let code = &apos;&apos;</span><br><span class="line">let source = &apos;&apos;</span><br><span class="line">let that = this</span><br><span class="line">that.ddGetAuthCode().then(res=&gt;&#123;</span><br><span class="line">if(res===&apos;&apos;)&#123;</span><br><span class="line">source = &apos;h5&apos;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">source = &apos;dd&apos;</span><br><span class="line">code = res</span><br><span class="line">&#125;</span><br><span class="line">that.getToken(&#123;</span><br><span class="line">code:code,</span><br><span class="line">source:source</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">uni.setStorageSync(&apos;token&apos;,res.token);</span><br><span class="line">uni.setStorageSync(&apos;user&apos;,res.username);</span><br><span class="line">uni.switchTab(&#123;</span><br><span class="line">url: &apos;/pages/index/index&apos;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).catch(res=&gt;&#123;</span><br><span class="line">that.isShow=true</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).catch(res=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">// 服务协议、隐私政策--start</span><br><span class="line">userAgreementEvent()&#123;</span><br><span class="line">this.$refs.userAgreement.open()</span><br><span class="line">&#125;,</span><br><span class="line">serviceAgreementContent()&#123;</span><br><span class="line">                this.$refs.secret.open()</span><br><span class="line">&#125;,</span><br><span class="line">serviceAgreement(event)&#123;</span><br><span class="line">this.checked = event.detail.value</span><br><span class="line">&#125;,</span><br><span class="line">    onClose() &#123;</span><br><span class="line">  this.secretDialog=false</span><br><span class="line">  this.userAgreementDioalog=false</span><br><span class="line">&#125;,</span><br><span class="line">// 服务协议--end</span><br><span class="line">onChange(event)&#123;</span><br><span class="line">  this.query.phone=event.target.value</span><br><span class="line">&#125;,</span><br><span class="line">onChange1(event)&#123;</span><br><span class="line"> this.query.validCode=event.target.value</span><br><span class="line">&#125;,</span><br><span class="line">// 获取验证码</span><br><span class="line">_getCode()&#123;</span><br><span class="line">  let phonereg = /^[1][3,4,5,7,8][0-9]&#123;9&#125;$/;</span><br><span class="line">  if (!phonereg.test(this.query.phone)) &#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: &apos;请输入正确的手机号&apos;,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 2000</span><br><span class="line">&#125;);</span><br><span class="line">return false;</span><br><span class="line">  &#125; </span><br><span class="line">this.disabled = true;</span><br><span class="line">this.$http(&#123;</span><br><span class="line">url:&apos;/wxLogin/sendCodeBylogin&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">phone:this.query.phone,</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">if(res.status == &apos;200&apos;)&#123;</span><br><span class="line">    // clearInterval(this.timer); //清楚定时器</span><br><span class="line">this.timestatus = true;</span><br><span class="line">this.countdown = 60;</span><br><span class="line">this.clear = setInterval(this.countDown,1000);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.disabled = false;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: res.message,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 1000</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">  // 倒计时</span><br><span class="line">            countDown()&#123;</span><br><span class="line">                if(!this.countdown)&#123;                    </span><br><span class="line">                    this.disabled = false;</span><br><span class="line">                    this.timestatus = false;</span><br><span class="line">                    this.countdown = &apos;获取验证码&apos;;</span><br><span class="line">                    clearInterval(this.clear);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    --this.countdown;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 普通登录</span><br><span class="line">_getLogin()&#123;</span><br><span class="line">let that=this;</span><br><span class="line">let &#123;phone,validCode&#125; = this.query;</span><br><span class="line">if(this.checked.length&lt;=0)&#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: &apos;请先阅读服务协议&apos;,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 2000</span><br><span class="line">&#125;);</span><br><span class="line">return</span><br><span class="line">&#125;else&#123;</span><br><span class="line">if(!phone||!validCode)&#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">    title: &apos;请填写手机号或者验证码&apos;,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">    duration: 2000</span><br><span class="line">&#125;);</span><br><span class="line">return</span><br><span class="line">&#125;else&#123;</span><br><span class="line">that.getCurrentCode()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//重新获取code</span><br><span class="line">getCurrentCode()&#123;</span><br><span class="line">let that = this</span><br><span class="line">//#ifdef  MP-WEIXIN</span><br><span class="line">uni.login(&#123;</span><br><span class="line">provider: &apos;weixin&apos;,</span><br><span class="line">success(res) &#123; </span><br><span class="line">if (res.code) &#123;</span><br><span class="line">   that.codes=res.code</span><br><span class="line">    // 发起网络请求</span><br><span class="line">that.normalLogin(&apos;wx&apos;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(&apos;登录失败！&apos; + res.errMsg)</span><br><span class="line">&#125;</span><br><span class="line">&#125; ,</span><br><span class="line">fail: (err) =&gt; &#123;  </span><br><span class="line">console.log(&apos;uni.login 接口调用失败，将无法正常使用开放接口等服务&apos;, err)  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;)</span><br><span class="line">//#endif</span><br><span class="line">//#ifdef H5</span><br><span class="line">that.ddGetAuthCode().then(res=&gt;&#123;</span><br><span class="line">let source = &apos;&apos;</span><br><span class="line">if(res===&apos;&apos;)&#123;</span><br><span class="line">source = &apos;h5&apos;</span><br><span class="line">that.codes = &apos;&apos;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">source = &apos;dd&apos;</span><br><span class="line">that.codes = res</span><br><span class="line">&#125;</span><br><span class="line">that.normalLogin(source)</span><br><span class="line">&#125;)</span><br><span class="line">//#endif</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">//登录</span><br><span class="line">normalLogin(source)&#123;</span><br><span class="line">let that =this;</span><br><span class="line">this.$http(&#123;</span><br><span class="line">url:&apos;/wxLogin/loginByPhone&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">phone:that.query.phone,</span><br><span class="line">source,</span><br><span class="line">code:that.codes,</span><br><span class="line">validCode:that.query.validCode</span><br><span class="line">&#125;,</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">if(res.status == &apos;200&apos;)&#123;</span><br><span class="line">uni.setStorageSync(&apos;token&apos;,res.data.token);</span><br><span class="line">uni.setStorageSync(&apos;user&apos;,res.data.username);</span><br><span class="line">uni.switchTab(&#123;url: &apos;/pages/index/index&apos;&#125;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">title: res.message,</span><br><span class="line">icon:&apos;none&apos;,</span><br><span class="line">duration: 1000</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).catch(()=&gt;&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>浙政钉免登文档：<a href="https://openplatform-portal.dg-work.cn/portal/#/helpdoc?docKey=kfzn&amp;slug=kpkrae" target="_blank" rel="noopener">h5获取免登授权码</a><br>微信免登: <a href="https://uniapp.dcloud.io/api/plugins/login?id=login" target="_blank" rel="noopener">uniapp的 uni.login</a></p><h2 id="数据埋点"><a href="#数据埋点" class="headerlink" title="数据埋点"></a>数据埋点</h2><ul><li><p>埋点：<br> 埋点代码分为：稳定性监控代码（Emas）和流量分析代码(A+)。<br> 流量分析代码(A+)包含通用采集 SDK、基础埋点、用户信息埋点；<br> 稳定性监控代码（Emas）只需要在首页加入。流量分析代码(A+)每个页面都需要加入，也可以写通用js，在其他页面引入。</p></li><li><p>稳定性监控代码(html页面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   &lt;script src=&apos;https://wpk-gate.zjzwfw.gov.cn/static/wpk-jssdk.1.0.2/wpkReporter.js&apos; crossorigin=&apos;true&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  try &#123;</span><br><span class="line">    const config = &#123;</span><br><span class="line">      bid: &apos;************&apos;,</span><br><span class="line">      signkey: &apos;1234567890abcdef&apos;,</span><br><span class="line">      gateway: &apos;https://wpk-gate.zjzwfw.gov.cn&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">    const wpk = new wpkReporter(config);</span><br><span class="line">    wpk.installAll();</span><br><span class="line">    window._wpk = wpk;</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.error(&apos;WpkReporter init fail&apos;, err);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>流量分析代码</p><ul><li><p>引入api，通用采集SDK (html页面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     (function(w, d, s, q, i) &#123;</span><br><span class="line">       w[q] = w[q] || [];</span><br><span class="line">       var f = d.getElementsByTagName(s)[0],j = d.createElement(s);</span><br><span class="line">       j.async = true;</span><br><span class="line">       j.id = &apos;beacon-aplus&apos;;</span><br><span class="line">       j.src = &apos;https://alidt.alicdn.com/alilog/mlog/aplus_cloud.js&apos;;</span><br><span class="line">       f.parentNode.insertBefore(j, f);</span><br><span class="line">     &#125;)(window, document, &apos;script&apos;, &apos;aplus_queue&apos;);</span><br><span class="line">   </span><br><span class="line">     aplus_queue.push(&#123;</span><br><span class="line">       action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">       arguments: [&apos;aplus-rhost-v&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">     &#125;);</span><br><span class="line">     aplus_queue.push(&#123;</span><br><span class="line">       action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">       arguments: [&apos;aplus-rhost-g&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">     &#125;);</span><br><span class="line">     </span><br><span class="line">     var u = navigator.userAgent</span><br><span class="line">     var isAndroid = u.indexOf(&apos;Android&apos;) &gt; -1</span><br><span class="line">     var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)</span><br><span class="line">   </span><br><span class="line">     aplus_queue.push(&#123;</span><br><span class="line">       action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">       arguments: [&apos;appId&apos;, isAndroid ? &apos;28302650&apos; : isIOS ? &apos;28328447&apos; : &apos;47130293&apos;]</span><br><span class="line">     &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>在每个页面做基础埋点和用户信息埋点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1.基础埋点：单页应用 或 “单个页面”需异步补充PV日志参数还需进行如下埋点：</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;aplus-waiting&apos;, &apos;MAN&apos;]</span><br><span class="line">&#125;);//</span><br><span class="line">// 单页应用路由切换后 或 在异步获取到pv日志所需的参数后再执行sendPV：</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  &apos;action&apos;:&apos;aplus.sendPV&apos;,</span><br><span class="line">  &apos;arguments&apos;:[&#123;</span><br><span class="line">    is_auto: false</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    // 当前你的应用信息，此两行按应用实际参数修改，不可自定义。</span><br><span class="line">    sapp_id: &apos;*****&apos;,</span><br><span class="line">    sapp_name: &apos;*********&apos;,</span><br><span class="line">    // 自定义PV参数key-value键值对（只能是这种平铺的json，不能做多层嵌套），如：</span><br><span class="line">    x: 111,</span><br><span class="line">    y: 222</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">2.用户信息埋点</span><br><span class="line">// 如采集用户信息是异步行为需要先执行这个BLOCK埋点</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;_hold&apos;, &apos;BLOCK&apos;]</span><br><span class="line">&#125;);</span><br><span class="line">// 设置会员昵称</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_nick&quot;, &quot;当前会员用户昵称&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">// 设置会员ID</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_id&quot;, &quot;当前会员ID&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_dev_id&quot;, &quot;yourDeviceId&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">// 如采集用户信息是异步行为，需要先设置完用户信息后再执行这个START埋点</span><br><span class="line">// 此时被block住的日志会携带上用户信息逐条发出</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;_hold&apos;, &apos;START&apos;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>注意每个应用中稳定性监控中的bid和基础埋点中的sapp_id、sapp_name  是不同的，请根据自己的应用填写信息。</p></li></ul></li></ul><h2 id="uniapp埋点方法和遇见的坑"><a href="#uniapp埋点方法和遇见的坑" class="headerlink" title="uniapp埋点方法和遇见的坑"></a>uniapp埋点方法和遇见的坑</h2><h3 id="遇见的坑"><a href="#遇见的坑" class="headerlink" title="遇见的坑"></a>遇见的坑</h3><p>首先使用uniapp做埋点分析遇见的两大问题：html页面和路由问题。</p><ol><li>uniapp的html页面配置(<a href="https://uniapp.dcloud.io/collocation/manifest?id=h5-template" target="_blank" rel="noopener">h5-template官网文档</a>)</li></ol><ul><li><p>首先在manifest的h5配置选项中的template属性用于配置项目的html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;h5&quot; : &#123;</span><br><span class="line">      &quot;router&quot; : &#123;</span><br><span class="line">          &quot;mode&quot; : &quot;hash&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;template&quot; : &quot;index.html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在根目录创建模板文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">       &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">       &lt;title&gt;</span><br><span class="line">           &lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">       &lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var coverSupport = &apos;CSS&apos; in window &amp;&amp; typeof CSS.supports === &apos;function&apos; &amp;&amp; (CSS.supports(&apos;top: env(a)&apos;) || CSS.supports(&apos;top: constant(a)&apos;))</span><br><span class="line">document.write(&apos;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&apos; + (coverSupport ? &apos;, viewport-fit=cover&apos; : &apos;&apos;) + &apos;&quot; /&gt;&apos;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 自定义模板中引入这个css link,解决页面错乱问题 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= BASE_URL %&gt;static/index.&lt;%= VUE_APP_INDEX_CSS_HASH %&gt;.css&quot; /&gt;</span><br><span class="line">&lt;!-- 引入埋点代码 --&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">       &lt;noscript&gt;</span><br><span class="line">           &lt;strong&gt;Please enable JavaScript to continue.&lt;/strong&gt;</span><br><span class="line">       &lt;/noscript&gt;</span><br><span class="line">       &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><div style="color: #f56c6c;background-color: #fef0f0;padding:10px">注意事项：自定义模板后会产生页面错乱问题，解决方式是在自定义模板中引入下面这个css link <a href="https://ask.dcloud.net.cn/question/65055" target="_blank" rel="noopener">参考解决方案</a></div></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= BASE_URL %&gt;static/index.&lt;%= VUE_APP_INDEX_CSS_HASH %&gt;.css&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>uniapp的类似router配置<br>要给每个页面做埋点，实现方式是在进入每个路由（beforeEach）之前做拦截操作然后进行埋点，但是uniapp不想vue-router一样有这个方法，所以引出与uniapp适用的router方案，就是插件uni-crazy-router。<br>uni-crazy-router：<a href="https://github.com/devilwjp/uni-crazy-router" target="_blank" rel="noopener">github地址</a> <a href="https://ext.dcloud.net.cn/plugin?id=1658" target="_blank" rel="noopener">uniapp-插件市场-简单使用方法</a><br>使用方式：</p><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i uni-crazy-router -S</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 根目录创建src/router/index.js。</span><br><span class="line">   import Vue from &apos;vue&apos;</span><br><span class="line">import uniCrazyRouter from &quot;uni-crazy-router&quot;;</span><br><span class="line">Vue.use(uniCrazyRouter)</span><br><span class="line"></span><br><span class="line">uniCrazyRouter.beforeEach(async (to, from ,next)=&gt;&#123;</span><br><span class="line">    // 逻辑代码</span><br><span class="line">    写流量分析的逻辑代码</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">uniCrazyRouter.afterEach((to, from)=&gt;&#123;</span><br><span class="line">    // 逻辑代码</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">uniCrazyRouter[&apos;on&apos;+&apos;Error&apos;]((to, from)=&gt;&#123;</span><br><span class="line">    // 逻辑代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 在main.js入口文件引入配置的路由</span><br><span class="line">import &apos;./router&apos; // 引入路由</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ul><li><p>html模板文件代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">       &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">       &lt;title&gt;</span><br><span class="line">           &lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">       &lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var coverSupport = &apos;CSS&apos; in window &amp;&amp; typeof CSS.supports === &apos;function&apos; &amp;&amp; (CSS.supports(&apos;top: env(a)&apos;) || CSS.supports(&apos;top: constant(a)&apos;))</span><br><span class="line">document.write(&apos;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&apos; + (coverSupport ? &apos;, viewport-fit=cover&apos; : &apos;&apos;) + &apos;&quot; /&gt;&apos;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 自定义模板中引入这个css link,解决页面错乱问题 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= BASE_URL %&gt;static/index.&lt;%= VUE_APP_INDEX_CSS_HASH %&gt;.css&quot; /&gt;</span><br><span class="line">&lt;!-- 引入api --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">      (function(w, d, s, q, i) &#123;</span><br><span class="line">        w[q] = w[q] || [];</span><br><span class="line">        var f = d.getElementsByTagName(s)[0],j = d.createElement(s);</span><br><span class="line">        j.async = true;</span><br><span class="line">        j.id = &apos;beacon-aplus&apos;;</span><br><span class="line">        j.src = &apos;https://alidt.alicdn.com/alilog/mlog/aplus_cloud.js&apos;;</span><br><span class="line">        f.parentNode.insertBefore(j, f);</span><br><span class="line">      &#125;)(window, document, &apos;script&apos;, &apos;aplus_queue&apos;);</span><br><span class="line">    </span><br><span class="line">      aplus_queue.push(&#123;</span><br><span class="line">        action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">        arguments: [&apos;aplus-rhost-v&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">      &#125;);</span><br><span class="line">      aplus_queue.push(&#123;</span><br><span class="line">        action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">        arguments: [&apos;aplus-rhost-g&apos;, &apos;alog.zjzwfw.gov.cn&apos;]</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      var u = navigator.userAgent</span><br><span class="line">      var isAndroid = u.indexOf(&apos;Android&apos;) &gt; -1</span><br><span class="line">      var isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)</span><br><span class="line">    </span><br><span class="line">      aplus_queue.push(&#123;</span><br><span class="line">        action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">        arguments: [&apos;appId&apos;, isAndroid ? &apos;28302650&apos; : isIOS ? &apos;28328447&apos; : &apos;47130293&apos;]</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 稳定性监控 埋点 --&gt;</span><br><span class="line">&lt;script src=&apos;https://wpk-gate.zjzwfw.gov.cn/static/wpk-jssdk.1.0.2/wpkReporter.js&apos; crossorigin=&apos;true&apos;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">        const config = &#123;</span><br><span class="line">          bid: &apos;*********&apos;,</span><br><span class="line">          signkey: &apos;1234567890abcdef&apos;,</span><br><span class="line">          gateway: &apos;https://wpk-gate.zjzwfw.gov.cn&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">        const wpk = new wpkReporter(config);</span><br><span class="line">        wpk.installAll();</span><br><span class="line">        window._wpk = wpk;</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        console.error(&apos;WpkReporter init fail&apos;, err);</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">       &lt;noscript&gt;</span><br><span class="line">           &lt;strong&gt;Please enable JavaScript to continue.&lt;/strong&gt;</span><br><span class="line">       &lt;/noscript&gt;</span><br><span class="line">       &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.bootcss.com/vConsole/3.3.0/vconsole.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 初始化</span><br><span class="line">    // var vConsole = new VConsole();</span><br><span class="line">    // console.log(&apos;Hello world&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>路由配置代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line">* @description 流量分析埋点</span><br><span class="line">* @author 大梦</span><br><span class="line">*/</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import uniCrazyRouter from &quot;uni-crazy-router&quot;</span><br><span class="line">Vue.use(uniCrazyRouter)</span><br><span class="line">import &#123; allPages &#125; from &apos;../common/index.js&apos; //所有页面的router对象（路径和路径名）</span><br><span class="line"></span><br><span class="line">//添加埋点 - 单页应用路由切换后</span><br><span class="line">uniCrazyRouter.beforeEach((to, from ,next)=&gt;&#123;</span><br><span class="line">let nextRoute = allPages.find(v=&gt;&#123;return v.path==to.url&#125;)</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">arguments: [&apos;_hold&apos;, &apos;BLOCK&apos;]</span><br><span class="line">  &#125;);</span><br><span class="line">// 1.添加基础埋点</span><br><span class="line">try&#123;</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">  arguments: [&apos;aplus-waiting&apos;, &apos;MAN&apos;]</span><br><span class="line">&#125;);</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">&apos;action&apos;:&apos;aplus.sendPV&apos;,</span><br><span class="line">&apos;arguments&apos;:[&#123;</span><br><span class="line">is_auto: false</span><br><span class="line">&#125;, &#123;</span><br><span class="line">// 当前你的应用信息，此两行按应用实际参数修改，不可自定义。</span><br><span class="line">bid: &apos;*********&apos;,</span><br><span class="line">sapp_id: &apos;*********&apos;,</span><br><span class="line">sapp_name: &apos;*********&apos;,</span><br><span class="line">page_url: to.url,</span><br><span class="line">page_id: nextRoute.path, // 唯一性</span><br><span class="line">page_name: nextRoute.navigationBarTitleText</span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br><span class="line">&#125; catch(err) &#123;</span><br><span class="line">console.log(&apos;sendPV init fail in policyDetailPage&apos;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2.添加用户信息埋点 （做浙政钉埋点，必须是钉钉用户的真实信息）</span><br><span class="line">let accountId = uni.getStorageSync(&apos;accountId&apos;)</span><br><span class="line">let nickNameCn = uni.getStorageSync(&apos;nickNameCn&apos;)</span><br><span class="line">// console.log(nickNameCn,accountId) </span><br><span class="line">// 如采集用户信息是异步行为需要先执行这个BLOCK埋点</span><br><span class="line">try&#123;</span><br><span class="line">// 设置会员昵称</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_nick&quot;, nickNameCn]</span><br><span class="line">&#125;);</span><br><span class="line">// 设置会员ID</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_user_id&quot;, accountId]</span><br><span class="line">&#125;);</span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">  action: &quot;aplus.setMetaInfo&quot;,</span><br><span class="line">  arguments: [&quot;_dev_id&quot;, &quot;yourDeviceId&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">&#125; catch(err) &#123;</span><br><span class="line">console.log(&apos;usermessage&apos;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aplus_queue.push(&#123;</span><br><span class="line">action: &apos;aplus.setMetaInfo&apos;,</span><br><span class="line">arguments: [&apos;_hold&apos;, &apos;START&apos;]</span><br><span class="line">&#125;);</span><br><span class="line">   next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>参考文档和开发手册<br><a href="https://gitee.com/Chensanr/daily-code/blob/master/js-basis/%E6%B5%99%E6%94%BF%E9%92%89h5&amp;%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%94%E7%94%A8%E9%87%87%E9%9B%86%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C.pdf" target="_blank" rel="noopener">浙政钉h5&amp;小程序应用采集开发手册</a><br><a href="https://gitee.com/Chensanr/daily-code/blob/master/js-basis/%E6%B5%99%E6%94%BF%E9%92%892.0%E5%BA%94%E7%94%A8%E9%87%87%E9%9B%86%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E.docx" target="_blank" rel="noopener">浙政钉2.0应用采集通用代码及相关说明</a></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>小程序和微信公众号的登录逻辑有点相似，具体可以查看官方API.<br>小程序文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信</a><br>uni-app文档：<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">uni-app</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;uniapp项目实现一套代码多端发布，可适用小程序，app，h5等项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/vue/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://chensanr.gitee.io/categories/Vue/"/>
    
      <category term="login" scheme="https://chensanr.gitee.io/categories/Vue/login/"/>
    
    
      <category term="小程序" scheme="https://chensanr.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="uniapp" scheme="https://chensanr.gitee.io/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>javaScript 继承</title>
    <link href="https://chensanr.gitee.io/2019/06/27/js%E7%BB%A7%E6%89%BF/"/>
    <id>https://chensanr.gitee.io/2019/06/27/js继承/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2022-01-25T09:14:59.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>javaScript继承</p></blockquote><p><img src="/images/web/default.jpg" alt="目录"><a id="more"></a><br>深入了解javaScript的原型以及原型链，有利于深入理解js的内部机制。</p><h2 id="ES5继承"><a href="#ES5继承" class="headerlink" title="ES5继承"></a>ES5继承</h2><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><ul><li><p>构造函数、原型对象和实例之间的关系<br>所有函数都是Function构造函数的实例（自定义的构造函数和函数方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function F()&#123;&#125; //构造函数</span><br><span class="line">var f = new F();//实例</span><br><span class="line">F.prototype //原型对象</span><br><span class="line"></span><br><span class="line">// 构造器</span><br><span class="line">F.prototype.constructor === F; // true</span><br><span class="line">F.__proto__ === Function.prototype; // true</span><br><span class="line">Function.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br><span class="line"></span><br><span class="line">// 实例</span><br><span class="line">f.__proto__ === F.prototype; // true</span><br><span class="line">F.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br></pre></td></tr></table></figure></li><li><p>本质：<br>  子构造函数的原型指向父构造函数的实例对象</p></li><li>所有构造函数定义的时候都会默认创建一个原型对象，（即默认原型）所有函数的默认原型 都是Object的实例，所以可以调用Object.prototype的方法。后面介绍的继承方式都是改变构造函数的默认原型。</li><li>每个对象都有一个<strong>proto</strong>的属性，用于指向实例的原型对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function F()&#123;&#125;;</span><br><span class="line">let f = new F();</span><br><span class="line">console.log(f.__proto__)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">constructor:F</span><br><span class="line">__proto__:&#123;</span><br><span class="line">    constructor:Object</span><br><span class="line">&#125;</span><br><span class="line">//</span><br></pre></td></tr></table></figure></li></ul><h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123; </span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Child(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*主*/</span><br><span class="line">//子构造函数的原型指向父构造函数的实例</span><br><span class="line">Child.prototype = new Parent(&apos;father&apos;);</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure><h4 id="类式继承（属性）"><a href="#类式继承（属性）" class="headerlink" title="类式继承（属性）"></a>类式继承（属性）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123; </span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.doSomthing = function() &#123;</span><br><span class="line">    console.log(&apos;parent do something!&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);/*主*/</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;);</span><br><span class="line">child.sayName();      </span><br><span class="line">child.doSomthing();</span><br></pre></td></tr></table></figure><h4 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123; </span><br><span class="line">    this.parentName = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.doSomething = function() &#123;</span><br><span class="line">    console.log(&apos;parent do something!&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);/*2*/</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">/*1*/</span><br><span class="line">Child.prototype = new Parent();      </span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;);</span><br><span class="line">child.sayName();       // child name: son</span><br><span class="line">child.doSomething();</span><br></pre></td></tr></table></figure><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123;</span><br><span class="line">    this.parentName = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;parent name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);  </span><br><span class="line">    this.name = name;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function create(proto) &#123;//区别：用一个 F 空的构造函数去取代执行了 Parent 这个构造函数，减少两次创建父构造函数调用</span><br><span class="line">    function F()&#123;&#125;</span><br><span class="line">    F.prototype = proto;</span><br><span class="line">    return new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = create(Parent.prototype);/*主*/</span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    console.log(&apos;child name:&apos;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line">var parent = new Parent(&apos;father&apos;);</span><br><span class="line">parent.sayName();    // parent name: father</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;, &apos;father&apos;);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure><p>如上可看出，我们手动创建了一个 create 函数，但Object.create()函数原理就是上面create方法，所以可以把代码改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function Parent(name) &#123;</span><br><span class="line">    this.parentName = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(name, parentName) &#123;</span><br><span class="line">    Parent.call(this, parentName);  </span><br><span class="line">    this.name = name;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function inheritPrototype(Parent, Child) &#123;</span><br><span class="line">    Child.prototype = Object.create(Parent.prototype);   //修改部分</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Parent, Child);</span><br><span class="line"></span><br><span class="line">Child.prototype.sayName = function() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var parent = new Parent(&apos;father&apos;);</span><br><span class="line">parent.sayName();      // parent name: father</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;son&apos;, &apos;father&apos;);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure></p><p>以上为es5的继承部分，实现的是实例原型链部分。</p><h2 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Parent&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    static sayHello()&#123;//构造函数的方法(挂在构造函数上)</span><br><span class="line">        console.log(&apos;hello&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    sayName()&#123;//实例方法(挂在原型上)</span><br><span class="line">        console.log(&apos;my name is &apos; + this.name);</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Child extends Parent&#123;</span><br><span class="line">    constructor(name, age)&#123;</span><br><span class="line">        super(name); // --&gt;对向 Parent.call(this, parentName);</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    sayAge()&#123;</span><br><span class="line">        console.log(&apos;my age is &apos; + this.age);</span><br><span class="line">        return this.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let parent = new Parent(&apos;Parent&apos;);</span><br><span class="line">let child = new Child(&apos;Child&apos;, 18);</span><br><span class="line">console.log(&apos;parent: &apos;, parent); // parent:  Parent &#123;name: &quot;Parent&quot;&#125;</span><br><span class="line"></span><br><span class="line">Parent.sayHello(); // hello</span><br><span class="line">parent.sayName(); // my name is Parent</span><br><span class="line">console.log(&apos;child: &apos;, child); // child:  Child &#123;name: &quot;Child&quot;, age: 18&#125;</span><br><span class="line"></span><br><span class="line">Child.sayHello(); // hello  子构造函数继承了父构造函数的方法</span><br><span class="line">child.sayName(); // my name is Child</span><br><span class="line">child.sayAge(); // my age is 18</span><br></pre></td></tr></table></figure><p>这段代码里有两条原型链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1、构造器原型链</span><br><span class="line">Child.__proto__ === Parent; // true</span><br><span class="line"></span><br><span class="line">Parent.__proto__ === Function.prototype; // true</span><br><span class="line">Function.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br><span class="line">// 2、实例原型链</span><br><span class="line">child.__proto__ === Child.prototype; // true</span><br><span class="line"></span><br><span class="line">Child.prototype.__proto__ === Parent.prototype; // true</span><br><span class="line">Parent.prototype.__proto__ === Object.prototype; // true</span><br><span class="line">Object.prototype.__proto__ === null; // true</span><br></pre></td></tr></table></figure></p><p>以上是es6的继承部分，实现了除实例原型链部分外 还有构造器原型链部分。</p><p>ES6 extends 继承，主要就是：<br>1.把子类构造函数(Child)的原型(<strong>proto</strong>)指向了父类构造函数(Parent)，<br>2.把子类实例child的原型对象(Child.prototype) 的原型(<strong>proto</strong>)指向了父类parent的原型对象(Parent.prototype)。<br>3.子类构造函数Child继承了父类构造函数Preant的里的属性。使用super调用的(ES5则用call或者apply调用传参)。<br>其中2，3其实就是实现es5中寄生组合式继承。</p><h3 id="ES6的extends做了哪些操作"><a href="#ES6的extends做了哪些操作" class="headerlink" title="ES6的extends做了哪些操作"></a>ES6的extends做了哪些操作</h3><p>1.new、Object.create和Object.setPrototypeOf可以设置<strong>proto</strong><br>    new出来的实例的<strong>proto</strong>指向构造函数的prototype，这就是new做的事情。<br>    Object.create 是ES5的，该方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。<br>    Object.setPrototypeOf 是ES6的，设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或 null。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object.setPrototypeOf = function (obj, proto) &#123;</span><br><span class="line">    obj.__proto__ = proto;</span><br><span class="line">    return obj; </span><br><span class="line">&#125;</span><br><span class="line">比如es6中实现继承的过程中</span><br><span class="line">Child.prototype.__proto__ = Parent.prototype;</span><br><span class="line">Child.__proto__ = Parent;</span><br><span class="line">即可调用此方法实现</span><br><span class="line">Object.setPrototypeOf（Child，Parent）</span><br><span class="line">Object.setPrototypeOf（Child.prototype，Parent.prototype）</span><br></pre></td></tr></table></figure></code></pre><p>2.ES6的extends<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// ES5 实现ES6 extends的例子</span><br><span class="line">function Parent(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.sayHello = function()&#123;</span><br><span class="line">    console.log(&apos;hello&apos;);</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = function()&#123;</span><br><span class="line">    console.log(&apos;my name is &apos; + this.name);</span><br><span class="line">    return this.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(name, age)&#123;</span><br><span class="line">    // 相当于super</span><br><span class="line">    Parent.call(this, name);</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">// new</span><br><span class="line">function object()&#123;</span><br><span class="line">    function F() &#123;&#125;</span><br><span class="line">    F.prototype = proto;</span><br><span class="line">    return new F();</span><br><span class="line">&#125;</span><br><span class="line">function _inherits(Child, Parent)&#123;</span><br><span class="line">    // Object.create</span><br><span class="line">    Child.prototype = Object.create(Parent.prototype);</span><br><span class="line">    // __proto__</span><br><span class="line">    // Child.prototype.__proto__ = Parent.prototype;</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">    // ES6</span><br><span class="line">    // Object.setPrototypeOf(Child, Parent);</span><br><span class="line">    // __proto__</span><br><span class="line">    Child.__proto__ = Parent;//es6实现构造器原型链继承的方式，子构造函数可以调用父构造函数的静态方法</span><br><span class="line">&#125;</span><br><span class="line">_inherits(Child,  Parent);</span><br><span class="line">Child.prototype.sayAge = function()&#123;</span><br><span class="line">    console.log(&apos;my age is &apos; + this.age);</span><br><span class="line">    return this.age;</span><br><span class="line">&#125;</span><br><span class="line">var parent = new Parent(&apos;Parent&apos;);</span><br><span class="line">var child = new Child(&apos;Child&apos;, 18);</span><br><span class="line">console.log(&apos;parent: &apos;, parent); // parent:  Parent &#123;name: &quot;Parent&quot;&#125;</span><br><span class="line">Parent.sayHello(); // hello</span><br><span class="line">parent.sayName(); // my name is Parent</span><br><span class="line">console.log(&apos;child: &apos;, child); // child:  Child &#123;name: &quot;Child&quot;, age: 18&#125;</span><br><span class="line">Child.sayHello(); // hello</span><br><span class="line">child.sayName(); // my name is Child</span><br><span class="line">child.sayAge(); // my age is 18</span><br></pre></td></tr></table></figure></p><h2 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h2><pre><code>两者都实现了实例原型链继承但是ES6实现了构造器原型链继承，既Child.__proto__ = Parent;</code></pre><p>参考文章：<br>    <a href="https://zhuanlan.zhihu.com/p/25578222" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25578222</a><br>    <a href="https://zhuanlan.zhihu.com/p/57336944" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/57336944</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;javaScript继承&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/default.jpg&quot; alt=&quot;目录&quot;&gt;
    
    </summary>
    
      <category term="Web" scheme="https://chensanr.gitee.io/categories/Web/"/>
    
      <category term="javaScript" scheme="https://chensanr.gitee.io/categories/Web/javaScript/"/>
    
    
      <category term="ECMAScript" scheme="https://chensanr.gitee.io/tags/ECMAScript/"/>
    
  </entry>
  
</feed>
